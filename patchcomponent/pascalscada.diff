Index: examples/laz_custom_user_management/customusermanagement.lpi
===================================================================
--- examples/laz_custom_user_management/customusermanagement.lpi	(revision 928)
+++ examples/laz_custom_user_management/customusermanagement.lpi	(working copy)
@@ -1,4 +1,4 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <CONFIG>
   <ProjectOptions>
     <Version Value="9"/>
@@ -44,7 +44,6 @@
       <Unit0>
         <Filename Value="customusermanagement.lpr"/>
         <IsPartOfProject Value="True"/>
-        <UnitName Value="customusermanagement"/>
       </Unit0>
       <Unit1>
         <Filename Value="umain.pas"/>
@@ -52,7 +51,6 @@
         <ComponentName Value="Form1"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="umain"/>
       </Unit1>
     </Units>
   </ProjectOptions>
@@ -63,6 +61,7 @@
     </Target>
     <SearchPaths>
       <IncludeFiles Value="$(ProjOutDir)"/>
+      <OtherUnitFiles Value="../../src/hmi"/>
       <UnitOutputDirectory Value="lib/$(TargetCPU)-$(TargetOS)"/>
     </SearchPaths>
     <Linking>
@@ -72,12 +71,6 @@
         </Win32>
       </Options>
     </Linking>
-    <Other>
-      <CompilerMessages>
-        <MsgFileName Value=""/>
-      </CompilerMessages>
-      <CompilerPath Value="$(CompPath)"/>
-    </Other>
   </CompilerOptions>
   <Debugging>
     <Exceptions Count="3">
Index: examples/laz_custom_user_management/customusermanagement.lps
===================================================================
--- examples/laz_custom_user_management/customusermanagement.lps	(revision 928)
+++ examples/laz_custom_user_management/customusermanagement.lps	(working copy)
@@ -1,182 +1,177 @@
-<?xml version="1.0"?>
-<CONFIG>
-  <ProjectSession>
-    <Version Value="9"/>
-    <BuildModes Active="Default"/>
-    <Units Count="8">
-      <Unit0>
-        <Filename Value="customusermanagement.lpr"/>
-        <IsPartOfProject Value="True"/>
-        <UnitName Value="customusermanagement"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="1"/>
-        <UsageCount Value="22"/>
-      </Unit0>
-      <Unit1>
-        <Filename Value="umain.pas"/>
-        <IsPartOfProject Value="True"/>
-        <ComponentName Value="Form1"/>
-        <HasResources Value="True"/>
-        <ResourceBaseClass Value="Form"/>
-        <UnitName Value="umain"/>
-        <IsVisibleTab Value="True"/>
-        <EditorIndex Value="0"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="61"/>
-        <CursorPos X="36" Y="87"/>
-        <UsageCount Value="22"/>
-        <Loaded Value="True"/>
-        <LoadedDesigner Value="True"/>
-      </Unit1>
-      <Unit2>
-        <Filename Value="../../controlsecuritymanager.pas"/>
-        <UnitName Value="ControlSecurityManager"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="43"/>
-        <CursorPos X="52" Y="55"/>
-        <UsageCount Value="10"/>
-        <DefaultSyntaxHighlighter Value="Delphi"/>
-      </Unit2>
-      <Unit3>
-        <Filename Value="../../customizedusermanagement.pas"/>
-        <UnitName Value="CustomizedUserManagement"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="101"/>
-        <CursorPos X="28" Y="127"/>
-        <UsageCount Value="10"/>
-        <DefaultSyntaxHighlighter Value="Delphi"/>
-      </Unit3>
-      <Unit4>
-        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
-        <EditorIndex Value="1"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="360"/>
-        <CursorPos X="1" Y="372"/>
-        <UsageCount Value="10"/>
-        <Loaded Value="True"/>
-      </Unit4>
-      <Unit5>
-        <Filename Value="../../../../lazarus/lcl/include/wincontrol.inc"/>
-        <EditorIndex Value="2"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="5487"/>
-        <CursorPos X="1" Y="5499"/>
-        <UsageCount Value="10"/>
-        <Loaded Value="True"/>
-      </Unit5>
-      <Unit6>
-        <Filename Value="../../basicusermanagement.pas"/>
-        <UnitName Value="BasicUserManagement"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="120"/>
-        <CursorPos X="106" Y="134"/>
-        <UsageCount Value="10"/>
-        <DefaultSyntaxHighlighter Value="Delphi"/>
-      </Unit6>
-      <Unit7>
-        <Filename Value="../../usrmgnt_login.pas"/>
-        <UnitName Value="usrmgnt_login"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="41"/>
-        <CursorPos X="37" Y="56"/>
-        <UsageCount Value="10"/>
-        <DefaultSyntaxHighlighter Value="Delphi"/>
-      </Unit7>
-    </Units>
-    <General>
-      <ActiveWindowIndexAtStart Value="0"/>
-    </General>
-    <JumpHistory Count="22" HistoryIndex="21">
-      <Position1>
-        <Filename Value="umain.pas"/>
-        <Caret Line="64" Column="47" TopLine="36"/>
-      </Position1>
-      <Position2>
-        <Filename Value="umain.pas"/>
-        <Caret Line="65" Column="47" TopLine="37"/>
-      </Position2>
-      <Position3>
-        <Filename Value="umain.pas"/>
-        <Caret Line="64" Column="47" TopLine="36"/>
-      </Position3>
-      <Position4>
-        <Filename Value="umain.pas"/>
-        <Caret Line="65" Column="47" TopLine="37"/>
-      </Position4>
-      <Position5>
-        <Filename Value="umain.pas"/>
-        <Caret Line="72" Column="39" TopLine="46"/>
-      </Position5>
-      <Position6>
-        <Filename Value="umain.pas"/>
-        <Caret Line="79" Column="1" TopLine="52"/>
-      </Position6>
-      <Position7>
-        <Filename Value="umain.pas"/>
-        <Caret Line="60" Column="6" TopLine="49"/>
-      </Position7>
-      <Position8>
-        <Filename Value="umain.pas"/>
-        <Caret Line="73" Column="3" TopLine="63"/>
-      </Position8>
-      <Position9>
-        <Filename Value="umain.pas"/>
-        <Caret Line="74" Column="3" TopLine="64"/>
-      </Position9>
-      <Position10>
-        <Filename Value="umain.pas"/>
-        <Caret Line="75" Column="3" TopLine="65"/>
-      </Position10>
-      <Position11>
-        <Filename Value="umain.pas"/>
-        <Caret Line="74" Column="3" TopLine="64"/>
-      </Position11>
-      <Position12>
-        <Filename Value="umain.pas"/>
-        <Caret Line="73" Column="3" TopLine="63"/>
-      </Position12>
-      <Position13>
-        <Filename Value="umain.pas"/>
-        <Caret Line="82" Column="36" TopLine="1"/>
-      </Position13>
-      <Position14>
-        <Filename Value="umain.pas"/>
-        <Caret Line="31" Column="38" TopLine="25"/>
-      </Position14>
-      <Position15>
-        <Filename Value="umain.pas"/>
-        <Caret Line="32" Column="38" TopLine="26"/>
-      </Position15>
-      <Position16>
-        <Filename Value="umain.pas"/>
-        <Caret Line="44" Column="64" TopLine="28"/>
-      </Position16>
-      <Position17>
-        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
-        <Caret Line="372" Column="1" TopLine="360"/>
-      </Position17>
-      <Position18>
-        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
-        <Caret Line="383" Column="1" TopLine="363"/>
-      </Position18>
-      <Position19>
-        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
-        <Caret Line="151" Column="1" TopLine="139"/>
-      </Position19>
-      <Position20>
-        <Filename Value="../../../../lazarus/lcl/include/wincontrol.inc"/>
-        <Caret Line="5499" Column="1" TopLine="5487"/>
-      </Position20>
-      <Position21>
-        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
-        <Caret Line="372" Column="1" TopLine="360"/>
-      </Position21>
-      <Position22>
-        <Filename Value="umain.pas"/>
-        <Caret Line="101" Column="15" TopLine="68"/>
-      </Position22>
-    </JumpHistory>
-  </ProjectSession>
-  <EditorMacros Count="0"/>
-</CONFIG>
+<?xml version="1.0" encoding="UTF-8"?>
+<CONFIG>
+  <ProjectSession>
+    <Version Value="9"/>
+    <BuildModes Active="Default"/>
+    <Units Count="9">
+      <Unit0>
+        <Filename Value="customusermanagement.lpr"/>
+        <IsPartOfProject Value="True"/>
+        <CursorPos X="19" Y="10"/>
+        <UsageCount Value="23"/>
+        <Loaded Value="True"/>
+      </Unit0>
+      <Unit1>
+        <Filename Value="umain.pas"/>
+        <IsPartOfProject Value="True"/>
+        <ComponentName Value="Form1"/>
+        <HasResources Value="True"/>
+        <ResourceBaseClass Value="Form"/>
+        <IsVisibleTab Value="True"/>
+        <EditorIndex Value="1"/>
+        <CursorPos X="3" Y="77"/>
+        <UsageCount Value="23"/>
+        <Loaded Value="True"/>
+        <LoadedDesigner Value="True"/>
+      </Unit1>
+      <Unit2>
+        <Filename Value="../../controlsecuritymanager.pas"/>
+        <UnitName Value="ControlSecurityManager"/>
+        <TopLine Value="43"/>
+        <CursorPos X="52" Y="55"/>
+        <UsageCount Value="10"/>
+      </Unit2>
+      <Unit3>
+        <Filename Value="../../customizedusermanagement.pas"/>
+        <UnitName Value="CustomizedUserManagement"/>
+        <TopLine Value="101"/>
+        <CursorPos X="28" Y="127"/>
+        <UsageCount Value="10"/>
+      </Unit3>
+      <Unit4>
+        <Filename Value="../../../../lazarus/lcl/include/customform.inc"/>
+        <EditorIndex Value="-1"/>
+        <CursorPos Y="372"/>
+        <UsageCount Value="10"/>
+      </Unit4>
+      <Unit5>
+        <Filename Value="../../../../lazarus/lcl/include/wincontrol.inc"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="5487"/>
+        <CursorPos Y="5499"/>
+        <UsageCount Value="10"/>
+      </Unit5>
+      <Unit6>
+        <Filename Value="../../basicusermanagement.pas"/>
+        <UnitName Value="BasicUserManagement"/>
+        <TopLine Value="120"/>
+        <CursorPos X="106" Y="134"/>
+        <UsageCount Value="10"/>
+      </Unit6>
+      <Unit7>
+        <Filename Value="../../usrmgnt_login.pas"/>
+        <TopLine Value="41"/>
+        <CursorPos X="37" Y="56"/>
+        <UsageCount Value="10"/>
+      </Unit7>
+      <Unit8>
+        <Filename Value="../../../../lazarus/components/rtticontrols/runtimetypeinfocontrols.pas"/>
+        <UnitName Value="RunTimeTypeInfoControls"/>
+        <EditorIndex Value="-1"/>
+        <UsageCount Value="10"/>
+      </Unit8>
+    </Units>
+    <JumpHistory Count="25" HistoryIndex="24">
+      <Position1>
+        <Filename Value="umain.pas"/>
+        <Caret Line="64" Column="47" TopLine="36"/>
+      </Position1>
+      <Position2>
+        <Filename Value="umain.pas"/>
+        <Caret Line="65" Column="47" TopLine="37"/>
+      </Position2>
+      <Position3>
+        <Filename Value="umain.pas"/>
+        <Caret Line="64" Column="47" TopLine="36"/>
+      </Position3>
+      <Position4>
+        <Filename Value="umain.pas"/>
+        <Caret Line="65" Column="47" TopLine="37"/>
+      </Position4>
+      <Position5>
+        <Filename Value="umain.pas"/>
+        <Caret Line="72" Column="39" TopLine="46"/>
+      </Position5>
+      <Position6>
+        <Filename Value="umain.pas"/>
+        <Caret Line="79" TopLine="52"/>
+      </Position6>
+      <Position7>
+        <Filename Value="umain.pas"/>
+        <Caret Line="60" Column="6" TopLine="49"/>
+      </Position7>
+      <Position8>
+        <Filename Value="umain.pas"/>
+        <Caret Line="73" Column="3" TopLine="63"/>
+      </Position8>
+      <Position9>
+        <Filename Value="umain.pas"/>
+        <Caret Line="74" Column="3" TopLine="64"/>
+      </Position9>
+      <Position10>
+        <Filename Value="umain.pas"/>
+        <Caret Line="75" Column="3" TopLine="65"/>
+      </Position10>
+      <Position11>
+        <Filename Value="umain.pas"/>
+        <Caret Line="74" Column="3" TopLine="64"/>
+      </Position11>
+      <Position12>
+        <Filename Value="umain.pas"/>
+        <Caret Line="73" Column="3" TopLine="63"/>
+      </Position12>
+      <Position13>
+        <Filename Value="umain.pas"/>
+        <Caret Line="82" Column="36"/>
+      </Position13>
+      <Position14>
+        <Filename Value="umain.pas"/>
+        <Caret Line="31" Column="38" TopLine="25"/>
+      </Position14>
+      <Position15>
+        <Filename Value="umain.pas"/>
+        <Caret Line="32" Column="38" TopLine="26"/>
+      </Position15>
+      <Position16>
+        <Filename Value="umain.pas"/>
+        <Caret Line="44" Column="64" TopLine="28"/>
+      </Position16>
+      <Position17>
+        <Filename Value="umain.pas"/>
+        <Caret Line="101" Column="15" TopLine="68"/>
+      </Position17>
+      <Position18>
+        <Filename Value="umain.pas"/>
+        <Caret Line="87" Column="36" TopLine="61"/>
+      </Position18>
+      <Position19>
+        <Filename Value="umain.pas"/>
+        <Caret Line="16" Column="35"/>
+      </Position19>
+      <Position20>
+        <Filename Value="umain.pas"/>
+        <Caret Line="10" Column="22"/>
+      </Position20>
+      <Position21>
+        <Filename Value="customusermanagement.lpr"/>
+        <Caret Line="10" Column="19"/>
+      </Position21>
+      <Position22>
+        <Filename Value="umain.pas"/>
+        <Caret Line="9" Column="66"/>
+      </Position22>
+      <Position23>
+        <Filename Value="umain.pas"/>
+        <Caret Line="10" Column="15"/>
+      </Position23>
+      <Position24>
+        <Filename Value="umain.pas"/>
+        <Caret Line="94" Column="71" TopLine="79"/>
+      </Position24>
+      <Position25>
+        <Filename Value="umain.pas"/>
+        <Caret Line="61" Column="48" TopLine="45"/>
+      </Position25>
+    </JumpHistory>
+  </ProjectSession>
+</CONFIG>
Index: examples/laz_custom_user_management/umain.lfm
===================================================================
--- examples/laz_custom_user_management/umain.lfm	(revision 928)
+++ examples/laz_custom_user_management/umain.lfm	(working copy)
@@ -4,11 +4,11 @@
   Top = 101
   Width = 522
   Caption = 'Form1'
-  ClientHeight = 355
+  ClientHeight = 356
   ClientWidth = 522
   Menu = MainMenu1
   OnCreate = FormCreate
-  LCLVersion = '1.1'
+  LCLVersion = '1.5'
   object HMIEdit1: THMIEdit
     Left = 237
     Height = 23
@@ -49,9 +49,9 @@
   end
   object TILabel1: TTILabel
     Left = 96
-    Height = 13
+    Height = 15
     Top = 16
-    Width = 107
+    Width = 99
     Font.Style = [fsBold]
     Link.TIObject = CustomizedUserManagement1
     Link.TIPropertyName = 'CurrentUserLogin'
@@ -59,17 +59,17 @@
   end
   object Label1: TLabel
     Left = 8
-    Height = 13
+    Height = 15
     Top = 16
-    Width = 71
+    Width = 68
     Caption = 'Current user:'
     ParentColor = False
   end
   object TILabel2: TTILabel
     Left = 96
-    Height = 13
+    Height = 15
     Top = 40
-    Width = 117
+    Width = 97
     Link.TIObject = CustomizedUserManagement1
     Link.TIPropertyName = 'LoggedSince'
     ParentFont = False
@@ -76,9 +76,9 @@
   end
   object Label2: TLabel
     Left = 8
-    Height = 13
+    Height = 15
     Top = 40
-    Width = 77
+    Width = 73
     Caption = 'Logged since:'
     ParentColor = False
   end
Index: examples/laz_custom_user_management/umain.pas
===================================================================
--- examples/laz_custom_user_management/umain.pas	(revision 928)
+++ examples/laz_custom_user_management/umain.pas	(working copy)
@@ -6,8 +6,8 @@
 
 uses
   Classes, SysUtils, FileUtil, RTTICtrls, RTTIGrids, Forms, Controls, Graphics,
-  Dialogs, Menus, ActnList, StdCtrls, CustomizedUserManagement, PLCTagNumber,
-  HMIEdit, ControlSecurityManager;
+  Dialogs, Menus, ActnList, StdCtrls, HMICustomizedUserManagement, PLCTagNumber,
+  HMIEdit, HMIControlSecurityManager;
 
 type
 
Index: examples/laz_isotcp_demonstration/dm.lfm
===================================================================
--- examples/laz_isotcp_demonstration/dm.lfm	(revision 928)
+++ examples/laz_isotcp_demonstration/dm.lfm	(working copy)
@@ -1,475 +1,667 @@
-object DataModule1: TDataModule1
-  OldCreateOrder = False
-  Height = 459
-  HorizontalOffset = 985
-  VerticalOffset = 118
-  Width = 230
-  object TCP_UDPPort1: TTCP_UDPPort
-    Active = True
-    LogIOActions = True
-    LogFile = '/home/fabiolg/isotcp.log'
-    Host = '192.168.2.185'
-    Timeout = 50
-    ExclusiveDevice = True
-    OnCommPortOpenError = TCP_UDPPort1CommPortOpenError
-    left = 8
-    top = 8
-  end
-  object ISOTCPDriver1: TISOTCPDriver
-    CommunicationPort = TCP_UDPPort1
-    ConnectionWay = ISOTCP
-    left = 8
-    top = 40
-  end
-  object DB1: TPLCBlock
-    TagGUID = '{B0747848-93A1-11DF-AA46-001BFC644612}'
-    AutoRead = False
-    AutoWrite = False
-    PLCHack = 0
-    PLCSlot = 0
-    PLCStation = 2
-    MemFile_DB = 1
-    MemAddress = 0
-    MemSubElement = 0
-    MemReadFunction = 4
-    MemWriteFunction = 0
-    ProtocolDriver = ISOTCPDriver1
-    RefreshTime = 500
-    Size = 40
-    TagType = pttDWord
-    SwapBytes = True
-    SwapWords = True
-    left = 40
-    top = 8
-  end
-  object MD0_MD40: TPLCBlock
-    TagGUID = '{2358DCFB-93A2-11DF-AA46-001BFC644612}'
-    PLCHack = 0
-    PLCSlot = 0
-    PLCStation = 2
-    MemFile_DB = 0
-    MemAddress = 0
-    MemSubElement = 0
-    MemReadFunction = 3
-    MemWriteFunction = 0
-    ProtocolDriver = ISOTCPDriver1
-    RefreshTime = 12
-    Size = 11
-    TagType = pttDWord
-    SwapBytes = True
-    SwapWords = True
-    left = 72
-    top = 8
-  end
-  object DB1_DBD00: TPLCBlockElement
-    TagGUID = '{090B09C0-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 0
-    left = 40
-    top = 40
-  end
-  object DB1_DBD04: TPLCBlockElement
-    TagGUID = '{3F377D89-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 1
-    left = 40
-    top = 72
-  end
-  object DB1_DBD08: TPLCBlockElement
-    TagGUID = '{C79046CB-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 2
-    left = 40
-    top = 104
-  end
-  object DB1_DBD12: TPLCBlockElement
-    TagGUID = '{CF12E2C9-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 3
-    left = 40
-    top = 136
-  end
-  object DB1_DBD16: TPLCBlockElement
-    TagGUID = '{D4AAC635-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 4
-    left = 40
-    top = 168
-  end
-  object DB1_DBD20: TPLCBlockElement
-    TagGUID = '{D6C01DD6-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 5
-    left = 40
-    top = 200
-  end
-  object DB1_DBD24: TPLCBlockElement
-    TagGUID = '{DA2F20C5-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 6
-    left = 40
-    top = 232
-  end
-  object DB1_DBD28: TPLCBlockElement
-    TagGUID = '{DC2268E1-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 7
-    left = 40
-    top = 264
-  end
-  object DB1_DBD32: TPLCBlockElement
-    TagGUID = '{DDE364DE-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 8
-    left = 40
-    top = 296
-  end
-  object DB1_DBD36: TPLCBlockElement
-    TagGUID = '{DFA13295-93A2-11DF-AA46-001BFC644612}'
-    PLCBlock = DB1
-    Index = 9
-    left = 40
-    top = 328
-  end
-  object MD00: TPLCBlockElement
-    TagGUID = '{29D96AAE-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 0
-    left = 72
-    top = 40
-  end
-  object MD04: TPLCBlockElement
-    TagGUID = '{29DA4BDA-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 1
-    left = 72
-    top = 72
-  end
-  object MD08: TPLCBlockElement
-    TagGUID = '{29DB2E57-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 2
-    left = 72
-    top = 104
-  end
-  object MD12: TPLCBlockElement
-    TagGUID = '{29DC2BA7-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 3
-    left = 72
-    top = 136
-  end
-  object MD16: TPLCBlockElement
-    TagGUID = '{29DD124B-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 4
-    left = 72
-    top = 168
-  end
-  object MD20: TPLCBlockElement
-    TagGUID = '{29DE01ED-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 5
-    left = 72
-    top = 200
-  end
-  object MD24: TPLCBlockElement
-    TagGUID = '{29DF0D21-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 6
-    left = 72
-    top = 232
-  end
-  object MD28: TPLCBlockElement
-    TagGUID = '{29E00568-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 7
-    left = 72
-    top = 264
-  end
-  object MD32: TPLCBlockElement
-    TagGUID = '{29E0FD75-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 8
-    left = 72
-    top = 296
-  end
-  object MD36: TPLCBlockElement
-    TagGUID = '{29E21914-93A3-11DF-AA46-001BFC644612}'
-    PLCBlock = MD0_MD40
-    Index = 9
-    left = 72
-    top = 328
-  end
-  object InputsBYTE_01: TPLCTagNumber
-    TagGUID = '{A5A6E944-93A8-11DF-AA46-001BFC644612}'
-    PLCHack = 0
-    PLCSlot = 0
-    PLCStation = 2
-    MemFile_DB = 0
-    MemAddress = 1
-    MemSubElement = 0
-    MemReadFunction = 1
-    MemWriteFunction = 0
-    ProtocolDriver = ISOTCPDriver1
-    RefreshTime = 12
-    TagType = pttByte
-    left = 104
-    top = 8
-  end
-  object I0_0: TTagBit
-    TagGUID = '{FBF4B42B-93A8-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 0
-    EndBit = 0
-    left = 104
-    top = 40
-  end
-  object I0_1: TTagBit
-    TagGUID = '{EA286CED-7B0F-4D86-988C-DEE992FBBCB2}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 1
-    EndBit = 1
-    left = 104
-    top = 72
-  end
-  object I0_2: TTagBit
-    TagGUID = '{1A49923F-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 2
-    EndBit = 2
-    left = 104
-    top = 104
-  end
-  object I0_3: TTagBit
-    TagGUID = '{1BA09E17-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 3
-    EndBit = 3
-    left = 104
-    top = 136
-  end
-  object I0_4: TTagBit
-    TagGUID = '{1D9ED8BA-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 4
-    EndBit = 4
-    left = 104
-    top = 168
-  end
-  object I0_5: TTagBit
-    TagGUID = '{1EE73D23-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 5
-    EndBit = 5
-    left = 104
-    top = 200
-  end
-  object I0_6: TTagBit
-    TagGUID = '{20F2E595-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 6
-    EndBit = 6
-    left = 104
-    top = 232
-  end
-  object I0_7: TTagBit
-    TagGUID = '{22D0366D-93A9-11DF-AA46-001BFC644612}'
-    PLCTag = InputsBYTE_01
-    UseRawValue = False
-    StartBit = 7
-    EndBit = 7
-    left = 104
-    top = 264
-  end
-  object OutputsBYTE_01: TPLCTagNumber
-    TagGUID = '{477E97A0-2322-4E1F-B909-96D70F2950F5}'
-    PLCHack = 0
-    PLCSlot = 0
-    PLCStation = 2
-    MemFile_DB = 0
-    MemAddress = 2
-    MemSubElement = 0
-    MemReadFunction = 2
-    MemWriteFunction = 0
-    ProtocolDriver = ISOTCPDriver1
-    RefreshTime = 12
-    TagType = pttByte
-    left = 136
-    top = 8
-  end
-  object Q0_0: TTagBit
-    TagGUID = '{6A0638CB-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 0
-    EndBit = 0
-    left = 136
-    top = 40
-  end
-  object Q0_1: TTagBit
-    TagGUID = '{6A07739D-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 1
-    EndBit = 1
-    left = 136
-    top = 72
-  end
-  object Q0_2: TTagBit
-    TagGUID = '{6A08AE9F-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 2
-    EndBit = 2
-    left = 136
-    top = 104
-  end
-  object Q0_3: TTagBit
-    TagGUID = '{6A0A19E2-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 3
-    EndBit = 3
-    left = 136
-    top = 136
-  end
-  object Q0_4: TTagBit
-    TagGUID = '{6A0B9F42-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 4
-    EndBit = 4
-    left = 136
-    top = 168
-  end
-  object Q0_5: TTagBit
-    TagGUID = '{6A0D006F-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 5
-    EndBit = 5
-    left = 136
-    top = 200
-  end
-  object Q0_6: TTagBit
-    TagGUID = '{6A0E70F4-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 6
-    EndBit = 6
-    left = 136
-    top = 232
-  end
-  object Q0_7: TTagBit
-    TagGUID = '{6A0FC4E7-93AA-11DF-AA46-001BFC644612}'
-    PLCTag = OutputsBYTE_01
-    UseRawValue = False
-    StartBit = 7
-    EndBit = 7
-    left = 136
-    top = 264
-  end
-  object Counters: TPLCBlock
-    TagGUID = '{72AFD62A-73A8-41C5-BE62-23F8617ED7E0}'
-    PLCHack = 0
-    PLCSlot = 0
-    PLCStation = 2
-    MemFile_DB = 0
-    MemAddress = 0
-    MemSubElement = 0
-    MemReadFunction = 5
-    MemWriteFunction = 0
-    ProtocolDriver = ISOTCPDriver1
-    RefreshTime = 12
-    Size = 10
-    OnValueChange = CountersValueChange
-    TagType = pttWord
-    SwapBytes = True
-    left = 168
-    top = 8
-  end
-  object C0: TPLCBlockElement
-    TagGUID = '{3E3A7078-DEA6-4E0F-A828-8CE7D1EE5C1D}'
-    PLCBlock = Counters
-    Index = 0
-    left = 168
-    top = 40
-  end
-  object C1: TPLCBlockElement
-    TagGUID = '{8A89DCF5-2915-406A-93E7-9FBCB13B73F1}'
-    PLCBlock = Counters
-    Index = 1
-    left = 168
-    top = 72
-  end
-  object C2: TPLCBlockElement
-    TagGUID = '{AB16A901-DBDB-466A-9C32-BEBB7838F5B3}'
-    PLCBlock = Counters
-    Index = 2
-    left = 168
-    top = 104
-  end
-  object C3: TPLCBlockElement
-    TagGUID = '{1A8DC46B-99C9-4761-AC48-E4FB99044627}'
-    PLCBlock = Counters
-    Index = 3
-    left = 168
-    top = 136
-  end
-  object C4: TPLCBlockElement
-    TagGUID = '{19A280ED-CDE1-49B9-91F2-379D4E414920}'
-    PLCBlock = Counters
-    Index = 4
-    left = 168
-    top = 168
-  end
-  object C5: TPLCBlockElement
-    TagGUID = '{4121C494-628D-4555-A2E6-C916E06D0865}'
-    PLCBlock = Counters
-    Index = 5
-    left = 168
-    top = 200
-  end
-  object C6: TPLCBlockElement
-    TagGUID = '{720392A2-3256-4F51-B810-3EC5DC06A82D}'
-    PLCBlock = Counters
-    Index = 6
-    left = 168
-    top = 232
-  end
-  object C7: TPLCBlockElement
-    TagGUID = '{D56E507F-1DA5-4685-AF22-9C09122BD790}'
-    PLCBlock = Counters
-    Index = 7
-    left = 168
-    top = 264
-  end
-  object C8: TPLCBlockElement
-    TagGUID = '{2EE10182-3ACC-40B5-8E03-C607794B9766}'
-    PLCBlock = Counters
-    Index = 8
-    left = 168
-    top = 296
-  end
-  object C9: TPLCBlockElement
-    TagGUID = '{86F8C967-D69D-42E6-A56F-D63680655D0C}'
-    PLCBlock = Counters
-    Index = 9
-    left = 168
-    top = 328
-  end
-  object Timer1: TTimer
-    Interval = 500
-    OnTimer = Timer1Timer
-    left = 8
-    top = 72
-  end
-end
+object DataModule1: TDataModule1
+  OldCreateOrder = False
+  Height = 459
+  HorizontalOffset = 739
+  VerticalOffset = 126
+  Width = 230
+  object TCP_UDPPort1: TTCP_UDPPort
+    Active = True
+    LogIOActions = True
+    LogFile = 'isotcp.log'
+    Host = '192.168.2.185'
+    Timeout = 50
+    ExclusiveDevice = True
+    OnCommPortOpenError = TCP_UDPPort1CommPortOpenError
+    left = 8
+    top = 8
+  end
+  object ISOTCPDriver1: TISOTCPDriver
+    CommunicationPort = TCP_UDPPort1
+    ConnectionWay = ISOTCP
+    left = 8
+    top = 40
+  end
+  object DB1: TPLCBlock
+    TagGUID = '{B0747848-93A1-11DF-AA46-001BFC644612}'
+    AutoRead = False
+    AutoWrite = False
+    PLCRack = 0
+    PLCSlot = 0
+    PLCStation = 2
+    MemFile_DB = 1
+    MemAddress = 0
+    MemSubElement = 0
+    MemReadFunction = 4
+    MemWriteFunction = 0
+    ProtocolDriver = ISOTCPDriver1
+    UpdateTime = 500
+    Size = 40
+    TagType = pttDWord
+    SwapBytes = True
+    SwapWords = True
+    left = 40
+    top = 8
+  end
+  object MD0_MD40: TPLCBlock
+    TagGUID = '{2358DCFB-93A2-11DF-AA46-001BFC644612}'
+    PLCRack = 0
+    PLCSlot = 0
+    PLCStation = 2
+    MemFile_DB = 0
+    MemAddress = 0
+    MemSubElement = 0
+    MemReadFunction = 3
+    MemWriteFunction = 0
+    ProtocolDriver = ISOTCPDriver1
+    UpdateTime = 12
+    Size = 11
+    TagType = pttDWord
+    SwapBytes = True
+    SwapWords = True
+    left = 72
+    top = 8
+  end
+  object DB1_DBD00: TPLCBlockElement
+    TagGUID = '{090B09C0-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 0
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 40
+  end
+  object DB1_DBD04: TPLCBlockElement
+    TagGUID = '{3F377D89-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 1
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 72
+  end
+  object DB1_DBD08: TPLCBlockElement
+    TagGUID = '{C79046CB-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 2
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 104
+  end
+  object DB1_DBD12: TPLCBlockElement
+    TagGUID = '{CF12E2C9-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 3
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 136
+  end
+  object DB1_DBD16: TPLCBlockElement
+    TagGUID = '{D4AAC635-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 4
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 168
+  end
+  object DB1_DBD20: TPLCBlockElement
+    TagGUID = '{D6C01DD6-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 5
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 200
+  end
+  object DB1_DBD24: TPLCBlockElement
+    TagGUID = '{DA2F20C5-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 6
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 232
+  end
+  object DB1_DBD28: TPLCBlockElement
+    TagGUID = '{DC2268E1-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 7
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 264
+  end
+  object DB1_DBD32: TPLCBlockElement
+    TagGUID = '{DDE364DE-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 8
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 296
+  end
+  object DB1_DBD36: TPLCBlockElement
+    TagGUID = '{DFA13295-93A2-11DF-AA46-001BFC644612}'
+    PLCBlock = DB1
+    Index = 9
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 40
+    top = 328
+  end
+  object MD00: TPLCBlockElement
+    TagGUID = '{29D96AAE-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 0
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 40
+  end
+  object MD04: TPLCBlockElement
+    TagGUID = '{29DA4BDA-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 1
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 72
+  end
+  object MD08: TPLCBlockElement
+    TagGUID = '{29DB2E57-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 2
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 104
+  end
+  object MD12: TPLCBlockElement
+    TagGUID = '{29DC2BA7-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 3
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 136
+  end
+  object MD16: TPLCBlockElement
+    TagGUID = '{29DD124B-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 4
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 168
+  end
+  object MD20: TPLCBlockElement
+    TagGUID = '{29DE01ED-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 5
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 200
+  end
+  object MD24: TPLCBlockElement
+    TagGUID = '{29DF0D21-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 6
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 232
+  end
+  object MD28: TPLCBlockElement
+    TagGUID = '{29E00568-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 7
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 264
+  end
+  object MD32: TPLCBlockElement
+    TagGUID = '{29E0FD75-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 8
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 296
+  end
+  object MD36: TPLCBlockElement
+    TagGUID = '{29E21914-93A3-11DF-AA46-001BFC644612}'
+    PLCBlock = MD0_MD40
+    Index = 9
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 72
+    top = 328
+  end
+  object InputsBYTE_01: TPLCTagNumber
+    TagGUID = '{A5A6E944-93A8-11DF-AA46-001BFC644612}'
+    PLCRack = 0
+    PLCSlot = 0
+    PLCStation = 2
+    MemFile_DB = 0
+    MemAddress = 1
+    MemSubElement = 0
+    MemReadFunction = 1
+    MemWriteFunction = 0
+    ProtocolDriver = ISOTCPDriver1
+    UpdateTime = 12
+    TagType = pttByte
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 8
+  end
+  object I0_0: TTagBit
+    TagGUID = '{FBF4B42B-93A8-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 0
+    EndBit = 0
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 40
+  end
+  object I0_1: TTagBit
+    TagGUID = '{EA286CED-7B0F-4D86-988C-DEE992FBBCB2}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 1
+    EndBit = 1
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 72
+  end
+  object I0_2: TTagBit
+    TagGUID = '{1A49923F-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 2
+    EndBit = 2
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 104
+  end
+  object I0_3: TTagBit
+    TagGUID = '{1BA09E17-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 3
+    EndBit = 3
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 136
+  end
+  object I0_4: TTagBit
+    TagGUID = '{1D9ED8BA-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 4
+    EndBit = 4
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 168
+  end
+  object I0_5: TTagBit
+    TagGUID = '{1EE73D23-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 5
+    EndBit = 5
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 200
+  end
+  object I0_6: TTagBit
+    TagGUID = '{20F2E595-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 6
+    EndBit = 6
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 232
+  end
+  object I0_7: TTagBit
+    TagGUID = '{22D0366D-93A9-11DF-AA46-001BFC644612}'
+    PLCTag = InputsBYTE_01
+    UseRawValue = False
+    StartBit = 7
+    EndBit = 7
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 104
+    top = 264
+  end
+  object OutputsBYTE_01: TPLCTagNumber
+    TagGUID = '{477E97A0-2322-4E1F-B909-96D70F2950F5}'
+    PLCRack = 0
+    PLCSlot = 0
+    PLCStation = 2
+    MemFile_DB = 0
+    MemAddress = 2
+    MemSubElement = 0
+    MemReadFunction = 2
+    MemWriteFunction = 0
+    ProtocolDriver = ISOTCPDriver1
+    UpdateTime = 12
+    TagType = pttByte
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 8
+  end
+  object Q0_0: TTagBit
+    TagGUID = '{6A0638CB-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 0
+    EndBit = 0
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 40
+  end
+  object Q0_1: TTagBit
+    TagGUID = '{6A07739D-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 1
+    EndBit = 1
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 72
+  end
+  object Q0_2: TTagBit
+    TagGUID = '{6A08AE9F-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 2
+    EndBit = 2
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 104
+  end
+  object Q0_3: TTagBit
+    TagGUID = '{6A0A19E2-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 3
+    EndBit = 3
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 136
+  end
+  object Q0_4: TTagBit
+    TagGUID = '{6A0B9F42-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 4
+    EndBit = 4
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 168
+  end
+  object Q0_5: TTagBit
+    TagGUID = '{6A0D006F-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 5
+    EndBit = 5
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 200
+  end
+  object Q0_6: TTagBit
+    TagGUID = '{6A0E70F4-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 6
+    EndBit = 6
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 232
+  end
+  object Q0_7: TTagBit
+    TagGUID = '{6A0FC4E7-93AA-11DF-AA46-001BFC644612}'
+    PLCTag = OutputsBYTE_01
+    UseRawValue = False
+    StartBit = 7
+    EndBit = 7
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 136
+    top = 264
+  end
+  object Counters: TPLCBlock
+    TagGUID = '{72AFD62A-73A8-41C5-BE62-23F8617ED7E0}'
+    PLCRack = 0
+    PLCSlot = 0
+    PLCStation = 2
+    MemFile_DB = 0
+    MemAddress = 0
+    MemSubElement = 0
+    MemReadFunction = 5
+    MemWriteFunction = 0
+    ProtocolDriver = ISOTCPDriver1
+    UpdateTime = 12
+    Size = 10
+    OnValueChangeLast = CountersValueChange
+    TagType = pttWord
+    SwapBytes = True
+    left = 168
+    top = 8
+  end
+  object C0: TPLCBlockElement
+    TagGUID = '{3E3A7078-DEA6-4E0F-A828-8CE7D1EE5C1D}'
+    PLCBlock = Counters
+    Index = 0
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 40
+  end
+  object C1: TPLCBlockElement
+    TagGUID = '{8A89DCF5-2915-406A-93E7-9FBCB13B73F1}'
+    PLCBlock = Counters
+    Index = 1
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 72
+  end
+  object C2: TPLCBlockElement
+    TagGUID = '{AB16A901-DBDB-466A-9C32-BEBB7838F5B3}'
+    PLCBlock = Counters
+    Index = 2
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 104
+  end
+  object C3: TPLCBlockElement
+    TagGUID = '{1A8DC46B-99C9-4761-AC48-E4FB99044627}'
+    PLCBlock = Counters
+    Index = 3
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 136
+  end
+  object C4: TPLCBlockElement
+    TagGUID = '{19A280ED-CDE1-49B9-91F2-379D4E414920}'
+    PLCBlock = Counters
+    Index = 4
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 168
+  end
+  object C5: TPLCBlockElement
+    TagGUID = '{4121C494-628D-4555-A2E6-C916E06D0865}'
+    PLCBlock = Counters
+    Index = 5
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 200
+  end
+  object C6: TPLCBlockElement
+    TagGUID = '{720392A2-3256-4F51-B810-3EC5DC06A82D}'
+    PLCBlock = Counters
+    Index = 6
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 232
+  end
+  object C7: TPLCBlockElement
+    TagGUID = '{D56E507F-1DA5-4685-AF22-9C09122BD790}'
+    PLCBlock = Counters
+    Index = 7
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 264
+  end
+  object C8: TPLCBlockElement
+    TagGUID = '{2EE10182-3ACC-40B5-8E03-C607794B9766}'
+    PLCBlock = Counters
+    Index = 8
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 296
+  end
+  object C9: TPLCBlockElement
+    TagGUID = '{86F8C967-D69D-42E6-A56F-D63680655D0C}'
+    PLCBlock = Counters
+    Index = 9
+    EnableMaxValue = False
+    EnableMinValue = False
+    MaxValue = 0
+    MinValue = 0
+    left = 168
+    top = 328
+  end
+  object Timer1: TTimer
+    Interval = 500
+    OnTimer = Timer1Timer
+    left = 8
+    top = 72
+  end
+end
Index: examples/laz_isotcp_demonstration/isotcp_example.lpi
===================================================================
--- examples/laz_isotcp_demonstration/isotcp_example.lpi	(revision 928)
+++ examples/laz_isotcp_demonstration/isotcp_example.lpi	(working copy)
@@ -1,4 +1,4 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <CONFIG>
   <ProjectOptions>
     <Version Value="9"/>
@@ -6,7 +6,6 @@
       <MainUnit Value="0"/>
       <UseXPManifest Value="True"/>
       <Icon Value="0"/>
-      <ActiveWindowIndexAtStart Value="0"/>
     </General>
     <VersionInfo>
       <Language Value=""/>
@@ -42,14 +41,11 @@
         <PackageName Value="LCL"/>
       </Item3>
     </RequiredPackages>
-    <Units Count="58">
+    <Units Count="63">
       <Unit0>
         <Filename Value="isotcp_example.lpr"/>
         <IsPartOfProject Value="True"/>
-        <UnitName Value="isotcp_example"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="15"/>
+        <CursorPos Y="15"/>
         <UsageCount Value="200"/>
       </Unit0>
       <Unit1>
@@ -56,24 +52,24 @@
         <Filename Value="unit1.pas"/>
         <IsPartOfProject Value="True"/>
         <ComponentName Value="Form1"/>
+        <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
         <UnitName Value="Unit1"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="133"/>
+        <EditorIndex Value="1"/>
+        <TopLine Value="81"/>
         <CursorPos X="140" Y="148"/>
         <UsageCount Value="200"/>
+        <Loaded Value="True"/>
+        <LoadedDesigner Value="True"/>
       </Unit1>
       <Unit2>
         <Filename Value="dm.pas"/>
         <IsPartOfProject Value="True"/>
         <ComponentName Value="DataModule1"/>
+        <HasResources Value="True"/>
         <ResourceBaseClass Value="DataModule"/>
-        <UnitName Value="dm"/>
         <IsVisibleTab Value="True"/>
-        <EditorIndex Value="5"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="35"/>
-        <CursorPos X="31" Y="43"/>
+        <TopLine Value="30"/>
         <UsageCount Value="200"/>
         <Loaded Value="True"/>
         <LoadedDesigner Value="True"/>
@@ -81,29 +77,23 @@
       <Unit3>
         <Filename Value="../../isotcpdriver.pas"/>
         <UnitName Value="ISOTCPDriver"/>
-        <EditorIndex Value="3"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="274"/>
         <CursorPos X="42" Y="260"/>
         <UsageCount Value="40"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit3>
       <Unit4>
         <Filename Value="../../s7family.pas"/>
-        <UnitName Value="s7family"/>
-        <EditorIndex Value="9"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="201"/>
         <CursorPos X="22" Y="262"/>
         <UsageCount Value="51"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit4>
       <Unit5>
         <Filename Value="../../protocoltypes.pas"/>
         <UnitName Value="ProtocolTypes"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="73"/>
         <CursorPos X="58" Y="85"/>
         <UsageCount Value="20"/>
@@ -112,8 +102,6 @@
       <Unit6>
         <Filename Value="../../s7types.pas"/>
         <UnitName Value="S7Types"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
         <CursorPos X="11" Y="14"/>
         <UsageCount Value="34"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
@@ -121,18 +109,14 @@
       <Unit7>
         <Filename Value="../../commport.pas"/>
         <UnitName Value="CommPort"/>
-        <EditorIndex Value="4"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="1198"/>
         <CursorPos X="17" Y="1197"/>
         <UsageCount Value="18"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit7>
       <Unit8>
         <Filename Value="../../tcp_udpport.pas"/>
-        <UnitName Value="tcp_udpport"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="311"/>
         <CursorPos X="22" Y="330"/>
         <UsageCount Value="16"/>
@@ -141,29 +125,24 @@
       <Unit9>
         <Filename Value="../../plcmemorymanager.pas"/>
         <UnitName Value="PLCMemoryManager"/>
-        <EditorIndex Value="10"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="421"/>
-        <CursorPos X="1" Y="421"/>
+        <CursorPos Y="421"/>
         <UsageCount Value="17"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit9>
       <Unit10>
         <Filename Value="../../protocoldriver.pas"/>
         <UnitName Value="ProtocolDriver"/>
-        <EditorIndex Value="7"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="730"/>
         <CursorPos X="3" Y="732"/>
         <UsageCount Value="44"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit10>
       <Unit11>
         <Filename Value="../../hmicontroldislocatoranimation.pas"/>
         <UnitName Value="HMIControlDislocatorAnimation"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="78"/>
         <CursorPos X="43" Y="103"/>
         <UsageCount Value="16"/>
@@ -172,15 +151,11 @@
       <Unit12>
         <Filename Value="../../hmiradiogroup.pas"/>
         <UnitName Value="HMIRadioGroup"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="1"/>
         <UsageCount Value="7"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit12>
       <Unit13>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/rtl/objpas/classes/classesh.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="1590"/>
         <CursorPos X="15" Y="1603"/>
         <UsageCount Value="15"/>
@@ -188,7 +163,6 @@
       <Unit14>
         <Filename Value="../../../../lazarus/lcl/controls.pp"/>
         <UnitName Value="Controls"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="37"/>
         <CursorPos X="3" Y="50"/>
         <UsageCount Value="10"/>
@@ -196,7 +170,6 @@
       <Unit15>
         <Filename Value="../../linearscaleprocessor.pas"/>
         <UnitName Value="LinearScaleProcessor"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="98"/>
         <CursorPos X="10" Y="116"/>
         <UsageCount Value="7"/>
@@ -205,7 +178,6 @@
       <Unit16>
         <Filename Value="../../hmiedit.pas"/>
         <UnitName Value="HMIEdit"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="219"/>
         <CursorPos X="3" Y="221"/>
         <UsageCount Value="5"/>
@@ -214,7 +186,6 @@
       <Unit17>
         <Filename Value="../../tag.pas"/>
         <UnitName Value="Tag"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="120"/>
         <CursorPos X="14" Y="133"/>
         <UsageCount Value="28"/>
@@ -223,7 +194,6 @@
       <Unit18>
         <Filename Value="../../hmitypes.pas"/>
         <UnitName Value="HMITypes"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="36"/>
         <CursorPos X="3" Y="36"/>
         <UsageCount Value="13"/>
@@ -232,16 +202,13 @@
       <Unit19>
         <Filename Value="../../hmitrackbar.pas"/>
         <UnitName Value="HMITrackBar"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="98"/>
-        <CursorPos X="1" Y="100"/>
+        <CursorPos Y="100"/>
         <UsageCount Value="5"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit19>
       <Unit20>
         <Filename Value="../../scadareg.pas"/>
-        <UnitName Value="scadareg"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="58"/>
         <CursorPos X="78" Y="78"/>
         <UsageCount Value="15"/>
@@ -249,8 +216,6 @@
       </Unit20>
       <Unit21>
         <Filename Value="../../hsstrings.pas"/>
-        <UnitName Value="hsstrings"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="57"/>
         <CursorPos X="19" Y="78"/>
         <UsageCount Value="6"/>
@@ -258,8 +223,6 @@
       </Unit21>
       <Unit22>
         <Filename Value="../../hmipropeditor.pas"/>
-        <UnitName Value="hmipropeditor"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="69"/>
         <CursorPos X="37" Y="85"/>
         <UsageCount Value="10"/>
@@ -268,15 +231,12 @@
       <Unit23>
         <Filename Value="../../../../lazarus/ideintf/propedits.pp"/>
         <UnitName Value="PropEdits"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="2606"/>
-        <CursorPos X="1" Y="2620"/>
+        <CursorPos Y="2620"/>
         <UsageCount Value="12"/>
       </Unit23>
       <Unit24>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/rtl/objpas/typinfo.pp"/>
-        <UnitName Value="typinfo"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="206"/>
         <CursorPos X="7" Y="210"/>
         <UsageCount Value="6"/>
@@ -283,8 +243,6 @@
       </Unit24>
       <Unit25>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/packages/sdl/src/sdl.pas"/>
-        <UnitName Value="sdl"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="381"/>
         <CursorPos X="3" Y="390"/>
         <UsageCount Value="6"/>
@@ -292,7 +250,6 @@
       <Unit26>
         <Filename Value="../../tagblock.pas"/>
         <UnitName Value="TagBlock"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="92"/>
         <CursorPos X="11" Y="100"/>
         <UsageCount Value="15"/>
@@ -301,43 +258,36 @@
       <Unit27>
         <Filename Value="../../plcblock.pas"/>
         <UnitName Value="PLCBlock"/>
-        <EditorIndex Value="0"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="88"/>
-        <CursorPos X="1" Y="101"/>
+        <CursorPos Y="101"/>
         <UsageCount Value="25"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit27>
       <Unit28>
         <Filename Value="../../plctag.pas"/>
         <UnitName Value="PLCTag"/>
-        <EditorIndex Value="1"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="678"/>
-        <CursorPos X="1" Y="691"/>
+        <CursorPos Y="691"/>
         <UsageCount Value="31"/>
         <Bookmarks Count="1">
-          <Item0 X="15" Y="75" ID="0"/>
+          <Item0 X="15" Y="75"/>
         </Bookmarks>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit28>
       <Unit29>
         <Filename Value="../../plctagnumber.pas"/>
         <UnitName Value="PLCTagNumber"/>
-        <EditorIndex Value="6"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="8"/>
         <CursorPos X="3" Y="21"/>
         <UsageCount Value="28"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit29>
       <Unit30>
         <Filename Value="../../plcstring.pas"/>
         <UnitName Value="PLCString"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="414"/>
         <CursorPos X="37" Y="416"/>
         <UsageCount Value="14"/>
@@ -346,7 +296,6 @@
       <Unit31>
         <Filename Value="../../plcstruct.pas"/>
         <UnitName Value="PLCStruct"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="32"/>
         <CursorPos X="27" Y="41"/>
         <UsageCount Value="13"/>
@@ -354,7 +303,6 @@
       </Unit31>
       <Unit32>
         <Filename Value="../../../../lazarus/lcl/interfaces/gtk2/gtk2widgetset.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="1841"/>
         <CursorPos X="15" Y="1857"/>
         <UsageCount Value="8"/>
@@ -362,7 +310,6 @@
       <Unit33>
         <Filename Value="../../../../lazarus/components/rtticontrols/rttigrids.pas"/>
         <UnitName Value="RTTIGrids"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="36"/>
         <CursorPos X="49" Y="40"/>
         <UsageCount Value="8"/>
@@ -373,7 +320,6 @@
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
         <UnitName Value="ObjectInspector"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="5237"/>
         <CursorPos X="3" Y="5241"/>
         <UsageCount Value="8"/>
@@ -381,7 +327,6 @@
       <Unit35>
         <Filename Value="../../plcnumber.pas"/>
         <UnitName Value="PLCNumber"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="26"/>
         <CursorPos X="25" Y="21"/>
         <UsageCount Value="22"/>
@@ -390,7 +335,6 @@
       <Unit36>
         <Filename Value="../../tagbit.pas"/>
         <UnitName Value="TagBit"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="93"/>
         <CursorPos X="28" Y="97"/>
         <UsageCount Value="11"/>
@@ -398,9 +342,6 @@
       </Unit36>
       <Unit37>
         <Filename Value="../../ubitmapper.lfm"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="1"/>
         <UsageCount Value="8"/>
         <DefaultSyntaxHighlighter Value="LFM"/>
       </Unit37>
@@ -410,7 +351,6 @@
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
         <UnitName Value="uModbusTagBuilder"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="299"/>
         <CursorPos X="3" Y="302"/>
         <UsageCount Value="8"/>
@@ -421,10 +361,8 @@
         <ComponentName Value="frmBitMapper"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="ubitmapper"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="57"/>
-        <CursorPos X="1" Y="77"/>
+        <CursorPos Y="77"/>
         <UsageCount Value="9"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit39>
@@ -431,7 +369,6 @@
       <Unit40>
         <Filename Value="../../modbusdriver.pas"/>
         <UnitName Value="ModBusDriver"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="849"/>
         <CursorPos X="3" Y="860"/>
         <UsageCount Value="10"/>
@@ -440,7 +377,6 @@
       <Unit41>
         <Filename Value="../../llaccess.pas"/>
         <UnitName Value="LLAccess"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="72"/>
         <CursorPos X="26" Y="85"/>
         <UsageCount Value="15"/>
@@ -449,7 +385,6 @@
       <Unit42>
         <Filename Value="../../hmianimation.pas"/>
         <UnitName Value="HMIAnimation"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="179"/>
         <CursorPos X="21" Y="192"/>
         <UsageCount Value="15"/>
@@ -458,7 +393,6 @@
       <Unit43>
         <Filename Value="../../hmilabel.pas"/>
         <UnitName Value="HMILabel"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="93"/>
         <CursorPos X="22" Y="106"/>
         <UsageCount Value="15"/>
@@ -467,7 +401,6 @@
       <Unit44>
         <Filename Value="../../westasciidriver.pas"/>
         <UnitName Value="WestASCIIDriver"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="1054"/>
         <CursorPos X="23" Y="1068"/>
         <UsageCount Value="15"/>
@@ -478,8 +411,6 @@
         <ComponentName Value="frmMapElements"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="uelementmapper"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="54"/>
         <CursorPos X="17" Y="63"/>
         <UsageCount Value="13"/>
@@ -487,7 +418,6 @@
       </Unit45>
       <Unit46>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/rtl/objpas/sysutils/sysstrh.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="211"/>
         <CursorPos X="10" Y="224"/>
         <UsageCount Value="10"/>
@@ -495,7 +425,6 @@
       <Unit47>
         <Filename Value="../../plcblockelement.pas"/>
         <UnitName Value="PLCBlockElement"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="13"/>
         <CursorPos X="33" Y="26"/>
         <UsageCount Value="12"/>
@@ -504,17 +433,15 @@
       <Unit48>
         <Filename Value="../../../../lazarus/lcl/lresources.pp"/>
         <UnitName Value="LResources"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="3033"/>
-        <CursorPos X="1" Y="3047"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="3121"/>
+        <CursorPos Y="3135"/>
         <UsageCount Value="10"/>
       </Unit48>
       <Unit49>
         <Filename Value="../../protscan.pas"/>
-        <UnitName Value="protscan"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="115"/>
-        <CursorPos X="1" Y="130"/>
+        <CursorPos Y="130"/>
         <UsageCount Value="11"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit49>
@@ -521,18 +448,15 @@
       <Unit50>
         <Filename Value="../../crossevent.pas"/>
         <UnitName Value="CrossEvent"/>
-        <EditorIndex Value="8"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="176"/>
-        <CursorPos X="1" Y="196"/>
+        <CursorPos Y="196"/>
         <UsageCount Value="14"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit50>
       <Unit51>
         <Filename Value="../../modbusserial.pas"/>
         <UnitName Value="ModBusSerial"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="257"/>
         <CursorPos X="59" Y="265"/>
         <UsageCount Value="10"/>
@@ -541,16 +465,11 @@
       <Unit52>
         <Filename Value="../../plcstructelement.pas"/>
         <UnitName Value="PLCStructElement"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="1"/>
         <UsageCount Value="10"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit52>
       <Unit53>
         <Filename Value="../../protscanupdate.pas"/>
-        <UnitName Value="protscanupdate"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="229"/>
         <CursorPos X="3" Y="243"/>
         <UsageCount Value="10"/>
@@ -559,7 +478,6 @@
       <Unit54>
         <Filename Value="../../../../lazarus/lcl/interfaces/gtk2/gtk2int.pas"/>
         <UnitName Value="Gtk2Int"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="640"/>
         <CursorPos X="43" Y="654"/>
         <UsageCount Value="13"/>
@@ -566,7 +484,6 @@
       </Unit54>
       <Unit55>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/rtl/objpas/sysutils/systhrdh.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="23"/>
         <CursorPos X="16" Y="46"/>
         <UsageCount Value="11"/>
@@ -573,7 +490,6 @@
       </Unit55>
       <Unit56>
         <Filename Value="../../../fpcbuild251/fpcbuild/fpcsrc/rtl/objpas/sysutils/sysuthrd.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="70"/>
         <CursorPos X="3" Y="73"/>
         <UsageCount Value="11"/>
@@ -580,129 +496,72 @@
       </Unit56>
       <Unit57>
         <Filename Value="../../crc16utils.pas"/>
-        <UnitName Value="crc16utils"/>
-        <EditorIndex Value="2"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="72"/>
         <CursorPos X="38" Y="94"/>
         <UsageCount Value="13"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit57>
+      <Unit58>
+        <Filename Value="../../src/scada/plctag.pas"/>
+        <UnitName Value="PLCTag"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="502"/>
+        <CursorPos X="18" Y="517"/>
+        <UsageCount Value="10"/>
+        <DefaultSyntaxHighlighter Value="Delphi"/>
+      </Unit58>
+      <Unit59>
+        <Filename Value="../../src/scada/tag.pas"/>
+        <UnitName Value="Tag"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="787"/>
+        <CursorPos X="14" Y="799"/>
+        <UsageCount Value="10"/>
+        <DefaultSyntaxHighlighter Value="Delphi"/>
+      </Unit59>
+      <Unit60>
+        <Filename Value="../../src/scada/commport.pas"/>
+        <UnitName Value="CommPort"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="1833"/>
+        <CursorPos Y="1847"/>
+        <UsageCount Value="10"/>
+        <DefaultSyntaxHighlighter Value="Delphi"/>
+      </Unit60>
+      <Unit61>
+        <Filename Value="../../tools/LazResGUI/umain.pas"/>
+        <UnitName Value="uMain"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="495"/>
+        <CursorPos X="28" Y="509"/>
+        <UsageCount Value="10"/>
+      </Unit61>
+      <Unit62>
+        <Filename Value="dm.lfm"/>
+        <EditorIndex Value="-1"/>
+        <CursorPos X="16" Y="10"/>
+        <UsageCount Value="10"/>
+        <DefaultSyntaxHighlighter Value="LFM"/>
+      </Unit62>
     </Units>
-    <JumpHistory Count="27" HistoryIndex="26">
+    <JumpHistory Count="3" HistoryIndex="2">
       <Position1>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="709" Column="1" TopLine="696"/>
+        <Filename Value="dm.pas"/>
+        <Caret Line="43" Column="31" TopLine="35"/>
       </Position1>
       <Position2>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="710" Column="1" TopLine="696"/>
+        <Filename Value="dm.pas"/>
+        <Caret TopLine="79"/>
       </Position2>
       <Position3>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="722" Column="1" TopLine="700"/>
+        <Filename Value="unit1.pas"/>
+        <Caret Line="148" Column="140" TopLine="81"/>
       </Position3>
-      <Position4>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="727" Column="1" TopLine="714"/>
-      </Position4>
-      <Position5>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="728" Column="1" TopLine="714"/>
-      </Position5>
-      <Position6>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="733" Column="1" TopLine="714"/>
-      </Position6>
-      <Position7>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="734" Column="1" TopLine="714"/>
-      </Position7>
-      <Position8>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="711" Column="13" TopLine="689"/>
-      </Position8>
-      <Position9>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="691" Column="124" TopLine="678"/>
-      </Position9>
-      <Position10>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="839" Column="1" TopLine="831"/>
-      </Position10>
-      <Position11>
-        <Filename Value="../../plcmemorymanager.pas"/>
-        <Caret Line="597" Column="1" TopLine="590"/>
-      </Position11>
-      <Position12>
-        <Filename Value="../../plcmemorymanager.pas"/>
-        <Caret Line="421" Column="1" TopLine="408"/>
-      </Position12>
-      <Position13>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="691" Column="121" TopLine="678"/>
-      </Position13>
-      <Position14>
-        <Filename Value="../../plcmemorymanager.pas"/>
-        <Caret Line="421" Column="1" TopLine="421"/>
-      </Position14>
-      <Position15>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="130" Column="33" TopLine="112"/>
-      </Position15>
-      <Position16>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="79" Column="47" TopLine="71"/>
-      </Position16>
-      <Position17>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="41" Column="40" TopLine="28"/>
-      </Position17>
-      <Position18>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="79" Column="15" TopLine="66"/>
-      </Position18>
-      <Position19>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="984" Column="42" TopLine="962"/>
-      </Position19>
-      <Position20>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="1315" Column="36" TopLine="1293"/>
-      </Position20>
-      <Position21>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="1471" Column="36" TopLine="1458"/>
-      </Position21>
-      <Position22>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="104" Column="73" TopLine="81"/>
-      </Position22>
-      <Position23>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="147" Column="31" TopLine="133"/>
-      </Position23>
-      <Position24>
-        <Filename Value="../../s7family.pas"/>
-        <Caret Line="93" Column="46" TopLine="80"/>
-      </Position24>
-      <Position25>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="41" Column="15" TopLine="28"/>
-      </Position25>
-      <Position26>
-        <Filename Value="../../isotcpdriver.pas"/>
-        <Caret Line="115" Column="34" TopLine="98"/>
-      </Position26>
-      <Position27>
-        <Filename Value="../../plctag.pas"/>
-        <Caret Line="691" Column="1" TopLine="678"/>
-      </Position27>
     </JumpHistory>
   </ProjectOptions>
   <CompilerOptions>
-    <Version Value="9"/>
+    <Version Value="11"/>
     <Target>
       <Filename Value="project1"/>
     </Target>
@@ -722,13 +581,13 @@
         </Win32>
       </Options>
     </Linking>
-    <Other>
-      <CompilerPath Value="$(CompPath)"/>
-    </Other>
   </CompilerOptions>
   <Debugging>
     <BreakPoints Count="1">
       <Item1>
+        <Kind Value="bpkSource"/>
+        <WatchScope Value="wpsGlobal"/>
+        <WatchKind Value="wpkWrite"/>
         <Source Value="../../protscanupdate.pas"/>
         <Line Value="249"/>
       </Item1>
Index: examples/laz_isotcp_demonstration/unit1.lfm
===================================================================
--- examples/laz_isotcp_demonstration/unit1.lfm	(revision 928)
+++ examples/laz_isotcp_demonstration/unit1.lfm	(working copy)
@@ -1,7 +1,7 @@
 object Form1: TForm1
-  Left = 238
+  Left = 442
   Height = 427
-  Top = 119
+  Top = 126
   Width = 884
   ActiveControl = HMIEdit1
   Caption = 'IsoTCP Test'
@@ -8,12 +8,12 @@
   ClientHeight = 427
   ClientWidth = 884
   OnCreate = FormCreate
-  LCLVersion = '0.9.31'
+  LCLVersion = '1.5'
   object Label1: TLabel
     Left = 8
-    Height = 16
+    Height = 15
     Top = 8
-    Width = 513
+    Width = 429
     Caption = 'Crie no seu PLC o DB1 com 40 bytes de tamanho (10 DWORDs ou  10 Floats)'
     Font.Height = -12
     Font.Name = 'Sans'
@@ -23,9 +23,9 @@
   end
   object Label2: TLabel
     Left = 8
-    Height = 16
+    Height = 15
     Top = 24
-    Width = 497
+    Width = 412
     Caption = 'Create the DB1 in your PLC with 40 bytes sized (10 DWORDs or 10 Floats)'
     Font.Height = -12
     Font.Name = 'Sans'
@@ -35,10 +35,11 @@
   end
   object HMIEdit1: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 88
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 0
@@ -45,6 +46,10 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD00
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object Label3: TLabel
     Left = 80
@@ -60,10 +65,11 @@
   end
   object HMIEdit2: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 112
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 1
@@ -70,13 +76,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD04
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit3: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 136
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 2
@@ -83,13 +94,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD08
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit4: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 160
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 3
@@ -96,13 +112,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD12
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit5: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 184
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 4
@@ -109,13 +130,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD16
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit6: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 208
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 5
@@ -122,13 +148,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD20
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit7: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 232
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 6
@@ -135,13 +166,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD24
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit8: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 256
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 7
@@ -148,13 +184,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD28
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit9: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 280
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 8
@@ -161,13 +202,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD32
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit10: THMIEdit
     Left = 80
-    Height = 19
+    Height = 23
     Top = 304
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 9
@@ -174,6 +220,10 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.DB1_DBD36
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object Label4: TLabel
     Left = 0
@@ -307,10 +357,11 @@
   end
   object HMIEdit11: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 88
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 10
@@ -317,6 +368,10 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD00
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object Label24: TLabel
     Left = 280
@@ -332,10 +387,11 @@
   end
   object HMIEdit12: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 112
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 11
@@ -342,13 +398,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD04
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit13: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 136
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 12
@@ -355,13 +416,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD08
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit14: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 160
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 13
@@ -368,13 +434,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD12
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit15: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 184
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 14
@@ -381,13 +452,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD16
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit16: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 208
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 15
@@ -394,13 +470,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD20
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit17: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 232
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 16
@@ -407,13 +488,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD24
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit18: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 256
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 17
@@ -420,13 +506,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD28
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit19: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 280
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 18
@@ -433,13 +524,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD32
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit20: THMIEdit
     Left = 280
-    Height = 19
+    Height = 23
     Top = 304
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 19
@@ -446,12 +542,16 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.MD36
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object Label25: TLabel
     Left = 8
-    Height = 14
+    Height = 15
     Top = 45
-    Width = 179
+    Width = 183
     Caption = 'TCP_UDP Port Commands/second'
     ParentColor = False
   end
@@ -469,7 +569,7 @@
   end
   object Label27: TLabel
     Left = 273
-    Height = 14
+    Height = 15
     Top = 45
     Width = 34
     Caption = 'cmd/s'
@@ -481,6 +581,7 @@
     Top = 0
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -491,10 +592,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -503,10 +604,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -517,6 +618,7 @@
     Top = 24
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -527,10 +629,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -539,10 +641,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -553,6 +655,7 @@
     Top = 48
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -563,10 +666,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -575,10 +678,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -589,6 +692,7 @@
     Top = 72
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -599,10 +703,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -611,10 +715,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -625,6 +729,7 @@
     Top = 94
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -635,10 +740,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -647,10 +752,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -661,6 +766,7 @@
     Top = 118
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -671,10 +777,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -683,10 +789,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -697,6 +803,7 @@
     Top = 144
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -707,10 +814,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -719,10 +826,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -733,6 +840,7 @@
     Top = 168
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -743,10 +851,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -755,10 +863,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -849,6 +957,7 @@
     Top = 192
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -859,10 +968,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -871,10 +980,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -885,6 +994,7 @@
     Top = 216
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -895,10 +1005,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -907,10 +1017,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -921,6 +1031,7 @@
     Top = 242
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -931,10 +1042,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -943,10 +1054,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -957,6 +1068,7 @@
     Top = 266
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -967,10 +1079,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -979,10 +1091,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -993,6 +1105,7 @@
     Top = 288
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -1003,10 +1116,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -1015,10 +1128,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -1029,6 +1142,7 @@
     Top = 312
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -1039,10 +1153,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -1051,10 +1165,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -1065,6 +1179,7 @@
     Top = 338
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -1075,10 +1190,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -1087,10 +1202,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -1101,6 +1216,7 @@
     Top = 362
     Width = 17
     Color = clSilver
+    Enabled = True
     ParentColor = False
     Transparent = False
     NumberFormat = '#0.0'
@@ -1111,10 +1227,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clSilver
         Transparent = False
       end    
@@ -1123,10 +1239,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clLime
         Transparent = False
       end>
@@ -1351,10 +1467,11 @@
   end
   object HMIEdit21: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 88
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 21
@@ -1361,6 +1478,10 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C0
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object Label54: TLabel
     Left = 433
@@ -1376,10 +1497,11 @@
   end
   object HMIEdit22: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 112
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 22
@@ -1386,13 +1508,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C1
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit23: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 136
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 23
@@ -1399,13 +1526,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C2
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit24: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 160
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 24
@@ -1412,13 +1544,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C3
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit25: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 184
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 25
@@ -1425,13 +1562,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C4
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit26: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 208
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 26
@@ -1438,13 +1580,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C5
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit27: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 232
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 27
@@ -1451,13 +1598,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C6
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit28: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 256
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 28
@@ -1464,13 +1616,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C7
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit29: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 280
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 29
@@ -1477,13 +1634,18 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C8
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object HMIEdit30: THMIEdit
     Left = 433
-    Height = 19
+    Height = 23
     Top = 304
     Width = 112
     Color = clWindow
+    Enabled = True
     Font.Color = clWindowText
     ParentFont = False
     TabOrder = 30
@@ -1490,6 +1652,10 @@
     NumberFormat = '#0.0'
     PLCTag = DataModule1.C9
     FreezeValueOnFocus = False
+    EnableMinValue = False
+    EnableMaxValue = False
+    MinValue = 0
+    MaxValue = 0
   end
   object TIPropertyGrid1: TTIPropertyGrid
     Left = 608
@@ -1496,6 +1662,7 @@
     Height = 379
     Top = 0
     Width = 264
+    CheckboxForBoolean = False
     DefaultValueFont.Color = clWindowText
     Filter = [tkInteger, tkChar, tkEnumeration, tkFloat, tkSet, tkMethod, tkSString, tkLString, tkAString, tkWString, tkVariant, tkArray, tkRecord, tkInterface, tkClass, tkObject, tkWChar, tkBool, tkInt64, tkQWord, tkDynArray, tkInterfaceRaw, tkProcVar, tkUString, tkUChar]
     Indent = 12
@@ -1505,9 +1672,9 @@
   end
   object RadioButton1: TRadioButton
     Left = 601
-    Height = 20
+    Height = 19
     Top = 392
-    Width = 44
+    Width = 41
     Caption = 'DB1'
     Checked = True
     OnClick = RadioButton1Click
@@ -1517,9 +1684,9 @@
   object RadioButton2: TRadioButton
     Tag = 1
     Left = 657
-    Height = 20
+    Height = 19
     Top = 392
-    Width = 45
+    Width = 44
     Caption = 'MDs'
     OnClick = RadioButton1Click
     TabOrder = 33
@@ -1527,9 +1694,9 @@
   object RadioButton3: TRadioButton
     Tag = 2
     Left = 713
-    Height = 20
+    Height = 19
     Top = 392
-    Width = 71
+    Width = 68
     Caption = 'Counters'
     OnClick = RadioButton1Click
     TabOrder = 32
@@ -1537,9 +1704,9 @@
   object RadioButton4: TRadioButton
     Tag = 3
     Left = 793
-    Height = 20
+    Height = 19
     Top = 392
-    Width = 32
+    Width = 30
     Caption = 'IB'
     OnClick = RadioButton1Click
     TabOrder = 35
@@ -1547,9 +1714,9 @@
   object RadioButton5: TRadioButton
     Tag = 4
     Left = 841
-    Height = 20
+    Height = 19
     Top = 392
-    Width = 37
+    Width = 36
     Caption = 'QB'
     OnClick = RadioButton1Click
     TabOrder = 36
@@ -1686,8 +1853,8 @@
   end
   object Timer1: TTimer
     OnTimer = Timer1Timer
-    left = 520
-    top = 32
+    left = 472
+    top = 8
   end
   object HMIControlDislocatorAnimation1: THMIControlDislocatorAnimation
     P0_X = 48
Index: examples/laz_isotcp_hourmeter/horimetros.lpi
===================================================================
--- examples/laz_isotcp_hourmeter/horimetros.lpi	(revision 928)
+++ examples/laz_isotcp_hourmeter/horimetros.lpi	(working copy)
@@ -1,4 +1,4 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <CONFIG>
   <ProjectOptions>
     <Version Value="9"/>
@@ -8,7 +8,6 @@
       <ResourceType Value="res"/>
       <UseXPManifest Value="True"/>
       <Icon Value="0"/>
-      <ActiveWindowIndexAtStart Value="0"/>
     </General>
     <i18n>
       <EnableI18N LFM="False"/>
@@ -66,14 +65,11 @@
         <PackageName Value="LCL"/>
       </Item9>
     </RequiredPackages>
-    <Units Count="25">
+    <Units Count="26">
       <Unit0>
         <Filename Value="horimetros.lpr"/>
         <IsPartOfProject Value="True"/>
-        <UnitName Value="horimetros"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="15"/>
+        <CursorPos Y="15"/>
         <UsageCount Value="61"/>
       </Unit0>
       <Unit1>
@@ -82,11 +78,7 @@
         <ComponentName Value="frmMain"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="umain"/>
-        <EditorIndex Value="0"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="114"/>
-        <CursorPos X="60" Y="114"/>
+        <CursorPos X="47" Y="10"/>
         <UsageCount Value="61"/>
         <Loaded Value="True"/>
         <LoadedDesigner Value="True"/>
@@ -97,8 +89,6 @@
         <ComponentName Value="dmtags"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="DataModule"/>
-        <UnitName Value="udm"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="151"/>
         <CursorPos X="139" Y="168"/>
         <UsageCount Value="61"/>
@@ -109,15 +99,13 @@
         <ComponentName Value="dmdb"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="DataModule"/>
-        <UnitName Value="udmdb"/>
         <IsVisibleTab Value="True"/>
         <EditorIndex Value="2"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="86"/>
-        <CursorPos X="16" Y="92"/>
+        <TopLine Value="164"/>
+        <CursorPos X="9" Y="179"/>
         <UsageCount Value="61"/>
         <Bookmarks Count="1">
-          <Item0 X="3" Y="181" ID="0"/>
+          <Item0 X="3" Y="181"/>
         </Bookmarks>
         <Loaded Value="True"/>
         <LoadedDesigner Value="True"/>
@@ -125,7 +113,6 @@
       <Unit4>
         <Filename Value="../pascalscada/plcnumber.pas"/>
         <UnitName Value="PLCNumber"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="68"/>
         <CursorPos X="14" Y="87"/>
         <UsageCount Value="9"/>
@@ -132,8 +119,6 @@
       </Unit4>
       <Unit5>
         <Filename Value="../fpcbuild251/fpcbuild/fpcsrc/packages/fcl-db/src/base/db.pas"/>
-        <UnitName Value="db"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="30"/>
         <CursorPos X="41" Y="50"/>
         <UsageCount Value="11"/>
@@ -140,7 +125,6 @@
       </Unit5>
       <Unit6>
         <Filename Value="../fpcbuild251/fpcbuild/fpcsrc/packages/fcl-db/src/base/dataset.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="2061"/>
         <CursorPos X="3" Y="2064"/>
         <UsageCount Value="9"/>
@@ -151,9 +135,7 @@
         <ComponentName Value="frmPopup"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="upopuphorimetro"/>
         <EditorIndex Value="1"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="25"/>
         <CursorPos X="17" Y="37"/>
         <UsageCount Value="59"/>
@@ -161,8 +143,6 @@
       </Unit7>
       <Unit8>
         <Filename Value="../pascalscada/ucrosstimer.pas"/>
-        <UnitName Value="ucrosstimer"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="13"/>
         <CursorPos X="21" Y="25"/>
         <UsageCount Value="9"/>
@@ -170,7 +150,6 @@
       <Unit9>
         <Filename Value="../../lazarus/lcl/extctrls.pp"/>
         <UnitName Value="ExtCtrls"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="360"/>
         <CursorPos X="25" Y="372"/>
         <UsageCount Value="9"/>
@@ -178,7 +157,6 @@
       <Unit10>
         <Filename Value="../../lazarus/lcl/customtimer.pas"/>
         <UnitName Value="CustomTimer"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="31"/>
         <CursorPos X="15" Y="43"/>
         <UsageCount Value="9"/>
@@ -186,7 +164,6 @@
       <Unit11>
         <Filename Value="../../lazarus/lcl/dbgrids.pas"/>
         <UnitName Value="DBGrids"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="406"/>
         <CursorPos X="32" Y="256"/>
         <UsageCount Value="13"/>
@@ -194,7 +171,6 @@
       <Unit12>
         <Filename Value="../../lazarus/lcl/grids.pas"/>
         <UnitName Value="Grids"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="519"/>
         <CursorPos X="33" Y="543"/>
         <UsageCount Value="13"/>
@@ -201,7 +177,6 @@
       </Unit12>
       <Unit13>
         <Filename Value="../fpcbuild251/fpcbuild/fpcsrc/rtl/inc/mouseh.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="65"/>
         <CursorPos X="11" Y="62"/>
         <UsageCount Value="11"/>
@@ -210,8 +185,6 @@
         <Filename Value="ulogin.pas"/>
         <ComponentName Value="frmLogin"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="ulogin"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="13"/>
         <CursorPos X="23" Y="47"/>
         <UsageCount Value="40"/>
@@ -222,8 +195,6 @@
         <ComponentName Value="frmGraficos"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="ugraficos"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="46"/>
         <CursorPos X="50" Y="62"/>
         <UsageCount Value="41"/>
@@ -234,8 +205,6 @@
         <ComponentName Value="frmFiltro"/>
         <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="ufiltro"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="8"/>
         <CursorPos X="24" Y="15"/>
         <UsageCount Value="32"/>
@@ -245,8 +214,6 @@
         <IsPartOfProject Value="True"/>
         <ComponentName Value="frmRelatorios"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="urelatorios"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="18"/>
         <CursorPos X="36" Y="23"/>
         <UsageCount Value="31"/>
@@ -253,10 +220,8 @@
       </Unit17>
       <Unit18>
         <Filename Value="../pascalscada/ZeosLib/src/component/ZAbstractRODataset.pas"/>
-        <UnitName Value="ZAbstractRODataset"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="1415"/>
-        <CursorPos X="1" Y="1434"/>
+        <CursorPos Y="1434"/>
         <UsageCount Value="11"/>
       </Unit18>
       <Unit19>
@@ -264,16 +229,11 @@
         <IsPartOfProject Value="True"/>
         <ComponentName Value="frmUsuarios"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="ugerenciamentousuarios"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
-        <CursorPos X="1" Y="1"/>
         <UsageCount Value="29"/>
       </Unit19>
       <Unit20>
         <Filename Value="../../controlsecuritymanager.pas"/>
         <UnitName Value="ControlSecurityManager"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="149"/>
         <CursorPos X="3" Y="151"/>
         <UsageCount Value="11"/>
@@ -282,8 +242,6 @@
       <Unit21>
         <Filename Value="../../customizedusermanagement.pas"/>
         <UnitName Value="CustomizedUserManagement"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="1"/>
         <CursorPos X="78" Y="13"/>
         <UsageCount Value="10"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
@@ -290,15 +248,12 @@
       </Unit21>
       <Unit22>
         <Filename Value="../../../../lazarus/lcl/include/containedaction.inc"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="41"/>
-        <CursorPos X="1" Y="53"/>
+        <CursorPos Y="53"/>
         <UsageCount Value="10"/>
       </Unit22>
       <Unit23>
         <Filename Value="../../zeoslib/src/dbc/ZDbcSqLiteUtils.pas"/>
-        <UnitName Value="ZDbcSqLiteUtils"/>
-        <WindowIndex Value="0"/>
         <TopLine Value="248"/>
         <CursorPos X="13" Y="258"/>
         <UsageCount Value="10"/>
@@ -306,17 +261,24 @@
       </Unit23>
       <Unit24>
         <Filename Value="../../zeoslib/src/component/ZAbstractRODataset.pas"/>
-        <UnitName Value="ZAbstractRODataset"/>
-        <EditorIndex Value="3"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="4"/>
         <TopLine Value="1839"/>
-        <CursorPos X="1" Y="1855"/>
+        <CursorPos Y="1855"/>
         <UsageCount Value="10"/>
         <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit24>
+      <Unit25>
+        <Filename Value="../../src/hmi/hmicontrolsecuritymanager.pas"/>
+        <UnitName Value="HMIControlSecurityManager"/>
+        <EditorIndex Value="3"/>
+        <TopLine Value="16"/>
+        <UsageCount Value="10"/>
+        <Loaded Value="True"/>
+        <DefaultSyntaxHighlighter Value="Delphi"/>
+      </Unit25>
     </Units>
-    <JumpHistory Count="16" HistoryIndex="15">
+    <JumpHistory Count="20" HistoryIndex="19">
       <Position1>
         <Filename Value="umain.pas"/>
         <Caret Line="298" Column="3" TopLine="298"/>
@@ -335,15 +297,15 @@
       </Position4>
       <Position5>
         <Filename Value="umain.pas"/>
-        <Caret Line="311" Column="1" TopLine="302"/>
+        <Caret Line="311" TopLine="302"/>
       </Position5>
       <Position6>
         <Filename Value="umain.pas"/>
-        <Caret Line="281" Column="1" TopLine="259"/>
+        <Caret Line="281" TopLine="259"/>
       </Position6>
       <Position7>
         <Filename Value="umain.pas"/>
-        <Caret Line="326" Column="1" TopLine="268"/>
+        <Caret Line="326" TopLine="268"/>
       </Position7>
       <Position8>
         <Filename Value="umain.pas"/>
@@ -355,7 +317,7 @@
       </Position9>
       <Position10>
         <Filename Value="umain.pas"/>
-        <Caret Line="1" Column="48" TopLine="1"/>
+        <Caret Column="48"/>
       </Position10>
       <Position11>
         <Filename Value="umain.pas"/>
@@ -367,7 +329,6 @@
       </Position12>
       <Position13>
         <Filename Value="umain.pas"/>
-        <Caret Line="1" Column="1" TopLine="1"/>
       </Position13>
       <Position14>
         <Filename Value="upopuphorimetro.pas"/>
@@ -375,12 +336,28 @@
       </Position14>
       <Position15>
         <Filename Value="udmdb.pas"/>
-        <Caret Line="87" Column="1" TopLine="76"/>
+        <Caret Line="87" TopLine="76"/>
       </Position15>
       <Position16>
         <Filename Value="../../zeoslib/src/component/ZAbstractRODataset.pas"/>
-        <Caret Line="1855" Column="1" TopLine="1839"/>
+        <Caret Line="1855" TopLine="1839"/>
       </Position16>
+      <Position17>
+        <Filename Value="umain.pas"/>
+        <Caret Line="114" Column="60" TopLine="114"/>
+      </Position17>
+      <Position18>
+        <Filename Value="udmdb.pas"/>
+        <Caret Line="96" Column="44" TopLine="85"/>
+      </Position18>
+      <Position19>
+        <Filename Value="udmdb.pas"/>
+        <Caret Line="9" Column="62"/>
+      </Position19>
+      <Position20>
+        <Filename Value="udmdb.pas"/>
+        <Caret Line="179" Column="25" TopLine="119"/>
+      </Position20>
     </JumpHistory>
   </ProjectOptions>
   <CompilerOptions>
@@ -399,12 +376,6 @@
         </Win32>
       </Options>
     </Linking>
-    <Other>
-      <CompilerMessages>
-        <UseMsgFile Value="True"/>
-      </CompilerMessages>
-      <CompilerPath Value="$(CompPath)"/>
-    </Other>
   </CompilerOptions>
   <Debugging>
     <Exceptions Count="4">
@@ -422,5 +393,4 @@
       </Item4>
     </Exceptions>
   </Debugging>
-  <EditorMacros Count="0"/>
 </CONFIG>
Index: examples/laz_isotcp_hourmeter/udmdb.lfm
===================================================================
--- examples/laz_isotcp_hourmeter/udmdb.lfm	(revision 928)
+++ examples/laz_isotcp_hourmeter/udmdb.lfm	(working copy)
@@ -8,6 +8,9 @@
   object SQLiteConnection: TZConnection
     ControlsCodePage = cCP_UTF8
     AutoEncodeStrings = False
+    Properties.Strings = (
+      'AutoEncodeStrings='
+    )
     Port = 0
     Database = '/home/fabiolg/desenvolvimento/horimetros/historicos.db3'
     Protocol = 'sqlite-3'
@@ -98,7 +101,7 @@
       DisplayFormat = 'hh:nn:ss'
     end
   end
-  object Datasource1: TDatasource
+  object Datasource1: TDataSource
     DataSet = AlarmesAtivos
     left = 72
     top = 8
@@ -162,7 +165,7 @@
       MinValue = 1
     end
   end
-  object Datasource2: TDatasource
+  object Datasource2: TDataSource
     DataSet = ZTable1
     left = 184
     top = 8
@@ -251,7 +254,7 @@
       DisplayFormat = 'hh:nn:ss'
     end
   end
-  object AcionamentoDatasource: TDatasource
+  object AcionamentoDatasource: TDataSource
     DataSet = AcionamentoQuery
     left = 392
     top = 8
@@ -334,7 +337,7 @@
       DisplayFormat = 'hh:nn:ss'
     end
   end
-  object AlarmeDatasource: TDatasource
+  object AlarmeDatasource: TDataSource
     DataSet = AlarmesQuery
     left = 472
     top = 8
Index: examples/laz_isotcp_hourmeter/udmdb.pas
===================================================================
--- examples/laz_isotcp_hourmeter/udmdb.pas	(revision 928)
+++ examples/laz_isotcp_hourmeter/udmdb.pas	(working copy)
@@ -6,7 +6,7 @@
 
 uses
   Classes, SysUtils, db, FileUtil, ExtCtrls, LR_Class, LR_DBSet, LR_E_HTM,
-  ZConnection, ZDataset, CustomizedUserManagement, ControlSecurityManager;
+  ZConnection, ZDataset, HMICustomizedUserManagement, HMIControlSecurityManager;
 
 type
 
@@ -176,7 +176,7 @@
 var
   um:TfrmUsuarios;
 begin
-  GetControlSecurityManager.TryAccess('1');
+  GetHMIControlSecurityManager.TryAccess('1');
 
   um:=TfrmUsuarios.Create(Self);
   try
Index: examples/laz_isotcp_hourmeter/umain.lfm
===================================================================
--- examples/laz_isotcp_hourmeter/umain.lfm	(revision 928)
+++ examples/laz_isotcp_hourmeter/umain.lfm	(working copy)
@@ -8,7 +8,7 @@
   ClientWidth = 1289
   OnCreate = FormCreate
   OnShow = FormShow
-  LCLVersion = '1.1'
+  LCLVersion = '1.5'
   object DBGrid1: TDBGrid
     Left = 0
     Height = 80
@@ -2420,10 +2420,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 80
         BlinkWith = 1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList1
         ImageIndex = 0
       end    
@@ -2432,10 +2432,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 80
         BlinkWith = 2
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList1
         ImageIndex = 1
       end    
@@ -2444,10 +2444,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 80
         BlinkWith = 0
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList1
         ImageIndex = 2
       end    
@@ -2456,10 +2456,10 @@
         Value2 = 2
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList1
         ImageIndex = 3
       end>
@@ -2480,10 +2480,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorh
         ImageIndex = 0
       end    
@@ -2492,10 +2492,10 @@
         Value2 = 2
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorh
         ImageIndex = 1
       end>
@@ -2516,10 +2516,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorv
         ImageIndex = 0
       end    
@@ -2528,10 +2528,10 @@
         Value2 = 2
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorv
         ImageIndex = 1
       end>
@@ -2786,10 +2786,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = True
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = True
-        ZoneType = ztEqual
         ImageList = motorh
         ImageIndex = 2
       end    
@@ -2798,10 +2798,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorh
         ImageIndex = 0
       end    
@@ -2810,10 +2810,10 @@
         Value2 = 2
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = motorh
         ImageIndex = 1
       end>
@@ -2834,10 +2834,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList2
         ImageIndex = 0
       end    
@@ -2846,10 +2846,10 @@
         Value2 = 2
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList2
         ImageIndex = 1
       end>
@@ -2870,10 +2870,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = ImageList3
         ImageIndex = 0
       end>
@@ -2882,9 +2882,9 @@
   end
   object HMICheckBox1: THMICheckBox
     Left = 128
-    Height = 21
+    Height = 19
     Top = 104
-    Width = 80
+    Width = 74
     Enabled = True
     ParentColor = False
     TabOrder = 1
@@ -2911,10 +2911,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -2923,10 +2923,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         HorizontalAlignment = taRightJustify
         VerticalAlignment = tlCenter
         Text = 'Forno'
@@ -2951,10 +2951,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -2963,10 +2963,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         HorizontalAlignment = taRightJustify
         VerticalAlignment = tlCenter
         Text = 'Ventilador'
@@ -2991,10 +2991,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -3003,10 +3003,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         VerticalAlignment = tlCenter
         Text = 'Atomizador'
         Color = clBlack
@@ -3030,10 +3030,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -3042,10 +3042,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         HorizontalAlignment = taRightJustify
         VerticalAlignment = tlCenter
         Text = 'Bomba de produto'
@@ -3070,10 +3070,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -3082,10 +3082,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         HorizontalAlignment = taRightJustify
         VerticalAlignment = tlCenter
         Text = 'Rotativa'
@@ -3110,10 +3110,10 @@
         Value2 = 0
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         Color = clBlack
         Transparent = True
       end    
@@ -3122,10 +3122,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 0
         BlinkWith = -1
-        DefaultZone = False
-        ZoneType = ztEqual
         HorizontalAlignment = taRightJustify
         VerticalAlignment = tlCenter
         Text = 'Zaranda'
@@ -3218,10 +3218,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 100
         BlinkWith = 1
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = fire
         ImageIndex = 0
       end    
@@ -3230,10 +3230,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 100
         BlinkWith = 2
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = fire
         ImageIndex = 1
       end    
@@ -3242,10 +3242,10 @@
         Value2 = 1
         IncludeValue1 = False
         IncludeValue2 = False
+        DefaultZone = False
+        ZoneType = ztEqual
         BlinkTime = 100
         BlinkWith = 0
-        DefaultZone = False
-        ZoneType = ztEqual
         ImageList = fire
         ImageIndex = 2
       end>
@@ -3279,22 +3279,22 @@
       end
       object ToolButton2: TToolButton
         Left = 1
-        Top = 116
+        Top = 156
         Action = secureGraphics
       end
       object ToolButton3: TToolButton
         Left = 1
-        Top = 168
+        Top = 208
         Action = secureRelatorioAcionamento
       end
       object ToolButton4: TToolButton
         Left = 1
-        Top = 272
+        Top = 312
         Action = PascalSCADAManageUsersAction1
       end
       object ToolButton5: TToolButton
         Left = 1
-        Top = 220
+        Top = 260
         Action = secureAlarmes
       end
       object ToolButton6: TToolButton
@@ -3304,6 +3304,7 @@
       end
       object ToolButton7: TToolButton
         Left = 1
+        Height = 50
         Top = 106
         Width = 50
         Caption = 'ToolButton7'
@@ -3600,10 +3601,10 @@
           Value2 = 0
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           Color = clBlack
           Transparent = True
         end      
@@ -3612,10 +3613,10 @@
           Value2 = 1
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Martelo'
@@ -3665,10 +3666,10 @@
           Value2 = 0
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = True
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = True
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Switched Off'
@@ -3682,10 +3683,10 @@
           Value2 = 1
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Switched ON'
@@ -3723,10 +3724,10 @@
           Value2 = 0
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           Color = clBlack
           Transparent = True
         end      
@@ -3735,10 +3736,10 @@
           Value2 = 1
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Filtro Manga'
@@ -3788,10 +3789,10 @@
           Value2 = 0
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = True
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = True
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Switched Off'
@@ -3805,10 +3806,10 @@
           Value2 = 1
           IncludeValue1 = False
           IncludeValue2 = False
+          DefaultZone = False
+          ZoneType = ztEqual
           BlinkTime = 0
           BlinkWith = -1
-          DefaultZone = False
-          ZoneType = ztEqual
           HorizontalAlignment = taCenter
           VerticalAlignment = tlCenter
           Text = 'Switched ON'
Index: examples/laz_isotcp_hourmeter/umain.pas
===================================================================
--- examples/laz_isotcp_hourmeter/umain.pas	(revision 928)
+++ examples/laz_isotcp_hourmeter/umain.pas	(working copy)
@@ -7,7 +7,7 @@
 uses
   Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, DBGrids,
   ExtCtrls, StdCtrls, ComCtrls, Buttons, ActnList, HMIAnimation, PLCTagNumber,
-  HMIEdit, HMILabel, HMICheckBox, HMIText, ControlSecurityManager;
+  HMIEdit, HMILabel, HMICheckBox, HMIText, HMIControlSecurityManager;
 
 type
 
Index: examples/laz_linear_scalling/linear_example.lpi
===================================================================
--- examples/laz_linear_scalling/linear_example.lpi	(revision 928)
+++ examples/laz_linear_scalling/linear_example.lpi	(working copy)
@@ -1,4 +1,4 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <CONFIG>
   <ProjectOptions>
     <Version Value="9"/>
@@ -7,7 +7,6 @@
       <ResourceType Value="res"/>
       <UseXPManifest Value="True"/>
       <Icon Value="0"/>
-      <ActiveWindowIndexAtStart Value="0"/>
     </General>
     <i18n>
       <EnableI18N LFM="False"/>
@@ -37,11 +36,10 @@
         <PackageName Value="LCL"/>
       </Item2>
     </RequiredPackages>
-    <Units Count="5">
+    <Units Count="7">
       <Unit0>
         <Filename Value="linear_example.lpr"/>
         <IsPartOfProject Value="True"/>
-        <UnitName Value="linear_example"/>
         <UsageCount Value="20"/>
       </Unit0>
       <Unit1>
@@ -48,12 +46,8 @@
         <Filename Value="umain.pas"/>
         <IsPartOfProject Value="True"/>
         <ComponentName Value="Form1"/>
+        <HasResources Value="True"/>
         <ResourceBaseClass Value="Form"/>
-        <UnitName Value="umain"/>
-        <EditorIndex Value="0"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="3"/>
-        <CursorPos X="8" Y="41"/>
         <UsageCount Value="20"/>
         <Loaded Value="True"/>
         <LoadedDesigner Value="True"/>
@@ -62,12 +56,11 @@
         <Filename Value="udm.pas"/>
         <IsPartOfProject Value="True"/>
         <ComponentName Value="DataModule1"/>
+        <HasResources Value="True"/>
         <ResourceBaseClass Value="DataModule"/>
-        <UnitName Value="udm"/>
-        <EditorIndex Value="3"/>
-        <WindowIndex Value="0"/>
-        <TopLine Value="21"/>
-        <CursorPos X="123" Y="18"/>
+        <IsVisibleTab Value="True"/>
+        <EditorIndex Value="1"/>
+        <CursorPos X="23" Y="17"/>
         <UsageCount Value="20"/>
         <Loaded Value="True"/>
         <LoadedDesigner Value="True"/>
@@ -75,63 +68,72 @@
       <Unit3>
         <Filename Value="../../valueprocessor.pas"/>
         <UnitName Value="ValueProcessor"/>
-        <IsVisibleTab Value="True"/>
-        <EditorIndex Value="1"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="433"/>
         <CursorPos X="3" Y="440"/>
         <UsageCount Value="10"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit3>
       <Unit4>
         <Filename Value="../../hsstrings.pas"/>
-        <UnitName Value="hsstrings"/>
-        <EditorIndex Value="2"/>
-        <WindowIndex Value="0"/>
+        <EditorIndex Value="-1"/>
         <TopLine Value="226"/>
         <CursorPos X="25" Y="247"/>
         <UsageCount Value="10"/>
-        <Loaded Value="True"/>
         <DefaultSyntaxHighlighter Value="Delphi"/>
       </Unit4>
+      <Unit5>
+        <Filename Value="../../../../lazarus/lcl/lresources.pp"/>
+        <UnitName Value="LResources"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="3122"/>
+        <CursorPos Y="3135"/>
+        <UsageCount Value="10"/>
+      </Unit5>
+      <Unit6>
+        <Filename Value="../../src/scada/linearscaleprocessor.pas"/>
+        <UnitName Value="LinearScaleProcessor"/>
+        <EditorIndex Value="-1"/>
+        <TopLine Value="157"/>
+        <UsageCount Value="10"/>
+        <DefaultSyntaxHighlighter Value="Delphi"/>
+      </Unit6>
     </Units>
-    <JumpHistory Count="18" HistoryIndex="17">
+    <JumpHistory Count="27" HistoryIndex="26">
       <Position1>
         <Filename Value="umain.pas"/>
-        <Caret Line="1" Column="1" TopLine="1"/>
       </Position1>
       <Position2>
         <Filename Value="umain.pas"/>
-        <Caret Line="37" Column="8" TopLine="1"/>
+        <Caret Line="37" Column="8"/>
       </Position2>
       <Position3>
         <Filename Value="umain.pas"/>
-        <Caret Line="38" Column="8" TopLine="1"/>
+        <Caret Line="38" Column="8"/>
       </Position3>
       <Position4>
         <Filename Value="umain.pas"/>
-        <Caret Line="39" Column="8" TopLine="1"/>
+        <Caret Line="39" Column="8"/>
       </Position4>
       <Position5>
         <Filename Value="umain.pas"/>
-        <Caret Line="38" Column="8" TopLine="1"/>
+        <Caret Line="38" Column="8"/>
       </Position5>
       <Position6>
         <Filename Value="umain.pas"/>
-        <Caret Line="37" Column="8" TopLine="1"/>
+        <Caret Line="37" Column="8"/>
       </Position6>
       <Position7>
         <Filename Value="umain.pas"/>
-        <Caret Line="38" Column="8" TopLine="1"/>
+        <Caret Line="38" Column="8"/>
       </Position7>
       <Position8>
         <Filename Value="umain.pas"/>
-        <Caret Line="39" Column="8" TopLine="1"/>
+        <Caret Line="39" Column="8"/>
       </Position8>
       <Position9>
         <Filename Value="umain.pas"/>
-        <Caret Line="40" Column="8" TopLine="1"/>
+        <Caret Line="40" Column="8"/>
       </Position9>
       <Position10>
         <Filename Value="umain.pas"/>
@@ -166,9 +168,43 @@
         <Caret Line="40" Column="8" TopLine="3"/>
       </Position17>
       <Position18>
-        <Filename Value="../../valueprocessor.pas"/>
-        <Caret Line="431" Column="21" TopLine="415"/>
+        <Filename Value="umain.pas"/>
+        <Caret Line="41" Column="8" TopLine="3"/>
       </Position18>
+      <Position19>
+        <Filename Value="udm.pas"/>
+        <Caret Line="12" Column="16" TopLine="2"/>
+      </Position19>
+      <Position20>
+        <Filename Value="udm.pas"/>
+        <Caret Line="16" Column="39" TopLine="2"/>
+      </Position20>
+      <Position21>
+        <Filename Value="udm.pas"/>
+        <Caret Line="9" Column="23" TopLine="2"/>
+      </Position21>
+      <Position22>
+        <Filename Value="udm.pas"/>
+        <Caret Line="6" Column="8" TopLine="2"/>
+      </Position22>
+      <Position23>
+        <Filename Value="umain.pas"/>
+        <Caret Line="41" Column="8"/>
+      </Position23>
+      <Position24>
+        <Filename Value="umain.pas"/>
+      </Position24>
+      <Position25>
+        <Filename Value="udm.pas"/>
+      </Position25>
+      <Position26>
+        <Filename Value="udm.pas"/>
+        <Caret Line="18" Column="9" TopLine="4"/>
+      </Position26>
+      <Position27>
+        <Filename Value="udm.pas"/>
+        <Caret Line="17" Column="23"/>
+      </Position27>
     </JumpHistory>
   </ProjectOptions>
   <CompilerOptions>
@@ -187,9 +223,6 @@
         </Win32>
       </Options>
     </Linking>
-    <Other>
-      <CompilerPath Value="$(CompPath)"/>
-    </Other>
   </CompilerOptions>
   <Debugging>
     <Exceptions Count="3">
Index: examples/laz_linear_scalling/udm.lfm
===================================================================
--- examples/laz_linear_scalling/udm.lfm	(revision 928)
+++ examples/laz_linear_scalling/udm.lfm	(working copy)
@@ -1,17 +1,9 @@
 object DataModule1: TDataModule1
   OldCreateOrder = False
   Height = 313
-  HorizontalOffset = 709
-  VerticalOffset = 127
+  HorizontalOffset = 750
+  VerticalOffset = 126
   Width = 383
-  object Linear1_is_100_on_PLC: TScalesQueue
-    ScalesQueue = <    
-      item
-        ScaleProcessor = LinearScale_1_is_100
-      end>
-    left = 144
-    top = 40
-  end
   object TCP_UDPPort1: TTCP_UDPPort
     Active = True
     Host = '127.0.0.1'
@@ -54,7 +46,6 @@
   end
   object Word2: TPLCBlockElement
     TagGUID = '{3233190C-3306-44F5-9D94-17FD05507912}'
-    ScaleProcessor = Linear1_is_100_on_PLC
     PLCBlock = PLCBlock1
     Index = 1
     EnableMaxValue = False
@@ -77,7 +68,6 @@
   end
   object Word4: TPLCBlockElement
     TagGUID = '{D09BFBD4-4580-4F25-91C9-A4AC186EA817}'
-    ScaleProcessor = Linear1_is_100_on_PLC
     PLCBlock = PLCBlock1
     Index = 3
     EnableMaxValue = False
@@ -158,8 +148,8 @@
     SysMax = 1
     PLCMin = 0
     PLCMax = 100
-    left = 176
-    top = 40
+    left = 208
+    top = 32
   end
   object Word4_ws: TPLCBlockElement
     TagGUID = '{D3C034A7-8A33-40D2-BAF6-B3AE5E0732B6}'
@@ -183,4 +173,12 @@
     left = 8
     top = 72
   end
+  object ScalesQueue1: TScalesQueue
+    ScalesQueue = <    
+      item
+        ScaleProcessor = LinearScale_1_is_100
+      end>
+    left = 212
+    top = 96
 end
+end
Index: examples/laz_linear_scalling/udm.pas
===================================================================
--- examples/laz_linear_scalling/udm.pas	(revision 928)
+++ examples/laz_linear_scalling/udm.pas	(working copy)
@@ -15,8 +15,8 @@
   TDataModule1 = class(TDataModule)
     LinearScale_1_is_100: TLinearScaleProcessor;
     ModBusTCPDriver1: TModBusTCPDriver;
-    Linear1_is_100_on_PLC: TPIPE;
     PLCBlock1: TPLCBlock;
+    ScalesQueue1: TScalesQueue;
     TCP_UDPPort1: TTCP_UDPPort;
     Word1: TPLCBlockElement;
     Word10: TPLCBlockElement;
Index: pascalscada_common.lpk
===================================================================
--- pascalscada_common.lpk	(revision 928)
+++ pascalscada_common.lpk	(working copy)
@@ -12,43 +12,39 @@
       </SearchPaths>
     </CompilerOptions>
     <Version Minor="7" Release="3"/>
-    <Files Count="9">
+    <Files Count="8">
       <Item1>
-        <Filename Value="src/common/pscada_constants.pas"/>
-        <UnitName Value="pscada_constants"/>
+        <Filename Value="src/common/pscada_cpu_utils.pas"/>
+        <UnitName Value="pSCADA_cpu_utils"/>
       </Item1>
       <Item2>
-        <Filename Value="src/common/pscada_cpu_utils.pas"/>
-        <UnitName Value="pSCADA_cpu_utils"/>
+        <Filename Value="src/common/pscada_crc16utils.pas"/>
+        <UnitName Value="crc16utils"/>
       </Item2>
       <Item3>
-        <Filename Value="src/common/pscada_crc16utils.pas"/>
-        <UnitName Value="crc16utils"/>
+        <Filename Value="src/common/pscada_crossdatetime.pas"/>
+        <UnitName Value="pSCADA_crossdatetime"/>
       </Item3>
       <Item4>
-        <Filename Value="src/common/pscada_crossdatetime.pas"/>
-        <UnitName Value="pSCADA_crossdatetime"/>
+        <Filename Value="src/common/pscada_crossevent.pas"/>
+        <UnitName Value="pSCADA_CrossEvent"/>
       </Item4>
       <Item5>
-        <Filename Value="src/common/pscada_crossevent.pas"/>
-        <UnitName Value="pSCADA_CrossEvent"/>
+        <Filename Value="src/common/pscada_messagequeue.pas"/>
+        <UnitName Value="pSCADA_MessageQueue"/>
       </Item5>
       <Item6>
-        <Filename Value="src/common/pscada_messagequeue.pas"/>
-        <UnitName Value="pSCADA_MessageQueue"/>
+        <Filename Value="src/common/pscada_strings.pas"/>
+        <UnitName Value="pSCADA_strings"/>
       </Item6>
       <Item7>
-        <Filename Value="src/common/pscada_strings.pas"/>
-        <UnitName Value="pSCADA_strings"/>
+        <Filename Value="src/common/pscada_types.pas"/>
+        <UnitName Value="pSCADA_Types"/>
       </Item7>
       <Item8>
-        <Filename Value="src/common/pscada_types.pas"/>
-        <UnitName Value="pSCADA_Types"/>
-      </Item8>
-      <Item9>
         <Filename Value="src/common/pscada_utils.pas"/>
         <UnitName Value="pSCADA_utils"/>
-      </Item9>
+      </Item8>
     </Files>
     <RequiredPkgs Count="2">
       <Item1>
Index: pascalscada_common.pas
===================================================================
--- pascalscada_common.pas	(revision 928)
+++ pascalscada_common.pas	(working copy)
@@ -7,7 +7,7 @@
 interface
 
 uses
-  pscada_constants, pSCADA_cpu_utils, pscada_crc16utils, pSCADA_crossdatetime, 
+  pSCADA_cpu_utils, pscada_crc16utils, pSCADA_crossdatetime,
   pSCADA_CrossEvent, pSCADA_MessageQueue, pSCADA_strings, pSCADA_Types, 
   pSCADA_utils, LazarusPackageIntf;
 
Index: pascalscada_hmi.lpk
===================================================================
--- pascalscada_hmi.lpk	(revision 928)
+++ pascalscada_hmi.lpk	(working copy)
@@ -17,7 +17,7 @@
       </Parsing>
     </CompilerOptions>
     <Version Minor="7" Release="3"/>
-    <Files Count="40">
+    <Files Count="41">
       <Item1>
         <Filename Value="src/hmi/hmialfakeyboard.pas"/>
         <UnitName Value="ualfakeyboard"/>
@@ -178,6 +178,11 @@
         <Filename Value="src/hmi/hmizones.pas"/>
         <Type Value="Include"/>
       </Item40>
+      <Item41>
+        <Filename Value="src\hmi\hmiregister.pas"/>
+        <HasRegisterProc Value="True"/>
+        <UnitName Value="hmiregister"/>
+      </Item41>
     </Files>
     <RequiredPkgs Count="5">
       <Item1>
Index: pascalscada_hmi.pas
===================================================================
--- pascalscada_hmi.pas	(revision 928)
+++ pascalscada_hmi.pas	(working copy)
@@ -7,18 +7,19 @@
 interface
 
 uses
-  hmialfakeyboard, hmibasiccolletion, hmibasicusermanagement, 
+  hmialfakeyboard, hmibasiccolletion, HMIBasicUserManagement, 
   hmibooleanpropertyconnector, hmicolorpropertyconnector, HMIComboBox, 
-  hmicontrolsecuritymanager, hmicustomizedusermanagement, 
+  HMIControlSecurityManager, HMICustomizedUserManagement, 
   hmi_draw_basiccontrol, hmi_draw_basic_horizontal_control, hmi_draw_elevador, 
   hmi_draw_fita, hmi_draw_redler, hmi_draw_rosca, HMIKeyboardManager, 
   hmiobjectcolletion, hmi_polyline, hmitextstrings, HMITransparentButton, 
-  LazarusPackageIntf;
+  hmiregister, LazarusPackageIntf;
 
 implementation
 
 procedure Register;
 begin
+  RegisterUnit('hmiregister', @hmiregister.Register);
 end;
 
 initialization
Index: src/database/hmidbconnection.pas
===================================================================
--- src/database/hmidbconnection.pas	(revision 928)
+++ src/database/hmidbconnection.pas	(working copy)
@@ -1,4 +1,4 @@
-{$i ../common/language.inc}
+{.$i ../common/language.inc}
 {$IFDEF PORTUGUES}
 {:
   Unit que implementa a classe de conexão a vários sistemas gerenciadores de
@@ -20,7 +20,7 @@
 interface
 
 uses
-  Classes, sysutils, ZConnection, ZPropertyEditor, pSCADAMessageQueue, CrossEvent,
+  Classes, sysutils, ZConnection, ZPropertyEditor, pSCADA_MessageQueue, pSCADA_CrossEvent,
   syncobjs, ZDataset, psbufdataset;
 
 type
Index: src/database/pscada_dbreg.pas
===================================================================
--- src/database/pscada_dbreg.pas	(revision 928)
+++ src/database/pscada_dbreg.pas	(working copy)
@@ -1,47 +1,47 @@
-{$i ../common/language.inc}
-unit pscada_dbreg;
-
-{$I ../../src/common/delphiver.inc}
-
-{$IFDEF FPC}
-{$mode delphi}
-{$ENDIF}
-
-interface
-
-uses Classes;
-
-procedure Register;
-
-implementation
-
-uses hsstrings, HMIDBConnection, psbufdataset,
-  {$IFDEF FPC}
-    LResources, lazlclversion, PropEdits, ComponentEditors;
-  {$ELSE}
-    Types,
-    {$IFDEF DELPHI2009_UP}
-      //demais versoes do delphi
-      //others versions of delphi.
-      DesignIntf, DesignEditors;
-    {$ELSE}
-      {$IFDEF PORTUGUES}
-        {$MESSAGE ERROR 'Somente versões posteriores ao Delphi 2009 são suportadas!'}
-      {$ELSE}
-        {$MESSAGE ERROR 'Only Delphi 2009 or later are supported!'}
-      {$ENDIF}
-    {$ENDIF}
-  {$ENDIF}
-
-procedure Register;
-begin
-  RegisterComponents(strDatabasePallete,  [THMIDBConnection]);
-  RegisterComponents(strFPCPallete,       [TFPSBufDataSet]);
-
-  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Protocol', THMIDBProtocolPropertyEditor);
-  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Database', THMIDBDatabasePropertyEditor);
-  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Catalog',  THMIDBCatalogPropertyEditor);
-end;
-
-end.
-
+{.$i ../common/language.inc}
+unit pscada_dbreg;
+
+{.$I ../../src/common/delphiver.inc}
+
+{$IFDEF FPC}
+{$mode delphi}
+{$ENDIF}
+
+interface
+
+uses Classes;
+
+procedure Register;
+
+implementation
+
+uses pSCADA_strings, HMIDBConnection, psbufdataset,
+  {$IFDEF FPC}
+    LResources, PropEdits, ComponentEditors;
+  {$ELSE}
+    Types,
+    {$IFDEF DELPHI2009_UP}
+      //demais versoes do delphi
+      //others versions of delphi.
+      DesignIntf, DesignEditors;
+    {$ELSE}
+      {$IFDEF PORTUGUES}
+        {$MESSAGE ERROR 'Somente versões posteriores ao Delphi 2009 são suportadas!'}
+      {$ELSE}
+        {$MESSAGE ERROR 'Only Delphi 2009 or later are supported!'}
+      {$ENDIF}
+    {$ENDIF}
+  {$ENDIF}
+
+procedure Register;
+begin
+  RegisterComponents(strDatabasePallete,  [THMIDBConnection]);
+  RegisterComponents(strFPCPallete,       [TFPSBufDataSet]);
+
+  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Protocol', THMIDBProtocolPropertyEditor);
+  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Database', THMIDBDatabasePropertyEditor);
+  RegisterPropertyEditor(TypeInfo(string), THMIDBConnection, 'Catalog',  THMIDBCatalogPropertyEditor);
+end;
+
+end.
+
Index: src/hmi/hmianimation.pas
===================================================================
--- src/hmi/hmianimation.pas	(revision 928)
+++ src/hmi/hmianimation.pas	(working copy)
@@ -165,7 +165,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIAnimation.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmicheckbox.pas
===================================================================
--- src/hmi/hmicheckbox.pas	(revision 928)
+++ src/hmi/hmicheckbox.pas	(working copy)
@@ -472,7 +472,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMICheckBox.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmicontroldislocatoranimation.pas
===================================================================
--- src/hmi/hmicontroldislocatoranimation.pas	(revision 928)
+++ src/hmi/hmicontroldislocatoranimation.pas	(working copy)
@@ -231,7 +231,7 @@
 
 implementation
 
-uses hsstrings;
+uses pSCADA_strings;
 
 constructor THMIControlDislocatorAnimation.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmiedit.pas
===================================================================
--- src/hmi/hmiedit.pas	(revision 928)
+++ src/hmi/hmiedit.pas	(working copy)
@@ -21,7 +21,7 @@
 uses
   SysUtils, Classes, Controls, StdCtrls, PLCTag, HMITypes, Graphics, Dialogs,
   {$IFDEF FPC}LCLIntf, LCLType,{$ELSE}Windows,{$ENDIF} ProtocolTypes, Tag,
-  unumerickeyboard, Forms;
+  HMINumericKeyboard, Forms;
 
 type
   {$IFDEF PORTUGUES}
@@ -378,7 +378,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIEdit.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmilabel.pas
===================================================================
--- src/hmi/hmilabel.pas	(revision 928)
+++ src/hmi/hmilabel.pas	(working copy)
@@ -183,7 +183,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMILabel.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmiprogressbar.pas
===================================================================
--- src/hmi/hmiprogressbar.pas	(revision 928)
+++ src/hmi/hmiprogressbar.pas	(working copy)
@@ -116,7 +116,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIProgressBar.Create(AOwner: TComponent);
 begin
Index: src/hmi/hmipropeditor.pas
===================================================================
--- src/hmi/hmipropeditor.pas	(revision 928)
+++ src/hmi/hmipropeditor.pas	(working copy)
@@ -19,7 +19,7 @@
 {$MACRO ON}
 {$ENDIF}
 
-{$I ../common/delphiver.inc}
+{.$I ../common/delphiver.inc}
 
 interface
 
@@ -28,7 +28,7 @@
   typinfo, HMIControlDislocatorAnimation, hmiobjectcolletion,
   HMIControlSecurityManager, Graphics,
   {$IFDEF FPC}
-    PropEdits, ComponentEditors, lazlclversion, GraphPropEdits, ImgList,
+    PropEdits, ComponentEditors, GraphPropEdits, ImgList,
     hmibooleanpropertyconnector, hmicolorpropertyconnector;
   {$ELSE}
     Types,
Index: src/hmi/hmiradiogroup.pas
===================================================================
--- src/hmi/hmiradiogroup.pas	(revision 928)
+++ src/hmi/hmiradiogroup.pas	(working copy)
@@ -139,7 +139,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIRadioGroup.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmiregister.pas
===================================================================
--- src/hmi/hmiregister.pas	(revision 928)
+++ src/hmi/hmiregister.pas	(working copy)
@@ -20,13 +20,13 @@
 implementation
 
 uses
-  Classes, hsstrings, HMIEdit, HMILabel, HMICheckBox, HMIRadioButton,
+  Classes, pSCADA_strings, HMIEdit, HMILabel, HMICheckBox, HMIRadioButton,
   HMITrackBar, HMIProgressBar, HMIRadioGroup, HMIUpDown, HMIScrollBar,
   HMIAnimation, HMIText, HMIZones, hmipropeditor, HMIControlDislocatorAnimation,
-  HMIControlSecurityManager, ActnList, CustomizedUserManagement, Controls,
+  HMIControlSecurityManager, HMICustomizedUserManagement, ActnList, Controls,
 
   {$IF defined(WINDOWS) or defined(WIN32) or defined(WIN64)}
-  WinCCUserManagement,
+  HMIWinCCUserManagement,
   {$IFEND}
 
   {$IF defined(FPC) AND (not defined(DELPHI4_UP))}
@@ -36,7 +36,7 @@
   {$IFEND}
 
   {$IFDEF FPC}
-    LResources, lazlclversion, PropEdits, ComponentEditors;
+    LResources, PropEdits, ComponentEditors;
   {$ELSE}
     {$IFDEF DELPHI2009_UP}
       //demais versoes do delphi
@@ -81,7 +81,7 @@
   //RegisterComponents(strControlsPallete,  [THMIButton]);
 
   {$IF defined(WINDOWS) or defined(WIN32) or defined(WIN64)}
-  RegisterComponents(strUserManagement,   [TWinCCUserManagement]);
+  RegisterComponents(strUserManagement,   [THMIWinCCUserManagement]);
   {$IFEND}
   RegisterComponents(strUserManagement,   [TCustomizedUserManagement]);
 
Index: src/hmi/hmiscrollbar.pas
===================================================================
--- src/hmi/hmiscrollbar.pas	(revision 928)
+++ src/hmi/hmiscrollbar.pas	(working copy)
@@ -130,7 +130,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIScrollBar.Create(AOwner: TComponent);
 begin
Index: src/hmi/hmitext.pas
===================================================================
--- src/hmi/hmitext.pas	(revision 928)
+++ src/hmi/hmitext.pas	(working copy)
@@ -1,4 +1,4 @@
-{$i ../common/language.inc}
+{.$i ../common/language.inc}
 {$IFDEF PORTUGUES}
 {:
   @abstract(Implementa o controle responsável por mostrar textos pré-definidos
@@ -140,7 +140,7 @@
 
 implementation
 
-uses hsstrings;
+uses pSCADA_strings;
 
 constructor THMIText.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmitrackbar.pas
===================================================================
--- src/hmi/hmitrackbar.pas	(revision 928)
+++ src/hmi/hmitrackbar.pas	(working copy)
@@ -144,7 +144,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMITrackBar.Create(AOwner: TComponent);
 begin
Index: src/hmi/hmiupdown.pas
===================================================================
--- src/hmi/hmiupdown.pas	(revision 928)
+++ src/hmi/hmiupdown.pas	(working copy)
@@ -161,7 +161,7 @@
 
 implementation
 
-uses hsstrings, HMIControlSecurityManager;
+uses pSCADA_strings, HMIControlSecurityManager;
 
 constructor THMIUpDown.Create(AOwner:TComponent);
 begin
Index: src/hmi/hmiwinccusermanagement.pas
===================================================================
--- src/hmi/hmiwinccusermanagement.pas	(revision 928)
+++ src/hmi/hmiwinccusermanagement.pas	(working copy)
@@ -1,387 +1,387 @@
-﻿{$I ../common/pscada_compiler_versions.inc}
-unit HMIWinCCUserManagement;
-
-interface
-
-uses
-  Classes, sysutils, HMIBasicUserManagement, windows, ExtCtrls;
-
-type
-  THMIWCCPWRTLogin                   = function(monitor:AnsiChar)                                 :Boolean;  stdcall;
-  THMIWCCPWRTLogout                  = function()                                                 :Boolean;  stdcall;
-  THMIWCCPWRTGetCurrentUser          = function(Buffer:PAnsiChar; bufsize:LongInt)                :Boolean;  stdcall;
-  THMIWCCPWRTGetLoginPriority        = function()                                                 :Cardinal; stdcall;
-  THMIWCCPWRTPermissionToString      = function(perm:Cardinal; permstr:PAnsiChar; bufsize:LongInt):Boolean;  stdcall;
-  THMIWCCPWRTCheckPermission         = function(permlevel:Cardinal; suppress_messagebox:Cardinal) :Boolean;  stdcall;
-  THMIWCCPWRTCheckPermissionOnArea   = function(permlevel:Cardinal; area:PAnsiChar)               :Boolean;  stdcall;
-  THMIWCCPWRTCheckPermissionOnAreaID = function(permlevel:Cardinal; area:PAnsiChar)               :Boolean;  stdcall;
-  THMIWCCPWRTSilentLogin             = function(login:PAnsiChar; password:PAnsiChar)              :Boolean;  stdcall;
-
-  THMIWCCPermission = class(TObject)
-  public
-    AuthID:LongInt;
-  end;
-
-  THMIWCCAuthorization = class(TObject)
-  public
-    AuthorizationName:String;
-    Valid:Boolean;
-  end;
-
-  THMIAuthorizations = array of TAuthorization;
-
-  { TWinCCUserManagement }
-
-  THMIWinCCUserManagement = class(THMIBasicUserManagement)
-  private
-    FCheckTimer                :TTimer;
-    FInLoginProcess            :Boolean;
-    FAuthorizationList         :TStrings;
-    procedure CheckAuthChanges(Sender:TObject);
-  private
-    PWRTLogin                  :THMIWCCPWRTLogin;
-    PWRTLogout                 :THMIWCCPWRTLogout;
-    PWRTGetCurrentUser         :THMIWCCPWRTGetCurrentUser;
-    PWRTGetLoginPriority       :THMIWCCPWRTGetLoginPriority;
-    PWRTPermissionToString     :THMIWCCPWRTPermissionToString;
-    PWRTCheckPermission        :THMIWCCPWRTCheckPermission;
-    PWRTCheckPermissionOnArea  :THMIWCCPWRTCheckPermissionOnArea;
-    PWRTCheckPermissionOnAreaID:THMIWCCPWRTCheckPermissionOnAreaID;
-    PWRTSilentLogin            :THMIWCCPWRTSilentLogin;
-    hUseAdmin:THANDLE;
-    fUseAdminLoaded:Boolean;
-    fAuthorizationCache:TStringList;
-    procedure LoadUseAdmin;
-    procedure SetAuthorizationList(AValue: TStrings);
-  protected
-    function CheckUserAndPassword(User, Pass: String; var UID:Integer; LoginAction:Boolean): Boolean; override;
-    function GetLoggedUser:Boolean; override;
-    function GetCurrentUserLogin:String; override;
-    procedure Loaded; override;
-  public
-    constructor Create(AOwner: TComponent); override;
-    procedure AfterConstruction; override;
-    destructor Destroy; override;
-    function Login: Boolean; override;
-    procedure Logout; override;
-    procedure Manage; override;
-
-    procedure   ValidateSecurityCode(sc:String); override;
-    function    SecurityCodeExists(sc:String):Boolean; override;
-    procedure   RegisterSecurityCode(sc:String); override;
-    procedure   UnregisterSecurityCode(sc:String); override;
-
-    function    CanAccess(sc:String):Boolean; override;
-    function    GetRegisteredAccessCodes:TStringList; override;
-    procedure   ClearAuthorizationCache;
-    function    CanAccessViaWinCCAuthCode(Code:LongInt):Boolean;
-    function    CheckIfUserIsAllowed(sc: String; RequireUserLogin: Boolean; var userlogin: String): Boolean; override;
-  published
-    property FailureLogin;
-    property LoginRetries;
-    property LoginFrozenTime;
-    property SuccessfulLogin;
-    property UserChanged;
-    property AuthorizationList:TStrings read FAuthorizationList write SetAuthorizationList stored true;
-  end;
-
-implementation
-
-uses HMIControlSecurityManager, hsstrings, StrUtils, StdCtrls
-     {$IFDEF FPC}
-     , TextStrings
-     {$ELSE}
-     , hmitextstrings
-     {$ENDIF};
-
-constructor THMIWinCCUserManagement.Create(AOwner: TComponent);
-begin
-  fUseAdminLoaded:=false;
-  inherited Create(AOwner);
-
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  FCheckTimer:=TTimer.Create(Self);
-  FCheckTimer.OnTimer :=CheckAuthChanges;
-  FCheckTimer.Interval:=1000;
-  FCheckTimer.Enabled:=false;
-  FAuthorizationList:=TTextStrings.Create;
-  fAuthorizationCache:=nil;
-end;
-
-procedure THMIWinCCUserManagement.AfterConstruction;
-begin
-  inherited AfterConstruction;
-  FCheckTimer.Enabled:=true;
-end;
-
-destructor THMIWinCCUserManagement.Destroy;
-begin
-  //unload the library if it´s loaded
-  if hUseAdmin<>0 then
-    FreeLibrary(hUseAdmin);
-  FreeAndNil(FCheckTimer);
-  FreeAndNil(FAuthorizationList);
-  FreeAndNil(fAuthorizationCache);
-  inherited Destroy;
-end;
-
-procedure THMIWinCCUserManagement.LoadUseAdmin;
-begin
-  hUseAdmin:=LoadLibrary('UseAdmin.dll');
-  if hUseAdmin=0 then begin
-    raise Exception.Create(SWinCCAreInstalled);
-  end;
-
-  //load UseAdmin functions...
-  PWRTLogin                  :=TPWRTLogin(GetProcAddress(hUseAdmin,'PWRTLogin'));
-  PWRTLogout                 :=TPWRTLogout(GetProcAddress(hUseAdmin,'PWRTLogout'));
-  PWRTGetCurrentUser         :=TPWRTGetCurrentUser(GetProcAddress(hUseAdmin,'PWRTGetCurrentUser'));
-  PWRTGetLoginPriority       :=TPWRTGetLoginPriority(GetProcAddress(hUseAdmin,'PWRTGetLoginPriority'));
-  PWRTPermissionToString     :=TPWRTPermissionToString(GetProcAddress(hUseAdmin,'PWRTPermissionToString'));
-  PWRTCheckPermission        :=TPWRTCheckPermission(GetProcAddress(hUseAdmin,'PWRTCheckPermission'));
-  PWRTCheckPermissionOnArea  :=TPWRTCheckPermissionOnArea(GetProcAddress(hUseAdmin,'PWRTCheckPermissionOnArea'));
-  PWRTCheckPermissionOnAreaID:=TPWRTCheckPermissionOnAreaID(GetProcAddress(hUseAdmin,'PWRTCheckPermissionOnAreaID'));
-  PWRTSilentLogin            :=TPWRTSilentLogin(GetProcAddress(hUseAdmin,'PWRTSilentLogin'));
-
-  fUseAdminLoaded:=true;
-end;
-
-procedure THMIWinCCUserManagement.SetAuthorizationList(AValue: TStrings);
-var
-  l, p, AuthNumber: LongInt;
-  newAuthorizationCache:TStringList;
-  ValidFormat: Boolean;
-  strNum: String;
-  strAuthName: String;
-begin
-  newAuthorizationCache:=TStringList.Create;
-  try
-    ValidFormat:=true;
-    if AValue=nil then exit;
-    for l:=0 to AValue.Count-1 do begin
-      p:=Pos(':',AValue[l]);
-      if p>0 then begin
-        strNum:=LeftStr(AValue[l],p-1);
-        strAuthName:=RightStr(AValue[l],Length(AValue[l])-p);
-        if TryStrToInt(Trim(strNum), AuthNumber) then begin
-          {$IFDEF DELPHI2009_UP}
-          newAuthorizationCache.AddObject(strAuthName,TObject(Pointer(AuthNumber)));
-          {$ELSE}
-          newAuthorizationCache.AddObject(strAuthName,TObject(Pointer(PtrUInt(AuthNumber))));
-          {$ENDIF}
-        end else begin
-          ValidFormat:=False;
-          break;
-        end;
-      end else begin
-        ValidFormat:=False;
-        break;
-      end;
-    end;
-  finally
-    if ValidFormat then begin
-      if fAuthorizationCache<>nil then
-        fAuthorizationCache.Destroy;
-      fAuthorizationCache:=newAuthorizationCache;
-    end else begin
-      newAuthorizationCache.Destroy;
-      raise exception.Create('WinCCUserManagement: Invalid authorization list format at line '+IntToStr(l+1));
-    end;
-    if AValue<>nil then
-      FAuthorizationList.Assign(AValue);
-  end;
-end;
-
-procedure THMIWinCCUserManagement.CheckAuthChanges(Sender:TObject);
-var
-  culogin:String;
-begin
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  culogin:=GetCurrentUserLogin;
-  if culogin<>FCurrentUserLogin then begin
-    GetHMIControlSecurityManager.UpdateControls;
-    try
-      DoUserChanged;
-    finally
-      FCurrentUserLogin:=culogin;
-    end;
-  end;
-end;
-
-function THMIWinCCUserManagement.CheckUserAndPassword(User, Pass: String;
-  var UID: Integer; LoginAction: Boolean): Boolean;
-begin
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  Result:=PWRTSilentLogin(PAnsiChar(AnsiString(User)),PAnsiChar(AnsiString(Pass))); //log into WinCC
-  if Result then
-    UID:=1
-  else
-    UID:=-1;
-end;
-
-function THMIWinCCUserManagement.GetLoggedUser:Boolean;
-begin
- Result := GetCurrentUserLogin<>'';
-end;
-
-function THMIWinCCUserManagement.GetCurrentUserLogin:String;
-var
-  buffer1:PAnsiChar;
-  c:LongInt;
-begin
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  c:=PWRTGetLoginPriority(); //forces initialization...
-
-  buffer1:=GetMemory(512);
-  buffer1[0]:=#0;
-
-  if PWRTGetCurrentUser(buffer1,510) then
-    Result:=buffer1
-  else
-    Result:='';
-
-  FreeMem(buffer1);
-end;
-
-procedure THMIWinCCUserManagement.Loaded;
-begin
-  inherited Loaded;
-  if FAuthorizationList.Count>0 then
-    SetAuthorizationList(FAuthorizationList);
-end;
-
-function  THMIWinCCUserManagement.Login: Boolean;
-begin
-  if FInLoginProcess then exit;
-  FInLoginProcess:=true;
-  try
-    Result := inherited Login;
-  finally
-    FInLoginProcess:=false;
-  end;
-end;
-
-procedure THMIWinCCUserManagement.Logout;
-begin
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  if PWRTLogout() then
-    inherited Logout;
-end;
-
-procedure THMIWinCCUserManagement.Manage;
-begin
-  raise exception.Create(SUseTheWinCCUserManager);
-end;
-
-procedure   THMIWinCCUserManagement.ValidateSecurityCode(sc:String);
-begin
-  if not SecurityCodeExists(sc) then
-    raise exception.Create(SUseTheWinCCUserManager);
-end;
-
-function    THMIWinCCUserManagement.CanAccess(sc:String):Boolean;
-var
-  p, p2, i:Cardinal;
-  auth:TStringList;
-  c:LongInt;
-begin
-  Result:=false;
-
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  p:=PWRTGetLoginPriority(); //forces a initialization... I don´t know why...
-
-  if not SecurityCodeExists(sc) then exit;
-
-  auth:=GetRegisteredAccessCodes;
-
-  i:=auth.IndexOf(sc);
-
-  if (i>0) then
-    p2:=LongInt(Pointer(auth.Objects[i]))
-  else
-    p2:=0;
-
-  auth.Destroy;
-
-  Result:=PWRTCheckPermission(p2,1);
-end;
-
-function    THMIWinCCUserManagement.SecurityCodeExists(sc:String):Boolean;
-var
-  x:TStringList;
-  c:LongInt;
-begin
-  x:=GetRegisteredAccessCodes;
-  Result:=x.IndexOf(sc)<>-1;
-  x.Destroy;
-end;
-
-procedure   THMIWinCCUserManagement.RegisterSecurityCode(sc:String);
-begin
-  raise exception.Create(SUseTheWinCCUserManager);
-end;
-
-procedure   THMIWinCCUserManagement.UnregisterSecurityCode(sc:String);
-begin
-  //does nothing.
-end;
-
-function    THMIWinCCUserManagement.GetRegisteredAccessCodes:TStringList;
-var
-  buffer1:PAnsiChar;
-  c:LongInt;
-begin
-  if not fUseAdminLoaded then LoadUseAdmin;
-
-  c:=PWRTGetLoginPriority(); //forces initialization...
-
-  if fAuthorizationCache=nil then begin
-
-    buffer1:=GetMemory(512);
-
-    Result:=TStringList.Create;
-    for c:=1 to 1100 do begin
-      buffer1[0]:=#0;
-      PWRTPermissionToString(c,buffer1,510);
-
-      if strcomp(buffer1,'')<>0 then begin
-        {$IFDEF DELPHI2009_UP}
-        Result.AddObject((buffer1),TObject(Pointer(c)));
-        {$ELSE}
-        Result.AddObject(buffer1,TObject(Pointer(PtrUInt(c))));
-        {$ENDIF}
-      end;
-    end;
-    fAuthorizationCache:=TStringList.Create;
-    fAuthorizationCache.Assign(Result);
-    FreeMem(buffer1);
-  end else begin
-    Result:=TStringList.Create;
-    Result.Assign(fAuthorizationCache);
-  end;
-end;
-
-procedure THMIWinCCUserManagement.ClearAuthorizationCache;
-begin
-  fAuthorizationCache.Destroy;
-  fAuthorizationCache:=nil;
-end;
-
-function THMIWinCCUserManagement.CanAccessViaWinCCAuthCode(Code: LongInt): Boolean;
-begin
-  Result := PWRTCheckPermission(code,0);
-end;
-
-function THMIWinCCUserManagement.CheckIfUserIsAllowed(sc: String;
-  RequireUserLogin: Boolean; var userlogin: String): Boolean;
-begin
-  raise exception.Create(SWCCNotSupportCheckUserAuth);
-end;
-
-end.
+﻿{$I ../common/pscada_compiler_versions.inc}
+unit HMIWinCCUserManagement;
+
+interface
+
+uses
+  Classes, sysutils, HMIBasicUserManagement, windows, ExtCtrls;
+
+type
+  THMIWCCPWRTLogin                   = function(monitor:AnsiChar)                                 :Boolean;  stdcall;
+  THMIWCCPWRTLogout                  = function()                                                 :Boolean;  stdcall;
+  THMIWCCPWRTGetCurrentUser          = function(Buffer:PAnsiChar; bufsize:LongInt)                :Boolean;  stdcall;
+  THMIWCCPWRTGetLoginPriority        = function()                                                 :Cardinal; stdcall;
+  THMIWCCPWRTPermissionToString      = function(perm:Cardinal; permstr:PAnsiChar; bufsize:LongInt):Boolean;  stdcall;
+  THMIWCCPWRTCheckPermission         = function(permlevel:Cardinal; suppress_messagebox:Cardinal) :Boolean;  stdcall;
+  THMIWCCPWRTCheckPermissionOnArea   = function(permlevel:Cardinal; area:PAnsiChar)               :Boolean;  stdcall;
+  THMIWCCPWRTCheckPermissionOnAreaID = function(permlevel:Cardinal; area:PAnsiChar)               :Boolean;  stdcall;
+  THMIWCCPWRTSilentLogin             = function(login:PAnsiChar; password:PAnsiChar)              :Boolean;  stdcall;
+
+  THMIWCCPermission = class(TObject)
+  public
+    AuthID:LongInt;
+  end;
+
+  THMIWCCAuthorization = class(TObject)
+  public
+    AuthorizationName:String;
+    Valid:Boolean;
+  end;
+
+  THMIAuthorizations = array of THMIWCCAuthorization;
+
+  { TWinCCUserManagement }
+
+  THMIWinCCUserManagement = class(TBasicUserManagement)
+  private
+    FCheckTimer                :TTimer;
+    FInLoginProcess            :Boolean;
+    FAuthorizationList         :TStrings;
+    procedure CheckAuthChanges(Sender:TObject);
+  private
+    PWRTLogin                  :THMIWCCPWRTLogin;
+    PWRTLogout                 :THMIWCCPWRTLogout;
+    PWRTGetCurrentUser         :THMIWCCPWRTGetCurrentUser;
+    PWRTGetLoginPriority       :THMIWCCPWRTGetLoginPriority;
+    PWRTPermissionToString     :THMIWCCPWRTPermissionToString;
+    PWRTCheckPermission        :THMIWCCPWRTCheckPermission;
+    PWRTCheckPermissionOnArea  :THMIWCCPWRTCheckPermissionOnArea;
+    PWRTCheckPermissionOnAreaID:THMIWCCPWRTCheckPermissionOnAreaID;
+    PWRTSilentLogin            :THMIWCCPWRTSilentLogin;
+    hUseAdmin:THANDLE;
+    fUseAdminLoaded:Boolean;
+    fAuthorizationCache:TStringList;
+    procedure LoadUseAdmin;
+    procedure SetAuthorizationList(AValue: TStrings);
+  protected
+    function CheckUserAndPassword(User, Pass: String; var UID:Integer; LoginAction:Boolean): Boolean; override;
+    function GetLoggedUser:Boolean; override;
+    function GetCurrentUserLogin:String; override;
+    procedure Loaded; override;
+  public
+    constructor Create(AOwner: TComponent); override;
+    procedure AfterConstruction; override;
+    destructor Destroy; override;
+    function Login: Boolean; override;
+    procedure Logout; override;
+    procedure Manage; override;
+
+    procedure   ValidateSecurityCode(sc:String); override;
+    function    SecurityCodeExists(sc:String):Boolean; override;
+    procedure   RegisterSecurityCode(sc:String); override;
+    procedure   UnregisterSecurityCode(sc:String); override;
+
+    function    CanAccess(sc:String):Boolean; override;
+    function    GetRegisteredAccessCodes:TStringList; override;
+    procedure   ClearAuthorizationCache;
+    function    CanAccessViaWinCCAuthCode(Code:LongInt):Boolean;
+    function    CheckIfUserIsAllowed(sc: String; RequireUserLogin: Boolean; var userlogin: String): Boolean; override;
+  published
+    property FailureLogin;
+    property LoginRetries;
+    property LoginFrozenTime;
+    property SuccessfulLogin;
+    property UserChanged;
+    property AuthorizationList:TStrings read FAuthorizationList write SetAuthorizationList stored true;
+  end;
+
+implementation
+
+uses HMIControlSecurityManager, pSCADA_strings, StrUtils, StdCtrls
+     {$IFDEF FPC}
+     , TextStrings
+     {$ELSE}
+     , hmitextstrings
+     {$ENDIF};
+
+constructor THMIWinCCUserManagement.Create(AOwner: TComponent);
+begin
+  fUseAdminLoaded:=false;
+  inherited Create(AOwner);
+
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  FCheckTimer:=TTimer.Create(Self);
+  FCheckTimer.OnTimer :=CheckAuthChanges;
+  FCheckTimer.Interval:=1000;
+  FCheckTimer.Enabled:=false;
+  FAuthorizationList:=TTextStrings.Create;
+  fAuthorizationCache:=nil;
+end;
+
+procedure THMIWinCCUserManagement.AfterConstruction;
+begin
+  inherited AfterConstruction;
+  FCheckTimer.Enabled:=true;
+end;
+
+destructor THMIWinCCUserManagement.Destroy;
+begin
+  //unload the library if it´s loaded
+  if hUseAdmin<>0 then
+    FreeLibrary(hUseAdmin);
+  FreeAndNil(FCheckTimer);
+  FreeAndNil(FAuthorizationList);
+  FreeAndNil(fAuthorizationCache);
+  inherited Destroy;
+end;
+
+procedure THMIWinCCUserManagement.LoadUseAdmin;
+begin
+  hUseAdmin:=LoadLibrary('UseAdmin.dll');
+  if hUseAdmin=0 then begin
+    raise Exception.Create(SWinCCAreInstalled);
+  end;
+
+  //load UseAdmin functions...
+  PWRTLogin                  :=THMIWCCPWRTLogin(GetProcAddress(hUseAdmin,'PWRTLogin'));
+  PWRTLogout                 :=THMIWCCPWRTLogout(GetProcAddress(hUseAdmin,'PWRTLogout'));
+  PWRTGetCurrentUser         :=THMIWCCPWRTGetCurrentUser(GetProcAddress(hUseAdmin,'PWRTGetCurrentUser'));
+  PWRTGetLoginPriority       :=THMIWCCPWRTGetLoginPriority(GetProcAddress(hUseAdmin,'PWRTGetLoginPriority'));
+  PWRTPermissionToString     :=THMIWCCPWRTPermissionToString(GetProcAddress(hUseAdmin,'PWRTPermissionToString'));
+  PWRTCheckPermission        :=THMIWCCPWRTCheckPermission(GetProcAddress(hUseAdmin,'PWRTCheckPermission'));
+  PWRTCheckPermissionOnArea  :=THMIWCCPWRTCheckPermissionOnArea(GetProcAddress(hUseAdmin,'PWRTCheckPermissionOnArea'));
+  PWRTCheckPermissionOnAreaID:=THMIWCCPWRTCheckPermissionOnAreaID(GetProcAddress(hUseAdmin,'PWRTCheckPermissionOnAreaID'));
+  PWRTSilentLogin            :=THMIWCCPWRTSilentLogin(GetProcAddress(hUseAdmin,'PWRTSilentLogin'));
+
+  fUseAdminLoaded:=true;
+end;
+
+procedure THMIWinCCUserManagement.SetAuthorizationList(AValue: TStrings);
+var
+  l, p, AuthNumber: LongInt;
+  newAuthorizationCache:TStringList;
+  ValidFormat: Boolean;
+  strNum: String;
+  strAuthName: String;
+begin
+  newAuthorizationCache:=TStringList.Create;
+  try
+    ValidFormat:=true;
+    if AValue=nil then exit;
+    for l:=0 to AValue.Count-1 do begin
+      p:=Pos(':',AValue[l]);
+      if p>0 then begin
+        strNum:=LeftStr(AValue[l],p-1);
+        strAuthName:=RightStr(AValue[l],Length(AValue[l])-p);
+        if TryStrToInt(Trim(strNum), AuthNumber) then begin
+          {$IFDEF DELPHI2009_UP}
+          newAuthorizationCache.AddObject(strAuthName,TObject(Pointer(AuthNumber)));
+          {$ELSE}
+          newAuthorizationCache.AddObject(strAuthName,TObject(Pointer(PtrUInt(AuthNumber))));
+          {$ENDIF}
+        end else begin
+          ValidFormat:=False;
+          break;
+        end;
+      end else begin
+        ValidFormat:=False;
+        break;
+      end;
+    end;
+  finally
+    if ValidFormat then begin
+      if fAuthorizationCache<>nil then
+        fAuthorizationCache.Destroy;
+      fAuthorizationCache:=newAuthorizationCache;
+    end else begin
+      newAuthorizationCache.Destroy;
+      raise exception.Create('WinCCUserManagement: Invalid authorization list format at line '+IntToStr(l+1));
+    end;
+    if AValue<>nil then
+      FAuthorizationList.Assign(AValue);
+  end;
+end;
+
+procedure THMIWinCCUserManagement.CheckAuthChanges(Sender:TObject);
+var
+  culogin:String;
+begin
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  culogin:=GetCurrentUserLogin;
+  if culogin<>FCurrentUserLogin then begin
+    GetHMIControlSecurityManager.UpdateControls;
+    try
+      DoUserChanged;
+    finally
+      FCurrentUserLogin:=culogin;
+    end;
+  end;
+end;
+
+function THMIWinCCUserManagement.CheckUserAndPassword(User, Pass: String;
+  var UID: Integer; LoginAction: Boolean): Boolean;
+begin
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  Result:=PWRTSilentLogin(PAnsiChar(AnsiString(User)),PAnsiChar(AnsiString(Pass))); //log into WinCC
+  if Result then
+    UID:=1
+  else
+    UID:=-1;
+end;
+
+function THMIWinCCUserManagement.GetLoggedUser:Boolean;
+begin
+ Result := GetCurrentUserLogin<>'';
+end;
+
+function THMIWinCCUserManagement.GetCurrentUserLogin:String;
+var
+  buffer1:PAnsiChar;
+  c:LongInt;
+begin
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  c:=PWRTGetLoginPriority(); //forces initialization...
+
+  buffer1:=GetMemory(512);
+  buffer1[0]:=#0;
+
+  if PWRTGetCurrentUser(buffer1,510) then
+    Result:=buffer1
+  else
+    Result:='';
+
+  FreeMem(buffer1);
+end;
+
+procedure THMIWinCCUserManagement.Loaded;
+begin
+  inherited Loaded;
+  if FAuthorizationList.Count>0 then
+    SetAuthorizationList(FAuthorizationList);
+end;
+
+function  THMIWinCCUserManagement.Login: Boolean;
+begin
+  if FInLoginProcess then exit;
+  FInLoginProcess:=true;
+  try
+    Result := inherited Login;
+  finally
+    FInLoginProcess:=false;
+  end;
+end;
+
+procedure THMIWinCCUserManagement.Logout;
+begin
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  if PWRTLogout() then
+    inherited Logout;
+end;
+
+procedure THMIWinCCUserManagement.Manage;
+begin
+  raise exception.Create(SUseTheWinCCUserManager);
+end;
+
+procedure   THMIWinCCUserManagement.ValidateSecurityCode(sc:String);
+begin
+  if not SecurityCodeExists(sc) then
+    raise exception.Create(SUseTheWinCCUserManager);
+end;
+
+function    THMIWinCCUserManagement.CanAccess(sc:String):Boolean;
+var
+  p, p2, i:Cardinal;
+  auth:TStringList;
+  c:LongInt;
+begin
+  Result:=false;
+
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  p:=PWRTGetLoginPriority(); //forces a initialization... I don´t know why...
+
+  if not SecurityCodeExists(sc) then exit;
+
+  auth:=GetRegisteredAccessCodes;
+
+  i:=auth.IndexOf(sc);
+
+  if (i>0) then
+    p2:=LongInt(Pointer(auth.Objects[i]))
+  else
+    p2:=0;
+
+  auth.Destroy;
+
+  Result:=PWRTCheckPermission(p2,1);
+end;
+
+function    THMIWinCCUserManagement.SecurityCodeExists(sc:String):Boolean;
+var
+  x:TStringList;
+  c:LongInt;
+begin
+  x:=GetRegisteredAccessCodes;
+  Result:=x.IndexOf(sc)<>-1;
+  x.Destroy;
+end;
+
+procedure   THMIWinCCUserManagement.RegisterSecurityCode(sc:String);
+begin
+  raise exception.Create(SUseTheWinCCUserManager);
+end;
+
+procedure   THMIWinCCUserManagement.UnregisterSecurityCode(sc:String);
+begin
+  //does nothing.
+end;
+
+function    THMIWinCCUserManagement.GetRegisteredAccessCodes:TStringList;
+var
+  buffer1:PAnsiChar;
+  c:LongInt;
+begin
+  if not fUseAdminLoaded then LoadUseAdmin;
+
+  c:=PWRTGetLoginPriority(); //forces initialization...
+
+  if fAuthorizationCache=nil then begin
+
+    buffer1:=GetMemory(512);
+
+    Result:=TStringList.Create;
+    for c:=1 to 1100 do begin
+      buffer1[0]:=#0;
+      PWRTPermissionToString(c,buffer1,510);
+
+      if strcomp(buffer1,'')<>0 then begin
+        {$IFDEF DELPHI2009_UP}
+        Result.AddObject((buffer1),TObject(Pointer(c)));
+        {$ELSE}
+        Result.AddObject(buffer1,TObject(Pointer(PtrUInt(c))));
+        {$ENDIF}
+      end;
+    end;
+    fAuthorizationCache:=TStringList.Create;
+    fAuthorizationCache.Assign(Result);
+    FreeMem(buffer1);
+  end else begin
+    Result:=TStringList.Create;
+    Result.Assign(fAuthorizationCache);
+  end;
+end;
+
+procedure THMIWinCCUserManagement.ClearAuthorizationCache;
+begin
+  fAuthorizationCache.Destroy;
+  fAuthorizationCache:=nil;
+end;
+
+function THMIWinCCUserManagement.CanAccessViaWinCCAuthCode(Code: LongInt): Boolean;
+begin
+  Result := PWRTCheckPermission(code,0);
+end;
+
+function THMIWinCCUserManagement.CheckIfUserIsAllowed(sc: String;
+  RequireUserLogin: Boolean; var userlogin: String): Boolean;
+begin
+  raise exception.Create(SWCCNotSupportCheckUserAuth);
+end;
+
+end.
Index: src/scada/commport.pas
===================================================================
--- src/scada/commport.pas	(revision 928)
+++ src/scada/commport.pas	(working copy)
@@ -996,8 +996,7 @@
     ProtocolDriver,
     pSCADA_Strings,
     pSCADA_CrossDatetime,
-    pSCADA_CPU_Utils,
-    pSCADA_Constants;
+    pSCADA_CPU_Utils;
 
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
Index: src/scada/commtypes.pas
===================================================================
--- src/scada/commtypes.pas	(revision 928)
+++ src/scada/commtypes.pas	(working copy)
@@ -1,107 +1,111 @@
-{$i ../common/pscada_settings.inc}
-{$IFDEF PORTUGUES}
-{:
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @abstract(Unit com os tipos que são usados frequentemente em drivers de portas de comunicação.)
-}
-{$ELSE}
-{:
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @abstract(Unit with types/definitions commonly used on communication ports.)
-}
-{$ENDIF}
-
-unit commtypes;
-
-{$IFDEF FPC}
-{$mode delphi}
-{$ENDIF}
-
-interface
-
-uses Classes, pSCADA_Types;
-
-type
-
-  {$IFDEF PORTUGUES}
-  {:
-    Interface de notificações de eventos para os drivers de protocolo.
-  }
-  {$ELSE}
-  {:
-    Event notification interface for protocol drivers.
-  }
-  {$ENDIF}
-  IPortDriverEventNotification = interface
-  ['{26B0F551-5B46-49D9-BCA1-AD621B3775CF}']
-    {$IFDEF PORTUGUES}
-    //: Retorna o evento a ser chamado quando a porta é aberta.
-    {$ELSE}
-    //: Returns the event to be called when communication port opens.
-    {$ENDIF}
-    function  GetPortOpenedEvent:TNotifyEvent;
-
-    {$IFDEF PORTUGUES}
-    //: Retorna o evento a ser chamado quando a porta é fechada.
-    {$ELSE}
-    //: Returns the event to be called when communication port closed.
-    {$ENDIF}
-    function  GetPortClosedEvent:TNotifyEvent;
-
-    {$IFDEF PORTUGUES}
-    //: Retorna o evento a ser chamado quando a porta é disconectada.
-    {$ELSE}
-    //: Returns the event to be called when communication port is disconnected.
-    {$ENDIF}
-    function  GetPortDisconnectedEvent:TNotifyEvent;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Conjunto de eventos da porta de comunicação que o protocolo deseja ser
-    notificado.
-    @seealso(TPortEvents)
-    @seealso(TNotifyThisEvents)
-    }
-    {$ELSE}
-    {:
-    Set of events that the protocol driver wants be notified.
-    @seealso(TPortEvents)
-    @seealso(TNotifyThisEvents)
-    }
-    {$ENDIF}
-    function  NotifyThisEvents:TNotifyThisEvents;
-
-    {$IFDEF PORTUGUES}
-    //: Método que vai ser chamado quando a porta for aberta.
-    {$ELSE}
-    //: Procedure called when the communication port opens.
-    {$ENDIF}
-    procedure DoPortOpened(Sender: TObject);
-
-    {$IFDEF PORTUGUES}
-    //: Método que vai ser chamado quando a porta for fechada.
-    {$ELSE}
-    //: Procedure called when the communication port was closed.
-    {$ENDIF}
-    procedure DoPortClosed(Sender: TObject);
-
-    {$IFDEF PORTUGUES}
-    //: Método que vai ser chamado quando a porta for desconectada.
-    {$ELSE}
-    //: Procedure called when the communication port was disconnected.
-    {$ENDIF}
-    procedure DoPortDisconnected(Sender: TObject);
-
-    {$IFDEF PORTUGUES}
-    //: Método que vai ser chamado quando a porta for destruida.
-    {$ELSE}
-    //: Procedure called when the communication port has been destroied.
-    {$ENDIF}
-    procedure DoPortRemoved(Sender:TObject);
-  end;
-
-  IPortDriverEventNotificationArray = array of IPortDriverEventNotification;
-
-implementation
-
-end.
+{$i ../common/pscada_settings.inc}
+{$IFDEF PORTUGUES}
+{:
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @abstract(Unit com os tipos que são usados frequentemente em drivers de portas de comunicação.)
+}
+{$ELSE}
+{:
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @abstract(Unit with types/definitions commonly used on communication ports.)
+}
+{$ENDIF}
+
+unit commtypes;
+
+{$IFDEF FPC}
+{$mode delphi}
+{$ENDIF}
+
+interface
+
+uses Classes, pSCADA_Types;
+
+type
+
+  {$IFDEF PORTUGUES}
+  {:
+    Interface de notificações de eventos para os drivers de protocolo.
+  }
+  {$ELSE}
+  {:
+    Event notification interface for protocol drivers.
+  }
+  {$ENDIF}
+  IPortDriverEventNotification = interface
+  ['{26B0F551-5B46-49D9-BCA1-AD621B3775CF}']
+    {$IFDEF PORTUGUES}
+    //: Retorna o evento a ser chamado quando a porta é aberta.
+    {$ELSE}
+    //: Returns the event to be called when communication port opens.
+    {$ENDIF}
+    function  GetPortOpenedEvent:TNotifyEvent;
+
+    {$IFDEF PORTUGUES}
+    //: Retorna o evento a ser chamado quando a porta é fechada.
+    {$ELSE}
+    //: Returns the event to be called when communication port closed.
+    {$ENDIF}
+    function  GetPortClosedEvent:TNotifyEvent;
+
+    {$IFDEF PORTUGUES}
+    //: Retorna o evento a ser chamado quando a porta é disconectada.
+    {$ELSE}
+    //: Returns the event to be called when communication port is disconnected.
+    {$ENDIF}
+    function  GetPortDisconnectedEvent:TNotifyEvent;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Conjunto de eventos da porta de comunicação que o protocolo deseja ser
+    notificado.
+    @seealso(TPortEvents)
+    @seealso(TNotifyThisEvents)
+    }
+    {$ELSE}
+    {:
+    Set of events that the protocol driver wants be notified.
+    @seealso(TPortEvents)
+    @seealso(TNotifyThisEvents)
+    }
+    {$ENDIF}
+    function  NotifyThisEvents:TNotifyThisEvents;
+
+    {$IFDEF PORTUGUES}
+    //: Método que vai ser chamado quando a porta for aberta.
+    {$ELSE}
+    //: Procedure called when the communication port opens.
+    {$ENDIF}
+    procedure DoPortOpened(Sender: TObject);
+
+    {$IFDEF PORTUGUES}
+    //: Método que vai ser chamado quando a porta for fechada.
+    {$ELSE}
+    //: Procedure called when the communication port was closed.
+    {$ENDIF}
+    procedure DoPortClosed(Sender: TObject);
+
+    {$IFDEF PORTUGUES}
+    //: Método que vai ser chamado quando a porta for desconectada.
+    {$ELSE}
+    //: Procedure called when the communication port was disconnected.
+    {$ENDIF}
+    procedure DoPortDisconnected(Sender: TObject);
+
+    {$IFDEF PORTUGUES}
+    //: Método que vai ser chamado quando a porta for destruida.
+    {$ELSE}
+    //: Procedure called when the communication port has been destroied.
+    {$ENDIF}
+    procedure DoPortRemoved(Sender:TObject);
+  end;
+
+  IPortDriverEventNotificationArray = array of IPortDriverEventNotification;
+
+  const
+    PSM_COMMERROR        = 4;
+    PSM_PORT_EVENT       = 5;
+
+implementation
+
+end.
Index: src/scada/plctag.pas
===================================================================
--- src/scada/plctag.pas	(revision 928)
+++ src/scada/plctag.pas	(working copy)
@@ -1,1964 +1,1964 @@
-{$i ../common/pscada_settings.inc}
-{$IFDEF PORTUGUES}
-{:
-@abstract(Implementa a base para Tags de comunicação.)
-@author(Fabio Luis Girardi fabio@pascalscada.com)
-}
-{$ELSE}
-{:
-@abstract(Unit that implements the base of an communication tag.)
-@author(Fabio Luis Girardi fabio@pascalscada.com)
-
-
-****************************** History  *******************************
-***********************************************************************
-08/2013 - Removed Extctrls unit
-@author(Juanjo Montero <juanjo.montero@gmail.com>)
-***********************************************************************
-}
-{$ENDIF}
-unit PLCTag;
-
-{$IFDEF FPC}
-{$mode delphi}
-{$ENDIF}
-
-interface
-
-uses
-  SysUtils, Classes, Tag, ProtocolDriver, ProtocolTypes, Math;
-
-type
-
-  {$IFDEF PORTUGUES}
-  {:
-  @abstract(Classe base para todos os tags de comunicação.)
-  @author(Fabio Luis Girardi fabio@pascalscada.com)
-  }
-  {$ELSE}
-  {:
-  @abstract(Base class of a communication tag.)
-  @author(Fabio Luis Girardi fabio@pascalscada.com)
-  }
-  {$ENDIF}
-  TPLCTag = class(TTag, IManagedTagInterface)
-  private
-    FRawProtocolValues:TArrayOfDouble;
-    FTotalTime, FReadCount:Int64;
-    FFirtsRead:Boolean;
-    FProtocoloOnLoading:TProtocolDriver;
-  private
-    procedure RebuildTagGUID;
-    function  GetTagSizeOnProtocol:LongInt;
-  protected
-    PValidTag,
-    PModified:Boolean;
-    function  IsMyCallBack(Cback:TTagCommandCallBack):Boolean; virtual;
-    procedure GetNewProtocolTagSize;
-    function RemainingMiliseconds:Int64; virtual;
-    function RemainingMilisecondsForNextScan:Int64; virtual;
-    function IsValidTag:Boolean; virtual;
-    procedure SetTagValidity(TagValidity:Boolean); virtual;
-    property Modified:Boolean read PModified;
-  protected
-    {$IFDEF PORTUGUES}
-    //: Referencia ao objeto gerenciador de tags.
-    {$ELSE}
-    //: Stores the tag manager.
-    {$ENDIF}
-    FTagManager:TObject;
-
-    {$IFDEF PORTUGUES}
-    //: A escrita do tag deve ser sincrona ou assincrona
-    {$ELSE}
-    //: Tells if the write command will be synchronous or asynchronous.
-    {$ENDIF}
-    FSyncWrites:Boolean;
-
-    {$IFDEF PORTUGUES}
-    //: Armazena o driver de protocolo usado para comunicação do tag.
-    {$ELSE}
-    //: Stores the protocol driver used by tag.
-    {$ENDIF}
-    PProtocolDriver:TProtocolDriver;
-
-    {$IFDEF PORTUGUES}
-    //: Data/Hora da última tentativa de leitura do valor do tag.
-    {$ELSE}
-    //: Date/time of the last scan read request of tag.
-    {$ENDIF}
-    PLastScanTimeStamp:TDateTime;
-
-    {$IFDEF PORTUGUES}
-    //: Data/Hora da última atualização do valor do tag.
-    {$ELSE}
-    //: Date/time of the last update of the tag value.
-    {$ENDIF}
-    PValueTimeStamp:TDateTime;
-
-    {$IFDEF PORTUGUES}
-    //: Armazena o resultado da última leitura @bold(sincrona) realizada pelo tag.
-    {$ELSE}
-    //: Stores the I/O result of the last synchronous read command done.
-    {$ENDIF}
-    PLastSyncReadCmdResult:TProtocolIOResult;
-
-    {$IFDEF PORTUGUES}
-    //: Armazena o resultado da última escrita @bold(sincrona) realizada pelo tag.
-    {$ELSE}
-    //: Stores the I/O result of the last synchronous write command done.
-    {$ENDIF}
-    PLastSyncWriteCmdResult:TProtocolIOResult;
-
-    {$IFDEF PORTUGUES}
-    //: Armazena o resultado da última leitura @bold(asincrona) realizada pelo tag.
-    {$ELSE}
-    //: Stores the I/O result of the last @bold(asynchronous) read command done.
-    {$ENDIF}
-    PLastASyncReadCmdResult:TProtocolIOResult;
-
-    {$IFDEF PORTUGUES}
-    //: Armazena o resultado da última escrita @bold(assincrona) realizada pelo tag.
-    {$ELSE}
-    //: Stores the I/O result of the last synchronous write command done.
-    {$ENDIF}
-    PLastASyncWriteCmdResult:TProtocolIOResult;
-
-    {$IFDEF PORTUGUES}
-    //: Tipo de dado retornado pelo protocolo.
-    {$ELSE}
-    //: Stores the datatype returned by the protocol driver.
-    {$ENDIF}
-    FProtocolTagType:TProtocolTagType;
-
-    {$IFDEF PORTUGUES}
-    //: Tipo de dado do tag
-    {$ELSE}
-    //: Datatype of the tag.
-    {$ENDIF}
-    FTagType:TTagType;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se as DWords de uma palavra double (64 bits) serão invertidas
-    {$ELSE}
-    //: Tells if the DWords of an Double (64 bits) will be swaped.
-    {$ENDIF}
-    FSwapDWords:Boolean;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se as words da palavra (LongInt, cardinal e float) serão invertidas
-    {$ELSE}
-    //: Tells if the words of an DWORD (LongInt,cardinal and float) will be swaped.
-    {$ENDIF}
-    FSwapWords:Boolean;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se os bytes da WORD (SmallInt, Word) serão invertidas.
-    {$ELSE}
-    //: Tells if the bytes of an WORD (SmallInt, Word) will be swaped.
-    {$ENDIF}
-    FSwapBytes:Boolean;
-
-    {$IFDEF PORTUGUES}
-    //: Tamanho da palavra retornada pelo protocolo e em uso pelo tag, em bits.
-    {$ELSE}
-    //: Word size returned by the protocol and current word size of the tag in bits.
-    {$ENDIF}
-    FProtocolWordSize,
-    FCurrentWordSize:Byte;
-
-    {$IFDEF PORTUGUES}
-    //: Valores vindos do PLC são convertidos para o tipo de dados configurado no tag.
-    {$ELSE}
-    //: Convert values comming from the PLC to the datatype of the tag.
-    {$ENDIF}
-    function PLCValuesToTagValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble; virtual;
-
-    {$IFDEF PORTUGUES}
-    //: Valores vindo do tag são convertidos para o tipo de aceito pelo driver.
-    {$ELSE}
-    //: Convert values of the datatype of the tag to the datatype of the driver.
-    {$ENDIF}
-    function TagValuesToPLCValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble; virtual;
-
-    {$IFDEF PORTUGUES}
-    //: Retorna a média de tempo que o tag é atualizado.
-    {$ELSE}
-    //: Average scan update rate.
-    {$ENDIF}
-    function GetAvgUpdateRate:Double;
-
-    {$IFDEF PORTUGUES}
-    //: Retorna o tamanho real do tag.
-    {$ELSE}
-    //: Returns the real size of the tag.
-    {$ENDIF}
-    procedure UpdateTagSizeOnProtocol; virtual;
-
-    {$IFDEF PORTUGUES}
-    //: Recompila os valores do tag.
-    {$ELSE}
-    //: Rebuild the tag values.
-    {$ENDIF}
-    procedure RebuildValues; virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Habilita/Desabilita o swap de DWords. Valido somente se o tipo de dados do
-    seu tag for pttDouble.
-    @param(v Boolean: @true habilita, @false desabilita.)
-    }
-    {$ELSE}
-    {:
-    Enable/disables the swap of DWords. Valid only if your tag type is pttDouble.
-    @param(v Boolean: @true enables the swap, @false disables.)
-    }
-    {$ENDIF}
-    procedure SetSwapDWords(v:Boolean); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Habilita/Desabilita o swap de words.
-    @param(v Boolean: @true habilita, @false desabilita.)
-    }
-    {$ELSE}
-    {:
-    Enable/disables the swap of words.
-    @param(v Boolean: @true enables the swap, @false disables.)
-    }
-    {$ENDIF}
-    procedure SetSwapWords(v:Boolean); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Habilita/Desabilita o swap de bytes.
-    @param(v Boolean: @true habilita, @false desabilita.)
-    }
-    {$ELSE}
-    {:
-    Enable/disables the swap of bytes.
-    @param(v Boolean: @true enables the swap, @false disables.)
-    }
-    {$ENDIF}
-    procedure SetSwapBytes(v:Boolean); virtual;
-
-    {$IFDEF PORTUGUES}
-    //: Define uma identificação unica do tag. Chamada pelo Tag Manager.
-    {$ELSE}
-    //: Sets a new unique tag identification. Called by the Tag Manager.
-    {$ENDIF}
-    procedure SetGUID(v:String);
-
-    //##########################################################################
-
-    {$IFDEF PORTUGUES}
-    {:
-    Habilita/Desabilita a leitura automática do tag.
-    @param(v Boolean: @true habilita, @false desabilita.)
-    }
-    {$ELSE}
-    {:
-    Enable/disables the automatic tag read.
-    @param(v Boolean: @true enables, @false disables (manual).)
-    }
-    {$ENDIF}
-    procedure SetAutoRead(v:Boolean); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Habilita/Desabilita a escrita automática de valores do tag.
-    @param(v Boolean: @true automatico, @false manual.)
-    }
-    {$ELSE}
-    {:
-    Enable/disables the automatic write of values of the tag.
-    @param(v Boolean: @true automatic, @false manual.)
-    }
-    {$ENDIF}
-    procedure SetAutoWrite(v:Boolean); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o endereço da memória sendo mapeada.
-    @param(v Cardinal. Endereço da memória sendo mapeada.)
-    }
-    {$ELSE}
-    {:
-    Sets the memory address.
-    @param(v Cardinal. The memory address.)
-    }
-    {$ENDIF}
-    procedure SetMemAddress(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o Arquivo/DB que contem a memória sendo mapeada.
-    @param(v Cardinal. Arquivo/DB que a memória mapeada pertence.)
-    }
-    {$ELSE}
-    {:
-    Sets the File/DB that contains the mapped memory.
-    @param(v Cardinal. File/DB number of your memory.)
-    }
-    {$ENDIF}
-    procedure SetMemFileDB(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o função do driver para leitura da memória.
-    @param(v Cardinal. Função do driver usada para leitura da memória.)
-    }
-    {$ELSE}
-    {:
-    Sets the function to be used to read the memory.
-    @param(v Cardinal. Function number to read the memory.)
-    }
-    {$ENDIF}
-    procedure SetMemReadFunction(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o função do driver para escrita de valores da memória.
-    @param(v Cardinal. Função do driver usada para escrita de valores da memória.)
-    }
-    {$ELSE}
-    {:
-    Sets the function to be used to write values on memory.
-    @param(v Cardinal. Function number to write values on memory.)
-    }
-    {$ENDIF}
-    procedure SetMemWriteFunction(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o sub-endereço da memória sendo mapeada.
-    @param(v Cardinal. Sub-endereço da memória sendo mapeada.)
-    }
-    {$ELSE}
-    {:
-    Sets the sub-element of the memory being mapped.
-    @param(v Cardinal. The sub-element number of the memory being mapped.)
-    }
-    {$ENDIF}
-    procedure SetMemSubElement(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o endereço longo (texto) do tag.
-    @param(v String. Endereço longo (texto) do tag.)
-    }
-    {$ELSE}
-    {:
-    Sets the long address (text) of the tag.
-    @param(v String. The long address of the tag (text).)
-    }
-    {$ENDIF}
-    procedure SetPath(v:String); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o endereço do equipamento que contem a memória sendo mapeada.
-    @param(v Cardinal. Endereço do equipamento onde está a memória.)
-    }
-    {$ELSE}
-    {:
-    Sets the address of device being mapped.
-    @param(v Cardinal. The device address.)
-    }
-    {$ENDIF}
-    procedure SetPLCStation(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o Rack do equipamento que contem a memória sendo mapeada.
-    @param(v Cardinal. Hack do equipamento onde está a memória.)
-    }
-    {$ELSE}
-    {:
-    Sets the Rack of the device being mapped.
-    @param(v Cardinal. The device Rack number.)
-    }
-    {$ENDIF}
-    procedure SetPLCHack(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o Slot do equipamento que contem a memória sendo mapeada.
-    @param(v Cardinal. Slot do equipamento onde está a memória.)
-    }
-    {$ELSE}
-    {:
-    Sets the Slot number of the device being mapped.
-    @param(v Cardinal. The Slot number.)
-    }
-    {$ENDIF}
-    procedure SetPLCSlot(v:Cardinal); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o tempo de varredura (atualização) da memória em milisegundos.
-    @param(v Cardinal. Tempo em milisegundos que a memória deve ser atualizada.)
-    }
-    {$ELSE}
-    {:
-    Sets the scan rate of the tag in milliseconds.
-    @param(v Cardinal. Scan rate in milliseconds.)
-    }
-    {$ENDIF}
-    procedure SetRefreshTime(v:TRefreshTime); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Seta o driver de protocolo usado para a comunicação dessa memória.
-    @param(p TProtocolDriver. Componente de protocolo usado para comunicação do tag.)
-    }
-    {$ELSE}
-    {:
-    Sets the protocol driver to be used the read/write values on device.
-    @param(p TProtocolDriver. The protocol driver to be used to read/write values of your device.)
-    }
-    {$ENDIF}
-    procedure SetProtocolDriver(p:TProtocolDriver); virtual;
-
-    {$IFDEF PORTUGUES}
-    //: Configura o novo tipo de dado do tag. @seealso(TTagType)
-    {$ELSE}
-    //: Sets the datatype of the tag. @seealso(TTagType)
-    {$ENDIF}
-    procedure SetTagType(newType:TTagType); virtual;
-
-    //##########################################################################
-
-
-    {$IFDEF PORTUGUES}
-    //: Procedimento chamado pelo driver de protocolo para atualização de valores do tag.
-    {$ELSE}
-    //: Procedure called by the protocol driver to update tag values.
-    {$ENDIF}
-    procedure TagCommandCallBack(Values:TArrayOfDouble; ValuesTimeStamp:TDateTime; TagCommand:TTagCommand; LastResult:TProtocolIOResult; Offset:LongInt); virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Compila uma estrutura com as informações do tag.
-    @seealso(TTagRec)
-    }
-    {$ELSE}
-    {:
-    Returns a structure with all informations about the tag.
-    @seealso(TTagRec)
-    }
-    {$ENDIF}
-    procedure BuildTagRec(out tr:TTagRec; Count, OffSet:LongInt);
-
-    {$IFDEF PORTUGUES}
-    //: Faz uma leitura @bold(assincrona) do tag.
-    {$ELSE}
-    //: Request a update of tag values.
-    {$ENDIF}
-    procedure ScanRead; virtual;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Escreve valores de maneira @bold(assincrona).
-    @param(Values TArrayOfDouble: Array de valores a serem escritos.)
-    @param(Count Cardinal: Quantidade de valores a serem escritos.)
-    @param(Offset Cardinal: A partir de qual elemento deve comecar a escrita.)
-    }
-    {$ELSE}
-    {:
-    Write values of the tag on your device @bold(asynchronous).
-    @param(Values TArrayOfDouble: Array of values to be written.)
-    @param(Count Cardinal: How many values will be written.)
-    @param(Offset Cardinal: Tells offset after the address where the values will be written.)
-    }
-    {$ENDIF}
-    procedure ScanWrite(Values:TArrayOfDouble; Count, Offset:Cardinal); virtual; abstract;
-
-    {$IFDEF PORTUGUES}
-    //: Faz uma leitura @bold(sincrona) do valor do tag.
-    {$ELSE}
-    //: Request a @bold(synchronous) read of the tag value.
-    {$ENDIF}
-    procedure Read; virtual; abstract;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Escreve valores de maneira @bold(sincrona).
-    @param(Values TArrayOfDouble: Array de valores a serem escritos.)
-    @param(Count Cardinal: Quantidade de valores a serem escritos.)
-    @param(Offset Cardinal: A partir de qual elemento deve comecar a escrita.)
-    }
-    {$ELSE}
-    {:
-    Write values of the tag on your device @bold(synchronous).
-    @param(Values TArrayOfDouble: Array of values to be written.)
-    @param(Count Cardinal: How many values will be written.)
-    @param(Offset Cardinal: Tells offset after the address where the values will be written.)
-    }
-    {$ENDIF}
-    procedure Write(Values:TArrayOfDouble; Count, Offset:Cardinal); overload; virtual; abstract; 
-
-    //: @exclude
-    procedure Loaded; override;
-
-    //: @seealso(TTag.AutoRead)
-    property AutoRead write SetAutoRead default true;
-    //: @seealso(TTag.AutoWrite)
-    property AutoWrite write SetAutoWrite default true;
-    //: @seealso(TTag.CommReadErrors)
-    property CommReadErrors default 0;
-    //: @seealso(TTag.CommReadsOK)
-    property CommReadsOK nodefault;
-    //: @seealso(TTag.CommWriteErrors)
-    property CommWriteErrors default 0;
-    //: @seealso(TTag.CommWritesOK)
-    property CommWritesOk nodefault;
-    //: @seealso(TTag.PLCRack)
-    property PLCRack write SetPLCHack nodefault;
-    //: @seealso(TTag.PLCSlot)
-    property PLCSlot write SetPLCSlot nodefault;
-    //: @seealso(TTag.PLCStation)
-    property PLCStation write SetPLCStation nodefault;
-    //: @seealso(TTag.MemFile_DB)
-    property MemFile_DB write SetMemFileDB nodefault;
-    //: @seealso(TTag.MemAddress)
-    property MemAddress write SetMemAddress nodefault;
-    //: @seealso(TTag.MemSubElement)
-    property MemSubElement write SetMemSubElement nodefault;
-    //: @seealso(TTag.MemReadFunction)
-    property MemReadFunction write SetMemReadFunction nodefault;
-    //: @seealso(TTag.MemWriteFunction)
-    property MemWriteFunction write SetMemWriteFunction nodefault;
-    //: @seealso(TTag.Retries)
-    property Retries write PRetries default 1;
-    //: @seealso(TTag.RefreshTime)
-    property RefreshTime write SetRefreshTime stored false;
-    //: @seealso(TTag.ScanRate)
-    property UpdateTime write SetRefreshTime default 1000;
-    //: @seealso(TTag.Size)
-    property Size nodefault;
-    //: @seealso(TTag.LongAddress)
-    property LongAddress write SetPath nodefault;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Driver de protocolo usado para comunicação do mapeamento de memória.
-    @seealso(TProtocolDriver)
-    }
-    {$ELSE}
-    {:
-    Protocol driver used by tag to read/write values on your device.
-    @seealso(TProtocolDriver)
-    }
-    {$ENDIF}
-    property ProtocolDriver:TProtocolDriver read PProtocolDriver write SetProtocolDriver;
-
-    {$IFDEF PORTUGUES}
-    //: Data/Hora em que o valor do tag foi atualizado.
-    {$ELSE}
-    //: Date/time of the last update of the tag value.
-    {$ENDIF}
-    property ValueTimestamp:TDateTime read PValueTimeStamp;
-
-    {$IFDEF PORTUGUES}
-    //: Caso @true, a escrita de valoes do tag vai ser @bold(sincrona).
-    {$ELSE}
-    //: If @true, the write of values will be @bold(synchronous).
-    {$ENDIF}
-    property SyncWrites:Boolean read FSyncWrites write FSyncWrites default false ;
-
-    {$IFDEF PORTUGUES}
-    //: Tipo do tag.
-    {$ELSE}
-    //: Datatype of the tag.
-    {$ENDIF}
-    property TagType:TTagType read FTagType write SetTagType default pttDefault;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se os bytes da WORD (SmallInt, Word) serão invertidas.
-    {$ELSE}
-    //: Tells if the bytes of an WORD (SmallInt, Word) will be swaped.
-    {$ENDIF}
-    property SwapBytes:Boolean read FSwapBytes write SetSwapBytes default false;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se as words da palavra formada serão invertidas.
-    {$ELSE}
-    //: Tells if the words of an DWORD (LongInt, cardinal and float) will be swaped.
-    {$ENDIF}
-    property SwapWords:Boolean read FSwapWords write SetSwapWords default false;
-
-    {$IFDEF PORTUGUES}
-    //: Diz se as DWords de uma um Double (flutuante de 64 bits) serão invertidas.
-    {$ELSE}
-    //: Tells if the DWords of an Double (float 64 bits) will be swaped.
-    {$ENDIF}
-    property SwapDWords:Boolean read FSwapDWords write SetSwapDWords default false;
-
-    {$IFDEF PORTUGUES}
-    //: Informa ao driver o tamanho real do tag no driver de protocolo.
-    {$ELSE}
-    //: Tells the real size of the tag on protocol driver.
-    {$ENDIF}
-    property TagSizeOnProtocol:LongInt read GetTagSizeOnProtocol;
-
-    {$IFDEF PORTUGUES}
-    //: Informa a média de milisegundos que o tag está sendo atualizado.
-    {$ELSE}
-    //: Average update rate of the tag.
-    {$ENDIF}
-    property AvgUpdateRate:Double read GetAvgUpdateRate;
-  public
-    //: @exclude
-    constructor Create(AOwner:TComponent); override;
-    //: @exclude
-    destructor Destroy; override;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Método chamado pelo driver de protocolo que elimina referências a ele.
-    }
-    {$ELSE}
-    //: Called when the protocol driver is being destroyed.
-    {$ENDIF}
-    procedure RemoveDriver;
-  published
-
-    {$IFDEF PORTUGUES}
-    {:
-    Exibe o GUID do tag. Somente leitura.
-    }
-    {$ELSE}
-    //: Tells the unique tag identification.
-    {$ENDIF}
-    property TagGUID:String read PGUID write SetGUID;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Resultado da última leitura @bold(sincrona) realizada pelo tag.
-    @seealso(TProtocolIOResult)
-    }
-    {$ELSE}
-    {:
-    I/O result of the last @bold(synchronous) read done.
-    @seealso(TProtocolIOResult)
-    }
-    {$ENDIF}
-    property LastSyncReadStatus:TProtocolIOResult Read PLastSyncReadCmdResult;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Resultado da última escrita @bold(sincrona) realizada pelo tag.
-    @seealso(TProtocolIOResult)
-    }
-    {$ELSE}
-    {:
-    I/O result of the last @bold(synchronous) write done.
-    @seealso(TProtocolIOResult)
-    }
-    {$ENDIF}
-    property LastSyncWriteStatus:TProtocolIOResult Read PLastSyncWriteCmdResult;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Resultado da última leitura @bold(asincrona) realizada pelo tag.
-    @seealso(TProtocolIOResult)
-    }
-    {$ELSE}
-    {:
-    I/O result of the last @bold(asynchronous) read done.
-    @seealso(TProtocolIOResult)
-    }
-    {$ENDIF}
-    property LastASyncReadStatus:TProtocolIOResult Read PLastASyncReadCmdResult;
-
-    {$IFDEF PORTUGUES}
-    {:
-    Resultado da última escrita @bold(asincrona) realizada pelo tag.
-    @seealso(TProtocolIOResult)
-    }
-    {$ELSE}
-    {:
-    I/O result of the last @bold(asynchronous) write done.
-    @seealso(TProtocolIOResult)
-    }
-    {$ENDIF}
-    property LastASyncWriteStatus:TProtocolIOResult Read PLastASyncWriteCmdResult;
-  end;
-
-  TManagedTags = array of TPLCTag;
-  TTagMananger=class
-  private
-    ftags:TManagedTags;
-  public
-    constructor Create;
-    destructor Destroy; override;
-    procedure AddTag(Tag:TPLCTag);
-    procedure RemoveTag(Tag:TPLCTag);
-  end;
-
-  function GetTagManager:TTagMananger;
-
-implementation
-
-uses pSCADA_utils,
-     pSCADA_Strings,
-     pSCADA_crossdatetime,
-     dateutils;
-
-constructor TPLCTag.Create(AOwner:TComponent);
-begin
-  inherited Create(AOwner);
-  PValueTimeStamp:=CrossNow;
-  PAutoRead:=true;
-  PAutoWrite:=true;
-  PValidTag:=false;
-  PCommReadErrors:=0;
-  PCommReadOK:=0;
-  PCommWriteErrors:=0;
-  PCommWriteOk:=0;
-  PRack:=0;
-  PSlot:=0;
-  PStation:=0;
-  PFile_DB:=0;
-  PAddress:=0;
-  PSubElement:=0;
-  PSize:=1;
-  PPath:='';
-  PReadFunction:=0;
-  PWriteFunction:=0;
-  PRetries:=1;
-  PUpdateTime:=1000;
-  FTagType:=pttDefault;
-  FSwapBytes:=false;
-  FSwapWords:=false;
-  FSwapDWords:=false;
-  FCurrentWordSize:=1;
-  FProtocolWordSize:=1;
-  FFirtsRead:=true;
-  FTotalTime:=0;
-  PProtocolDriver:=nil;
-  FTagManager := GetTagManager;
-  SetLength(FRawProtocolValues,1);
-end;
-
-destructor TPLCTag.Destroy;
-begin
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(self);
-  PProtocolDriver := nil;
-  (FTagManager as TTagMananger).RemoveTag(Self);
-  inherited Destroy;
-end;
-
-procedure TPLCTag.RemoveDriver;
-begin
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(self);
-  PProtocolDriver := nil;
-end;
-
-procedure TPLCTag.SetProtocolDriver(p:TProtocolDriver);
-begin
-  //estou carregando meus parametros...
-  //if the tag is being loaded.
-  if ([csReading,csLoading]*ComponentState<>[]) then begin
-    FProtocoloOnLoading:=p;
-    Exit;
-  end;
-
-  if p=PProtocolDriver then exit;
-
-  //remove o driver antigo.
-  //removes the link with the old driver.
-  if (PProtocolDriver<>nil) then begin
-    //remove do scan do driver...
-    //removes the tag of the scan of the driver.
-    if PAutoRead then
-      PProtocolDriver.RemoveTag(self);
-    PProtocolDriver := nil;
-  end;
-
-  //seta o novo driver.
-  //sets the new protocol driver.
-  if (p<>nil) then begin
-    //adiciona no scan do driver...
-    //add the tag to the scan of protocolo driver.
-    PProtocolDriver := p;
-    GetNewProtocolTagSize;
-
-    if Self.PAutoRead then
-      P.AddTag(self);
-  end;
-end;
-
-procedure TPLCTag.TagCommandCallBack(Values:TArrayOfDouble; ValuesTimeStamp:TDateTime; TagCommand:TTagCommand; LastResult:TProtocolIOResult; Offset:LongInt);
-var
-  c, poffset:LongInt;
-begin
-  if (not FFirtsRead) and (TagCommand =tcScanRead) and (LastResult=ioOk) and (ValuesTimeStamp<>PValueTimeStamp) then begin
-    inc(FTotalTime, MilliSecondsBetween(ValuesTimeStamp,PValueTimeStamp));
-    inc(FReadCount);
-  end;
-
-  if TagCommand=tcScanRead then
-    PLastScanTimeStamp:=CrossNow;
-
-  if (LastResult=ioOk) then
-    FFirtsRead:=false;
-
-  if LastResult in [ioOk, ioNullDriver] then begin
-    if FCurrentWordSize>=FProtocolWordSize then begin
-      poffset := (FCurrentWordSize div FProtocolWordSize)*offset
-    end else begin
-      poffset := (OffSet * FCurrentWordSize) div FProtocolWordSize;
-    end;
-
-    for c := 0 to High(Values) do
-      if (c+poffset)<=High(FRawProtocolValues) then
-        FRawProtocolValues[c+poffset]:=Values[c];
-  end;
-end;
-
-procedure TPLCTag.SetAutoRead(v:Boolean);
-begin
-  if PAutoRead=v then exit;
-
-  PAutoRead := v;
-
-  if (PProtocolDriver<>nil) then begin
-    if v then begin
-      PLastScanTimeStamp:=CrossNow;
-      PProtocolDriver.AddTag(self)
-    end else
-      PProtocolDriver.RemoveTag(self);
-  end;
-end;
-
-procedure TPLCTag.SetAutoWrite(v:Boolean);
-begin
-  PAutoWrite := v;
-end;
-
-procedure TPLCTag.SetPLCHack(v:Cardinal);
-begin
-  if PRack=v then exit;
-
-  if (PProtocolDriver<>nil) and PAutoRead then
-    PProtocolDriver.RemoveTag(self);
-
-  PRack := v;
-
-  if (PProtocolDriver<>nil) and PAutoRead then
-    PProtocolDriver.AddTag(self);
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-end;
-
-procedure TPLCTag.SetPLCSlot(v:Cardinal);
-begin
-  if PSlot=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PSlot := v;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-end;
-
-procedure TPLCTag.SetPLCStation(v:Cardinal);
-begin
-  if PStation=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(self);
-
-  PStation := v;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(self);
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-end;
-
-procedure TPLCTag.SetMemFileDB(v:Cardinal);
-begin
-  if PFile_DB=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PFile_DB := v;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-end;
-
-procedure TPLCTag.SetMemAddress(v:Cardinal);
-begin
-  if PAddress=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PAddress := v;
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.SetMemSubElement(v:Cardinal);
-begin
-  if PSubElement=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PSubElement := v;
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.SetMemReadFunction(v:Cardinal);
-begin
-  if PReadFunction=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PReadFunction := v;
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.SetMemWriteFunction(v:Cardinal);
-begin
-  if PWriteFunction=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PWriteFunction := v;
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.SetPath(v:String);
-begin
-  if PPath=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PPath := v;
-
-  if ([csReading,csLoading]*ComponentState=[]) then
-    GetNewProtocolTagSize;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.SetRefreshTime(v:TRefreshTime);
-begin
-  if PUpdateTime=v then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  PUpdateTime := v;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.BuildTagRec(out tr:TTagRec; Count, OffSet:LongInt);
-begin
-  tr.Rack := PRack;
-  tr.Slot := PSlot;
-  tr.Station := PStation;
-  tr.File_DB := PFile_DB;
-  tr.Address := PAddress;
-  tr.SubElement := PSubElement;
-  Count := ifthen(Count=0, PSize, Count);
-
-  //calcula o tamanho real e o offset de acordo com
-  //o tipo de tag e tamanho da palavra de dados
-  //que está chegando do protocolo...
-  //
-  //calculate the real size and the real offset depending
-  //of the tag datatype and of protocol datatype.
-  if FCurrentWordSize>=FProtocolWordSize then begin
-    tr.Size   := (FCurrentWordSize div FProtocolWordSize)*Count;
-    tr.OffSet := (FCurrentWordSize div FProtocolWordSize)*offset
-  end else begin
-    tr.OffSet := (OffSet * FCurrentWordSize) div FProtocolWordSize;
-    tr.Size   := (((OffSet*FCurrentWordSize)+(Count*FCurrentWordSize)) div FProtocolWordSize) + ifthen((((OffSet*FCurrentWordSize)+(Count*FCurrentWordSize)) mod FProtocolWordSize)<>0,1,0) - tr.OffSet;
-  end;
-
-  tr.RealOffset:=OffSet;
-
-  tr.Path := PPath;
-  tr.ReadFunction := PReadFunction;
-  tr.WriteFunction := PWriteFunction;
-  tr.Retries := PRetries;
-  tr.UpdateTime := PUpdateTime;
-  tr.CallBack := TagCommandCallBack;
-end;
-
-procedure TPLCTag.ScanRead;
-begin
-
-end;
-
-procedure TPLCTag.GetNewProtocolTagSize;
-begin
-  if PProtocolDriver=nil then begin
-    FProtocolWordSize:=1;
-    exit;
-  end;
-
-  FProtocolWordSize:=PProtocolDriver.SizeOfTag(Self,False,FProtocolTagType);
-  if FTagType=pttDefault then
-    FCurrentWordSize := FProtocolWordSize;
-
-  UpdateTagSizeOnProtocol;
-end;
-
-function  TPLCTag.GetTagSizeOnProtocol:LongInt;
-begin
-  Result := Length(FRawProtocolValues);
-end;
-
-procedure TPLCTag.RebuildTagGUID;
-var
-  x:TGuid;
-begin
-  CreateGUID(x);
-  PGUID:=GUIDToString(x);
-end;
-
-function TPLCTag.IsMyCallBack(Cback:TTagCommandCallBack):Boolean;
-begin
-  Result:=(TMethod(Cback).Data=Self);
-end;
-
-procedure TPLCTag.Loaded;
-var
-  olddriver:TProtocolDriver;
-begin
-  inherited Loaded;
-
-  ProtocolDriver:=FProtocoloOnLoading;
-
-  if PProtocolDriver=nil then begin
-    olddriver:=PProtocolDriver;
-    PProtocolDriver:=TProtocolDriver(1);
-    FCurrentWordSize:=FProtocolWordSize;
-    UpdateTagSizeOnProtocol;
-    PProtocolDriver:=olddriver;
-  end else begin
-    UpdateTagSizeOnProtocol;
-  end;
-
-  with FTagManager as TTagMananger do
-    AddTag(Self);
-end;
-
-procedure TPLCTag.SetGUID(v:String);
-begin
-  if ComponentState*[csReading]=[] then exit;
-  PGUID:=v;
-end;
-
-procedure TPLCTag.SetTagType(newType:TTagType);
-begin
-  if newType=FTagType then exit;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.RemoveTag(Self);
-
-  FTagType:=newType;
-
-  if [csReading,csLoading]*ComponentState=[] then begin
-    UpdateTagSizeOnProtocol;
-    RebuildValues;
-  end;
-
-  if (PProtocolDriver<>nil) AND PAutoRead then
-    PProtocolDriver.AddTag(Self);
-end;
-
-procedure TPLCTag.UpdateTagSizeOnProtocol;
-var
-  Tamanho:LongInt;
-begin
-  if PProtocolDriver=nil then begin
-    exit;
-  end;
-
-  case FTagType of
-    pttDefault:
-      FCurrentWordSize := FProtocolWordSize;
-    pttShortInt, pttByte:
-      FCurrentWordSize:=8;
-    pttSmallInt, pttWord:
-      FCurrentWordSize:=16;
-    pttLongInt, pttDWord, pttFloat:
-      FCurrentWordSize:=32;
-    pttDouble:
-      FCurrentWordSize:=64;
-  end;
-
-  if FCurrentWordSize>=FProtocolWordSize then begin
-    Tamanho := (FCurrentWordSize div FProtocolWordSize)*PSize;
-  end else begin
-    Tamanho := ((PSize*FCurrentWordSize) div FProtocolWordSize) + ifthen(((PSize*FCurrentWordSize) mod FProtocolWordSize)<>0,1,0);
-  end;
-
-  if Length(FRawProtocolValues)<>Tamanho then
-    SetLength(FRawProtocolValues, Tamanho);
-end;
-
-procedure TPLCTag.SetSwapDWords(v:Boolean);
-begin
-  if v=FSwapDWords then exit;
-
-  FSwapDWords:=v;
-  RebuildValues;
-end;
-
-procedure TPLCTag.SetSwapWords(v:Boolean);
-begin
-  if v=FSwapWords then exit;
-
-  FSwapWords:=v;
-  RebuildValues;
-end;
-
-procedure TPLCTag.SetSwapBytes(v:Boolean);
-begin
-  if v=FSwapBytes then exit;
-
-  FSwapBytes:=v;
-  RebuildValues;
-end;
-
-procedure TPLCTag.RebuildValues;
-begin
-  TagCommandCallBack(FRawProtocolValues,ValueTimestamp,tcInternalUpdate,ioOk,0);
-end;
-
-function TPLCTag.PLCValuesToTagValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble;
-var
-  PtrByte, PtrByteWalker:PByte;
-  PtrWordWalker:PWord;
-  PtrDWordWalker:PDWord;
-  PtrDoubleWalker:PDouble;
-
-  AreaSize:LongInt;
-  AreaIdx:LongInt;
-  valueidx:LongInt;
-
-  DWordAux:Cardinal;
-  WordAux:Word;
-  ByteAux:Byte;
-
-  PtrByte1, PtrByte2:PByte;
-  PtrWord1, PtrWord2:PWord;
-  PtrDWord1, PtrDWord2:PDWord;
-
-  procedure ResetPointers;
-  begin
-    PtrByteWalker  :=PtrByte;
-    PtrWordWalker  :=PWord(PtrByte);
-    PtrDWordWalker :=PDWord(PtrByte);
-    PtrDoubleWalker:=PDouble(PtrByte);
-  end;
-
-  procedure AddToResult(ValueToAdd:Double; var Result:TArrayOfDouble);
-  var
-    i:LongInt;
-  begin
-    i:=Length(Result);
-    SetLength(Result,i+1);
-    Result[i]:=ValueToAdd;
-  end;
-
-begin
-  if (FTagType=pttDefault) OR
-     ((FProtocolTagType=ptByte) AND (FTagType=pttByte)) OR
-     ((FProtocolTagType=ptShortInt) AND (FTagType=pttShortInt)) OR
-     ((FProtocolTagType=ptWord) AND (FTagType=pttWord)) OR
-     ((FProtocolTagType=ptSmallInt) AND (FTagType=pttSmallInt)) OR
-     ((FProtocolTagType=ptDWord) AND (FTagType=pttDWord)) OR
-     ((FProtocolTagType=ptLongInt) AND (FTagType=pttLongInt)) OR
-     ((FProtocolTagType=ptFloat) AND (FTagType=pttFloat)) Or
-     ((FProtocolTagType=ptInt64) AND (FTagType=pttInt64)) Or
-     ((FProtocolTagType=ptQWord) AND (FTagType=pttQWord)) Or
-     ((FProtocolTagType=ptDouble) AND (FTagType=pttDouble))
-  then begin
-    Result:=Values;
-    exit;
-  end;
-
-  //calcula quantos bytes precisam ser alocados.
-  //calculate how many bytes must be allocated.
-  SetLength(Result,0);
-
-  case FProtocolTagType of
-    ptBit:
-      AreaSize := Length(Values) div 8;
-    ptByte, ptShortInt:
-      AreaSize := Length(Values);
-    ptWord, ptSmallInt:
-      AreaSize := Length(Values)*2;
-    ptDWord, ptLongInt, ptFloat:
-      AreaSize := Length(Values)*4;
-    ptQWord, ptInt64, ptDouble:
-      AreaSize := Length(Values)*8;
-  end;
-
-  GetMem(PtrByte, AreaSize);
-  ResetPointers;
-
-  //move os dados para area de trabalho.
-  //move data to work memory.
-  valueidx:=0;
-  case FProtocolTagType of
-    ptBit:
-       while valueidx<Length(Values) do begin
-         if Values[valueidx]<>0 then
-           PtrByteWalker^:=PtrByteWalker^ + (BitToDec(valueidx mod 8) AND $FF);
-
-         inc(valueidx);
-         if (valueidx mod 8)=0 then
-           inc(PtrByteWalker);
-       end;
-    ptByte, ptShortInt:
-       while valueidx<Length(Values) do begin
-         PtrByteWalker^:=trunc(Values[valueidx]) AND $FF;
-         inc(valueidx);
-         Inc(PtrByteWalker);
-       end;
-    ptWord, ptSmallInt:
-       while valueidx<Length(Values) do begin
-         PtrWordWalker^:=trunc(Values[valueidx]) AND $FFFF;
-         inc(valueidx);
-         Inc(PtrWordWalker);
-       end;
-    ptDWord, ptLongInt, ptFloat:
-       while valueidx<Length(Values) do begin
-         if FProtocolTagType=ptFloat then
-           PSingle(PtrDWordWalker)^:=Values[valueidx]
-         else
-           PtrDWordWalker^:=trunc(Values[valueidx]) AND $FFFFFFFF;
-
-         inc(valueidx);
-         Inc(PtrDWordWalker);
-       end;
-    ptQWord, ptInt64, ptDouble:
-      while valueidx<Length(Values) do begin
-          PtrDoubleWalker^:=Values[valueidx];
-
-        inc(valueidx);
-        Inc(PtrDoubleWalker);
-      end;
-  end;
-
-  ResetPointers;
-  AreaIdx:=0;
-
-  //faz as inversoes caso necessário e move os dados para o resultado
-  //swap bytes and words (if necessary)
-  case FTagType of
-    pttShortInt, pttByte: begin
-      inc(PtrByteWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-      inc(AreaIdx,(((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize));
-      while AreaIdx<AreaSize do begin
-        if FTagType=pttShortInt then
-          AddToResult(PShortInt(PtrByteWalker)^, Result)
-        else
-          AddToResult(PtrByteWalker^, Result);
-        inc(AreaIdx);
-        inc(PtrByteWalker);
-      end;
-    end;
-    pttSmallInt, pttWord: begin
-      inc(PtrWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-      inc(AreaIdx,(((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*2);
-      while AreaIdx<AreaSize do begin
-        if FSwapBytes then begin
-          PtrByte1:=PByte(PtrWordWalker);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-        end;
-        if FTagType=pttSmallInt then
-          AddToResult(PSmallInt(PtrWordWalker)^, Result)
-        else
-          AddToResult(PtrWordWalker^, Result);
-
-        inc(AreaIdx, 2);
-        inc(PtrWordWalker);
-      end;
-    end;
-    pttLongInt,
-    pttDWord,
-    pttFloat: begin
-      inc(PtrDWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-      inc(AreaIdx,       (((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*4);
-      while AreaIdx<AreaSize do begin
-
-        if FSwapWords or FSwapBytes then begin
-          PtrWord1:=PWord(PtrDWordWalker);
-          PtrWord2:=PtrWord1;
-          inc(PtrWord2);
-        end;
-
-        if FSwapWords then begin
-          WordAux:=PtrWord1^;
-          PtrWord1^:=PtrWord2^;
-          PtrWord2^:=WordAux;
-        end;
-
-        if FSwapBytes then begin
-          PtrByte1:=PByte(PtrWord1);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-
-          PtrByte1:=PByte(PtrWord2);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-        end;
-
-        case FTagType of
-          pttDWord:
-            AddToResult(PtrDWordWalker^, Result);
-          pttLongInt:
-            AddToResult(PLongInt(PtrDWordWalker)^, Result);
-          pttFloat: begin
-            if IsNan(PSingle(PtrDWordWalker)^) or IsInfinite(PSingle(PtrDWordWalker)^) then
-              SetExceptionMask([exInvalidOp, exDenormalized, {exZeroDivide,} exOverflow, exUnderflow, exPrecision]);
-
-            AddToResult(PSingle(PtrDWordWalker)^, Result);
-          end;
-        end;
-        inc(AreaIdx, 4);
-        inc(PtrDWordWalker);
-      end;
-    end;
-
-    pttDouble: begin
-      inc(PtrDoubleWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-      inc(AreaIdx,        (((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*8);
-      while AreaIdx<AreaSize do begin
-
-        if FSwapDWords then begin
-          //initialize Dword Pointers
-          PtrDWord1:=PDWord(PtrDoubleWalker);
-          PtrDWord2:=PtrDWord1;
-          inc(PtrDWord2);
-
-          //swap dwords
-          DWordAux  :=PtrDWord1^;
-          PtrDWord1^:=PtrDWord2^;
-          PtrDWord2^:=DWordAux;
-        end;
-
-        if FSwapWords then begin
-          //initializes DWord Pointers
-          PtrDWord1:=PDWord(PtrDoubleWalker);
-          PtrDWord2:=PtrDWord1;
-          inc(PtrDWord2);
-
-          //initializa first 2 word pointers
-          PtrWord1:=PWord(PtrDWord1);
-          PtrWord2:=PtrWord1;
-          inc(PtrWord2);
-
-          //swap words
-          WordAux:=PtrWord1^;
-          PtrWord1^:=PtrWord2^;
-          PtrWord2^:=WordAux;
-
-          //initializes next 2 word pointers
-          PtrWord1:=PWord(PtrDWord2);
-          PtrWord2:=PtrWord1;
-          inc(PtrWord2);
-
-          //swap words.
-          WordAux:=PtrWord1^;
-          PtrWord1^:=PtrWord2^;
-          PtrWord2^:=WordAux;
-        end;
-
-        if FSwapBytes then begin
-          //initializes DWord Pointers
-          PtrDWord1:=PDWord(PtrDoubleWalker);
-          PtrDWord2:=PtrDWord1;
-          inc(PtrDWord2);
-
-          //initializes first 2 word pointers
-          PtrWord1:=PWord(PtrDWord1);
-          PtrWord2:=PtrWord1;
-          inc(PtrWord2);
-
-          //initialize bytes 1 and 2
-          PtrByte1:=PByte(PtrWord1);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-
-          //swap bytes
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-
-          //initialize bytes 3 and 4
-          PtrByte1:=PByte(PtrWord2);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-
-          //swap bytes
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-
-          //initializes next 2 word pointers
-          PtrWord1:=PWord(PtrDWord2);
-          PtrWord2:=PtrWord1;
-          inc(PtrWord2);
-
-          //initialize bytes 5 and 6
-          PtrByte1:=PByte(PtrWord1);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-
-          //swap bytes
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-
-          //initialize bytes 7 and 8
-          PtrByte1:=PByte(PtrWord2);
-          PtrByte2:=PtrByte1;
-          inc(PtrByte2);
-
-          //swap bytes
-          ByteAux:=PtrByte1^;
-          PtrByte1^:=PtrByte2^;
-          PtrByte2^:=ByteAux;
-        end;
-
-        if IsNan(PDouble(PtrDoubleWalker)^) or IsInfinite(PDouble(PtrDoubleWalker)^) then
-          SetExceptionMask([exInvalidOp, exDenormalized, {exZeroDivide,} exOverflow, exUnderflow, exPrecision]);
-
-        AddToResult(PDouble(PtrDoubleWalker)^, Result);
-
-        inc(AreaIdx, 8);
-        inc(PtrDoubleWalker);
-      end;
-    end;
-  end;
-  Freemem(PtrByte);
-end;
-
-function TPLCTag.TagValuesToPLCValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble;
-var
-  PtrByte, PtrByteWalker:PByte;
-  PtrWordWalker:PWord;
-  PtrDWordWalker:PDWord;
-  PtrDoubleWalker:PDouble;
-
-  AreaSize:LongInt;
-  AreaIdx:LongInt;
-  valueidx:LongInt;
-
-  DWordAux:Cardinal;
-  WordAux :Word;
-  ByteAux :Byte;
-
-  PtrByte1, PtrByte2:PByte;
-  PtrWord1, PtrWord2:PWord;
-  PtrDWord1,PtrDWord2:PDWord;
-
-  bitaux:LongInt;
-
-  ProtocolOffSet, ProtocolSize:LongInt;
-
-  procedure ResetPointers;
-  begin
-    PtrByteWalker  :=PtrByte;
-    PtrWordWalker  :=PWord(PtrByte);
-    PtrDWordWalker :=PDWord(PtrByte);
-    PtrDoubleWalker:=PDouble(PtrByte);
-  end;
-
-  procedure AddToResult(ValueToAdd:Double; var Result:TArrayOfDouble);
-  var
-    i:LongInt;
-  begin
-    i:=Length(Result);
-    SetLength(Result,i+1);
-    Result[i]:=ValueToAdd;
-  end;
-
-begin
-  if (FTagType=pttDefault) OR
-     ((FProtocolTagType=ptByte) AND (FTagType=pttByte)) OR
-     ((FProtocolTagType=ptShortInt) AND (FTagType=pttShortInt)) OR
-     ((FProtocolTagType=ptWord) AND (FTagType=pttWord)) OR
-     ((FProtocolTagType=ptSmallInt) AND (FTagType=pttSmallInt)) OR
-     ((FProtocolTagType=ptDWord) AND (FTagType=pttDWord)) OR
-     ((FProtocolTagType=ptLongInt) AND (FTagType=pttLongInt)) OR
-     ((FProtocolTagType=ptFloat) AND (FTagType=pttFloat)) OR
-     ((FProtocolTagType=ptDouble) AND (FTagType=pttDouble))
-  then begin
-    Result:=Values;
-    exit;
-  end;
-
-  //calcula quantos bytes precisam ser alocados.
-  //calculate how many bytes must be allocated.
-  SetLength(Result,0);
-
-  if FCurrentWordSize>=FProtocolWordSize then begin
-    ProtocolSize   := (FCurrentWordSize div FProtocolWordSize)*Length(Values);
-    ProtocolOffSet := (FCurrentWordSize div FProtocolWordSize)*Offset
-  end else begin
-    ProtocolOffSet := (OffSet * FCurrentWordSize) div FProtocolWordSize;
-    ProtocolSize   := (((OffSet*FCurrentWordSize)+(Length(Values)*FCurrentWordSize)) div FProtocolWordSize) + ifthen((((OffSet*FCurrentWordSize)+(Length(Values)*FCurrentWordSize)) mod FProtocolWordSize)<>0,1,0) - ProtocolOffSet;
-  end;
-
-  case FProtocolTagType of
-    ptBit:
-      AreaSize := ProtocolSize div 8;
-    ptByte, ptShortInt:
-      AreaSize := ProtocolSize;
-    ptWord, ptSmallInt:
-      AreaSize := ProtocolSize*2;
-    ptDWord, ptLongInt, ptFloat:
-      AreaSize := ProtocolSize*4;
-    ptDouble:
-      AreaSize := ProtocolSize*8;
-  end;
-
-  GetMem(PtrByte, AreaSize);
-  ResetPointers;
-
-  //joga os valores puros lidos do driver para a area de memória para nao perder valores.
-  //move the raw values to the work memory to don't loose data.
-  valueidx:=0;
-  case FProtocolTagType of
-    ptByte, ptShortInt:
-       while valueidx<ProtocolSize do begin
-         PtrByteWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FF;
-         inc(valueidx);
-         Inc(PtrByteWalker);
-       end;
-    ptWord, ptSmallInt:
-       while valueidx<ProtocolSize do begin
-         PtrWordWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FFFF;
-         inc(valueidx);
-         Inc(PtrWordWalker);
-       end;
-    ptDWord, ptLongInt, ptFloat:
-       while valueidx<ProtocolSize do begin
-         if FProtocolTagType = ptFloat then
-           PSingle(PtrDWordWalker)^:=FRawProtocolValues[valueidx+ProtocolOffSet]
-         else begin
-           if FProtocolTagType = ptLongInt then
-             PLongInt(PtrDWordWalker)^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet])
-           else
-             PtrDWordWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FFFFFFFF;
-         end;
-         inc(valueidx);
-         Inc(PtrDWordWalker);
-       end;
-    ptDouble:
-       while valueidx<ProtocolSize do begin
-         PDouble(PtrDoubleWalker)^:=FRawProtocolValues[valueidx+ProtocolOffSet];
-         inc(valueidx);
-         Inc(PtrDoubleWalker);
-       end;
-  end;
-
-  ResetPointers;
-  valueidx:=0;
-  //move os dados para area de trabalho.
-  //move data to the work memory.
-  case FTagType of
-    pttByte, pttShortInt: begin
-       inc(PtrByteWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-       while valueidx<Length(Values) do begin
-         PtrByteWalker^:=trunc(Values[valueidx]) AND $FF;
-         inc(valueidx);
-         Inc(PtrByteWalker);
-       end;
-    end;
-    pttWord, pttSmallInt: begin
-       inc(PtrWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-       while valueidx<Length(Values) do begin
-         PtrWordWalker^:=trunc(Values[valueidx]) AND $FFFF;
-
-         if FSwapBytes then begin
-           PtrByte1:=PByte(PtrWordWalker);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-         end;
-
-         inc(valueidx);
-         Inc(PtrWordWalker);
-       end;
-    end;
-    pttDWord,
-    pttLongInt,
-    pttFloat: begin
-       inc(PtrDWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-       while valueidx<Length(Values) do begin
-
-         if FTagType=pttLongInt then
-           PLongInt(PtrDWordWalker)^:=trunc(Values[valueidx]);
-         if FTagType=pttDWord then
-           PtrDWordWalker^:=trunc(Values[valueidx]) AND $FFFFFFFF;
-         if FTagType=pttFloat then
-           PSingle(PtrDWordWalker)^:=Values[valueidx];
-
-         if FSwapWords or FSwapBytes then begin
-           PtrWord1:=PWord(PtrDWordWalker);
-           PtrWord2:=PtrWord1;
-           inc(PtrWord2);
-         end;
-
-         if FSwapWords then begin
-           WordAux:=PtrWord1^;
-           PtrWord1^:=PtrWord2^;
-           PtrWord2^:=WordAux;
-         end;
-
-         if FSwapBytes then begin
-           PtrByte1:=PByte(PtrWord1);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-
-           PtrByte1:=PByte(PtrWord2);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-         end;
-
-         inc(valueidx);
-         Inc(PtrDWordWalker);
-       end;
-    end;
-    pttDouble: begin
-       inc(PtrDoubleWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
-       while valueidx<Length(Values) do begin
-
-         PDouble(PtrDoubleWalker)^:=Values[valueidx];
-
-         if FSwapDWords then begin
-           //initialize Dword Pointers
-           PtrDWord1:=PDWord(PtrDoubleWalker);
-           PtrDWord2:=PtrDWord1;
-           inc(PtrDWord2);
-
-           //swap dwords
-           DWordAux  :=PtrDWord1^;
-           PtrDWord1^:=PtrDWord2^;
-           PtrDWord2^:=DWordAux;
-         end;
-
-         if FSwapWords then begin
-           //initializes DWord Pointers
-           PtrDWord1:=PDWord(PtrDoubleWalker);
-           PtrDWord2:=PtrDWord1;
-           inc(PtrDWord2);
-
-           //initializa first 2 word pointers
-           PtrWord1:=PWord(PtrDWord1);
-           PtrWord2:=PtrWord1;
-           inc(PtrWord2);
-
-           //swap words
-           WordAux:=PtrWord1^;
-           PtrWord1^:=PtrWord2^;
-           PtrWord2^:=WordAux;
-
-           //initializes next 2 word pointers
-           PtrWord1:=PWord(PtrDWord2);
-           PtrWord2:=PtrWord1;
-           inc(PtrWord2);
-
-           //swap words.
-           WordAux:=PtrWord1^;
-           PtrWord1^:=PtrWord2^;
-           PtrWord2^:=WordAux;
-         end;
-
-         if FSwapBytes then begin
-           //initializes DWord Pointers
-           PtrDWord1:=PDWord(PtrDoubleWalker);
-           PtrDWord2:=PtrDWord1;
-           inc(PtrDWord2);
-
-           //initializes first 2 word pointers
-           PtrWord1:=PWord(PtrDWord1);
-           PtrWord2:=PtrWord1;
-           inc(PtrWord2);
-
-           //initialize bytes 1 and 2
-           PtrByte1:=PByte(PtrWord1);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-
-           //swap bytes
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-
-           //initialize bytes 3 and 4
-           PtrByte1:=PByte(PtrWord2);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-
-           //swap bytes
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-
-           //initializes next 2 word pointers
-           PtrWord1:=PWord(PtrDWord2);
-           PtrWord2:=PtrWord1;
-           inc(PtrWord2);
-
-           //initialize bytes 5 and 6
-           PtrByte1:=PByte(PtrWord1);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-
-           //swap bytes
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-
-           //initialize bytes 7 and 8
-           PtrByte1:=PByte(PtrWord2);
-           PtrByte2:=PtrByte1;
-           inc(PtrByte2);
-
-           //swap bytes
-           ByteAux:=PtrByte1^;
-           PtrByte1^:=PtrByte2^;
-           PtrByte2^:=ByteAux;
-         end;
-
-         inc(valueidx);
-         Inc(PtrDoubleWalker);
-       end;
-    end;
-  end;
-
-  ResetPointers;
-  AreaIdx:=0;
-  //faz as inversoes e move para o resultado.
-  //swap bytes and words (if necessary).
-  case FProtocolTagType of
-    ptBit: begin
-       while AreaIdx<AreaSize do begin
-         bitaux := BitToDec(AreaIdx mod 8);
-         if (PtrByteWalker^ AND bitaux)=bitaux then
-           AddToResult(1, Result)
-         else
-           AddToResult(0, Result);
-
-         inc(AreaIdx);
-
-         if (AreaIdx mod 8)=0 then
-           inc(PtrByteWalker);
-       end;
-    end;
-    ptByte,
-    ptShortInt: begin
-      while AreaIdx<AreaSize do begin
-        if FProtocolTagType=ptShortInt then
-         AddToResult(PShortInt(PtrByteWalker)^, Result)
-        else
-          AddToResult(PtrByteWalker^, Result);
-        inc(AreaIdx);
-        inc(PtrByteWalker);
-      end;
-    end;
-    ptSmallInt,
-    ptWord: begin
-      while AreaIdx<AreaSize do begin
-        if FProtocolTagType=ptSmallInt then
-          AddToResult(PSmallInt(PtrWordWalker)^, Result)
-        else
-          AddToResult(PtrWordWalker^, Result);
-
-        inc(AreaIdx, 2);
-        inc(PtrWordWalker);
-      end;
-    end;
-    ptLongInt,
-    ptDWord,
-    ptFloat: begin
-      while AreaIdx<AreaSize do begin
-        case FProtocolTagType of
-          ptDWord:
-            AddToResult(PtrDWordWalker^, Result);
-          ptLongInt:
-            AddToResult(PLongInt(PtrDWordWalker)^, Result);
-          ptFloat:
-            AddToResult(PSingle(PtrDWordWalker)^, Result);
-        end;
-        inc(AreaIdx, 4);
-        inc(PtrDWordWalker);
-      end;
-    end;
-    ptDouble: begin
-      while AreaIdx<AreaSize do begin
-        AddToResult(PDouble(PtrDoubleWalker)^, Result);
-        inc(AreaIdx, 8);
-        inc(PtrDoubleWalker);
-      end;
-    end;
-  end;
-  Freemem(PtrByte);
-end;
-
-function TPLCTag.GetAvgUpdateRate:Double;
-begin
-  if FReadCount=0 then
-    Result:=-1
-  else
-    Result:=FTotalTime/FReadCount;
-end;
-
-function TPLCTag.RemainingMiliseconds:Int64;
-begin
-  Result:=PUpdateTime-MilliSecondsBetween(CrossNow,PValueTimeStamp);
-end;
-
-function TPLCTag.RemainingMilisecondsForNextScan:Int64;
-begin
-  Result:=PUpdateTime-MilliSecondsBetween(CrossNow,PLastScanTimeStamp);
-end;
-
-function TPLCTag.IsValidTag:Boolean;
-begin
-  Result:=PValidTag;
-end;
-
-procedure TPLCTag.SetTagValidity(TagValidity:Boolean);
-begin
-  PValidTag:=TagValidity;
-end;
-
-////////////////////////////////////////////////////////////////////////////////
-//PASCALSCADA TAG MANAGER.
-////////////////////////////////////////////////////////////////////////////////
-
-constructor TTagMananger.Create;
-begin
-  SetLength(ftags,0);
-end;
-
-destructor TTagMananger.Destroy;
-begin
-  if Length(ftags)>0 then
-    Raise Exception.Create(SCannotDestroyBecauseTagsStillManaged);
-end;
-
-procedure  TTagMananger.AddTag(Tag:TPLCTag);
-var
-  c,h:LongInt;
-begin
-  for c:=0 to High(ftags) do begin
-    if ftags[c]=Tag then exit;
-    if ftags[c].TagGUID=tag.TagGUID then begin
-      if Supports(Tag, IManagedTagInterface) then
-        (Tag as IManagedTagInterface).RebuildTagGUID
-      else
-        raise Exception.Create(SCannotRebuildTagID);
-    end;
-  end;
-  h:=Length(ftags);
-  SetLength(ftags,h+1);
-  ftags[h]:=Tag;
-end;
-
-procedure  TTagMananger.RemoveTag(Tag:TPLCTag);
-var
-  c,h:LongInt;
-  found:Boolean;
-begin
-  found:=false;
-  for c:=0 to High(ftags) do
-    if ftags[c]=Tag then begin
-      found:=true;
-      break;
-    end;
-
-  if found then begin
-    h:=High(ftags);
-    ftags[c]:=ftags[h];
-    SetLength(ftags,Max(0,h-1));
-  end;
-end;
-
-var
-  QPascalTagManager:TTagMananger;
-
-function GetTagManager:TTagMananger;
-begin
-  Result:=QPascalTagManager;
-end;
-
-initialization
-  QPascalTagManager:=TTagMananger.Create;
-finalization
-  QPascalTagManager.Destroy;
-end.
+{$i ../common/pscada_settings.inc}
+{$IFDEF PORTUGUES}
+{:
+@abstract(Implementa a base para Tags de comunicação.)
+@author(Fabio Luis Girardi fabio@pascalscada.com)
+}
+{$ELSE}
+{:
+@abstract(Unit that implements the base of an communication tag.)
+@author(Fabio Luis Girardi fabio@pascalscada.com)
+
+
+****************************** History  *******************************
+***********************************************************************
+08/2013 - Removed Extctrls unit
+@author(Juanjo Montero <juanjo.montero@gmail.com>)
+***********************************************************************
+}
+{$ENDIF}
+unit PLCTag;
+
+{$IFDEF FPC}
+{$mode delphi}
+{$ENDIF}
+
+interface
+
+uses
+  SysUtils, Classes, Tag, ProtocolDriver, ProtocolTypes, Math;
+
+type
+
+  {$IFDEF PORTUGUES}
+  {:
+  @abstract(Classe base para todos os tags de comunicação.)
+  @author(Fabio Luis Girardi fabio@pascalscada.com)
+  }
+  {$ELSE}
+  {:
+  @abstract(Base class of a communication tag.)
+  @author(Fabio Luis Girardi fabio@pascalscada.com)
+  }
+  {$ENDIF}
+  TPLCTag = class(TTag, IManagedTagInterface)
+  private
+    FRawProtocolValues:TArrayOfDouble;
+    FTotalTime, FReadCount:Int64;
+    FFirtsRead:Boolean;
+    FProtocoloOnLoading:TProtocolDriver;
+  private
+    procedure RebuildTagGUID;
+    function  GetTagSizeOnProtocol:LongInt;
+  protected
+    PValidTag,
+    PModified:Boolean;
+    function  IsMyCallBack(Cback:TTagCommandCallBack):Boolean; virtual;
+    procedure GetNewProtocolTagSize;
+    function RemainingMiliseconds:Int64; virtual;
+    function RemainingMilisecondsForNextScan:Int64; virtual;
+    function IsValidTag:Boolean; virtual;
+    procedure SetTagValidity(TagValidity:Boolean); virtual;
+    property Modified:Boolean read PModified;
+  protected
+    {$IFDEF PORTUGUES}
+    //: Referencia ao objeto gerenciador de tags.
+    {$ELSE}
+    //: Stores the tag manager.
+    {$ENDIF}
+    FTagManager:TObject;
+
+    {$IFDEF PORTUGUES}
+    //: A escrita do tag deve ser sincrona ou assincrona
+    {$ELSE}
+    //: Tells if the write command will be synchronous or asynchronous.
+    {$ENDIF}
+    FSyncWrites:Boolean;
+
+    {$IFDEF PORTUGUES}
+    //: Armazena o driver de protocolo usado para comunicação do tag.
+    {$ELSE}
+    //: Stores the protocol driver used by tag.
+    {$ENDIF}
+    PProtocolDriver:TProtocolDriver;
+
+    {$IFDEF PORTUGUES}
+    //: Data/Hora da última tentativa de leitura do valor do tag.
+    {$ELSE}
+    //: Date/time of the last scan read request of tag.
+    {$ENDIF}
+    PLastScanTimeStamp:TDateTime;
+
+    {$IFDEF PORTUGUES}
+    //: Data/Hora da última atualização do valor do tag.
+    {$ELSE}
+    //: Date/time of the last update of the tag value.
+    {$ENDIF}
+    PValueTimeStamp:TDateTime;
+
+    {$IFDEF PORTUGUES}
+    //: Armazena o resultado da última leitura @bold(sincrona) realizada pelo tag.
+    {$ELSE}
+    //: Stores the I/O result of the last synchronous read command done.
+    {$ENDIF}
+    PLastSyncReadCmdResult:TProtocolIOResult;
+
+    {$IFDEF PORTUGUES}
+    //: Armazena o resultado da última escrita @bold(sincrona) realizada pelo tag.
+    {$ELSE}
+    //: Stores the I/O result of the last synchronous write command done.
+    {$ENDIF}
+    PLastSyncWriteCmdResult:TProtocolIOResult;
+
+    {$IFDEF PORTUGUES}
+    //: Armazena o resultado da última leitura @bold(asincrona) realizada pelo tag.
+    {$ELSE}
+    //: Stores the I/O result of the last @bold(asynchronous) read command done.
+    {$ENDIF}
+    PLastASyncReadCmdResult:TProtocolIOResult;
+
+    {$IFDEF PORTUGUES}
+    //: Armazena o resultado da última escrita @bold(assincrona) realizada pelo tag.
+    {$ELSE}
+    //: Stores the I/O result of the last synchronous write command done.
+    {$ENDIF}
+    PLastASyncWriteCmdResult:TProtocolIOResult;
+
+    {$IFDEF PORTUGUES}
+    //: Tipo de dado retornado pelo protocolo.
+    {$ELSE}
+    //: Stores the datatype returned by the protocol driver.
+    {$ENDIF}
+    FProtocolTagType:TProtocolTagType;
+
+    {$IFDEF PORTUGUES}
+    //: Tipo de dado do tag
+    {$ELSE}
+    //: Datatype of the tag.
+    {$ENDIF}
+    FTagType:TTagType;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se as DWords de uma palavra double (64 bits) serão invertidas
+    {$ELSE}
+    //: Tells if the DWords of an Double (64 bits) will be swaped.
+    {$ENDIF}
+    FSwapDWords:Boolean;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se as words da palavra (LongInt, cardinal e float) serão invertidas
+    {$ELSE}
+    //: Tells if the words of an DWORD (LongInt,cardinal and float) will be swaped.
+    {$ENDIF}
+    FSwapWords:Boolean;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se os bytes da WORD (SmallInt, Word) serão invertidas.
+    {$ELSE}
+    //: Tells if the bytes of an WORD (SmallInt, Word) will be swaped.
+    {$ENDIF}
+    FSwapBytes:Boolean;
+
+    {$IFDEF PORTUGUES}
+    //: Tamanho da palavra retornada pelo protocolo e em uso pelo tag, em bits.
+    {$ELSE}
+    //: Word size returned by the protocol and current word size of the tag in bits.
+    {$ENDIF}
+    FProtocolWordSize,
+    FCurrentWordSize:Byte;
+
+    {$IFDEF PORTUGUES}
+    //: Valores vindos do PLC são convertidos para o tipo de dados configurado no tag.
+    {$ELSE}
+    //: Convert values comming from the PLC to the datatype of the tag.
+    {$ENDIF}
+    function PLCValuesToTagValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble; virtual;
+
+    {$IFDEF PORTUGUES}
+    //: Valores vindo do tag são convertidos para o tipo de aceito pelo driver.
+    {$ELSE}
+    //: Convert values of the datatype of the tag to the datatype of the driver.
+    {$ENDIF}
+    function TagValuesToPLCValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble; virtual;
+
+    {$IFDEF PORTUGUES}
+    //: Retorna a média de tempo que o tag é atualizado.
+    {$ELSE}
+    //: Average scan update rate.
+    {$ENDIF}
+    function GetAvgUpdateRate:Double;
+
+    {$IFDEF PORTUGUES}
+    //: Retorna o tamanho real do tag.
+    {$ELSE}
+    //: Returns the real size of the tag.
+    {$ENDIF}
+    procedure UpdateTagSizeOnProtocol; virtual;
+
+    {$IFDEF PORTUGUES}
+    //: Recompila os valores do tag.
+    {$ELSE}
+    //: Rebuild the tag values.
+    {$ENDIF}
+    procedure RebuildValues; virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Habilita/Desabilita o swap de DWords. Valido somente se o tipo de dados do
+    seu tag for pttDouble.
+    @param(v Boolean: @true habilita, @false desabilita.)
+    }
+    {$ELSE}
+    {:
+    Enable/disables the swap of DWords. Valid only if your tag type is pttDouble.
+    @param(v Boolean: @true enables the swap, @false disables.)
+    }
+    {$ENDIF}
+    procedure SetSwapDWords(v:Boolean); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Habilita/Desabilita o swap de words.
+    @param(v Boolean: @true habilita, @false desabilita.)
+    }
+    {$ELSE}
+    {:
+    Enable/disables the swap of words.
+    @param(v Boolean: @true enables the swap, @false disables.)
+    }
+    {$ENDIF}
+    procedure SetSwapWords(v:Boolean); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Habilita/Desabilita o swap de bytes.
+    @param(v Boolean: @true habilita, @false desabilita.)
+    }
+    {$ELSE}
+    {:
+    Enable/disables the swap of bytes.
+    @param(v Boolean: @true enables the swap, @false disables.)
+    }
+    {$ENDIF}
+    procedure SetSwapBytes(v:Boolean); virtual;
+
+    {$IFDEF PORTUGUES}
+    //: Define uma identificação unica do tag. Chamada pelo Tag Manager.
+    {$ELSE}
+    //: Sets a new unique tag identification. Called by the Tag Manager.
+    {$ENDIF}
+    procedure SetGUID(v:String);
+
+    //##########################################################################
+
+    {$IFDEF PORTUGUES}
+    {:
+    Habilita/Desabilita a leitura automática do tag.
+    @param(v Boolean: @true habilita, @false desabilita.)
+    }
+    {$ELSE}
+    {:
+    Enable/disables the automatic tag read.
+    @param(v Boolean: @true enables, @false disables (manual).)
+    }
+    {$ENDIF}
+    procedure SetAutoRead(v:Boolean); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Habilita/Desabilita a escrita automática de valores do tag.
+    @param(v Boolean: @true automatico, @false manual.)
+    }
+    {$ELSE}
+    {:
+    Enable/disables the automatic write of values of the tag.
+    @param(v Boolean: @true automatic, @false manual.)
+    }
+    {$ENDIF}
+    procedure SetAutoWrite(v:Boolean); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o endereço da memória sendo mapeada.
+    @param(v Cardinal. Endereço da memória sendo mapeada.)
+    }
+    {$ELSE}
+    {:
+    Sets the memory address.
+    @param(v Cardinal. The memory address.)
+    }
+    {$ENDIF}
+    procedure SetMemAddress(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o Arquivo/DB que contem a memória sendo mapeada.
+    @param(v Cardinal. Arquivo/DB que a memória mapeada pertence.)
+    }
+    {$ELSE}
+    {:
+    Sets the File/DB that contains the mapped memory.
+    @param(v Cardinal. File/DB number of your memory.)
+    }
+    {$ENDIF}
+    procedure SetMemFileDB(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o função do driver para leitura da memória.
+    @param(v Cardinal. Função do driver usada para leitura da memória.)
+    }
+    {$ELSE}
+    {:
+    Sets the function to be used to read the memory.
+    @param(v Cardinal. Function number to read the memory.)
+    }
+    {$ENDIF}
+    procedure SetMemReadFunction(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o função do driver para escrita de valores da memória.
+    @param(v Cardinal. Função do driver usada para escrita de valores da memória.)
+    }
+    {$ELSE}
+    {:
+    Sets the function to be used to write values on memory.
+    @param(v Cardinal. Function number to write values on memory.)
+    }
+    {$ENDIF}
+    procedure SetMemWriteFunction(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o sub-endereço da memória sendo mapeada.
+    @param(v Cardinal. Sub-endereço da memória sendo mapeada.)
+    }
+    {$ELSE}
+    {:
+    Sets the sub-element of the memory being mapped.
+    @param(v Cardinal. The sub-element number of the memory being mapped.)
+    }
+    {$ENDIF}
+    procedure SetMemSubElement(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o endereço longo (texto) do tag.
+    @param(v String. Endereço longo (texto) do tag.)
+    }
+    {$ELSE}
+    {:
+    Sets the long address (text) of the tag.
+    @param(v String. The long address of the tag (text).)
+    }
+    {$ENDIF}
+    procedure SetPath(v:String); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o endereço do equipamento que contem a memória sendo mapeada.
+    @param(v Cardinal. Endereço do equipamento onde está a memória.)
+    }
+    {$ELSE}
+    {:
+    Sets the address of device being mapped.
+    @param(v Cardinal. The device address.)
+    }
+    {$ENDIF}
+    procedure SetPLCStation(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o Rack do equipamento que contem a memória sendo mapeada.
+    @param(v Cardinal. Hack do equipamento onde está a memória.)
+    }
+    {$ELSE}
+    {:
+    Sets the Rack of the device being mapped.
+    @param(v Cardinal. The device Rack number.)
+    }
+    {$ENDIF}
+    procedure SetPLCHack(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o Slot do equipamento que contem a memória sendo mapeada.
+    @param(v Cardinal. Slot do equipamento onde está a memória.)
+    }
+    {$ELSE}
+    {:
+    Sets the Slot number of the device being mapped.
+    @param(v Cardinal. The Slot number.)
+    }
+    {$ENDIF}
+    procedure SetPLCSlot(v:Cardinal); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o tempo de varredura (atualização) da memória em milisegundos.
+    @param(v Cardinal. Tempo em milisegundos que a memória deve ser atualizada.)
+    }
+    {$ELSE}
+    {:
+    Sets the scan rate of the tag in milliseconds.
+    @param(v Cardinal. Scan rate in milliseconds.)
+    }
+    {$ENDIF}
+    procedure SetRefreshTime(v:TRefreshTime); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Seta o driver de protocolo usado para a comunicação dessa memória.
+    @param(p TProtocolDriver. Componente de protocolo usado para comunicação do tag.)
+    }
+    {$ELSE}
+    {:
+    Sets the protocol driver to be used the read/write values on device.
+    @param(p TProtocolDriver. The protocol driver to be used to read/write values of your device.)
+    }
+    {$ENDIF}
+    procedure SetProtocolDriver(p:TProtocolDriver); virtual;
+
+    {$IFDEF PORTUGUES}
+    //: Configura o novo tipo de dado do tag. @seealso(TTagType)
+    {$ELSE}
+    //: Sets the datatype of the tag. @seealso(TTagType)
+    {$ENDIF}
+    procedure SetTagType(newType:TTagType); virtual;
+
+    //##########################################################################
+
+
+    {$IFDEF PORTUGUES}
+    //: Procedimento chamado pelo driver de protocolo para atualização de valores do tag.
+    {$ELSE}
+    //: Procedure called by the protocol driver to update tag values.
+    {$ENDIF}
+    procedure TagCommandCallBack(Values:TArrayOfDouble; ValuesTimeStamp:TDateTime; TagCommand:TTagCommand; LastResult:TProtocolIOResult; Offset:LongInt); virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Compila uma estrutura com as informações do tag.
+    @seealso(TTagRec)
+    }
+    {$ELSE}
+    {:
+    Returns a structure with all informations about the tag.
+    @seealso(TTagRec)
+    }
+    {$ENDIF}
+    procedure BuildTagRec(out tr:TTagRec; Count, OffSet:LongInt);
+
+    {$IFDEF PORTUGUES}
+    //: Faz uma leitura @bold(assincrona) do tag.
+    {$ELSE}
+    //: Request a update of tag values.
+    {$ENDIF}
+    procedure ScanRead; virtual;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Escreve valores de maneira @bold(assincrona).
+    @param(Values TArrayOfDouble: Array de valores a serem escritos.)
+    @param(Count Cardinal: Quantidade de valores a serem escritos.)
+    @param(Offset Cardinal: A partir de qual elemento deve comecar a escrita.)
+    }
+    {$ELSE}
+    {:
+    Write values of the tag on your device @bold(asynchronous).
+    @param(Values TArrayOfDouble: Array of values to be written.)
+    @param(Count Cardinal: How many values will be written.)
+    @param(Offset Cardinal: Tells offset after the address where the values will be written.)
+    }
+    {$ENDIF}
+    procedure ScanWrite(Values:TArrayOfDouble; Count, Offset:Cardinal); virtual; abstract;
+
+    {$IFDEF PORTUGUES}
+    //: Faz uma leitura @bold(sincrona) do valor do tag.
+    {$ELSE}
+    //: Request a @bold(synchronous) read of the tag value.
+    {$ENDIF}
+    procedure Read; virtual; abstract;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Escreve valores de maneira @bold(sincrona).
+    @param(Values TArrayOfDouble: Array de valores a serem escritos.)
+    @param(Count Cardinal: Quantidade de valores a serem escritos.)
+    @param(Offset Cardinal: A partir de qual elemento deve comecar a escrita.)
+    }
+    {$ELSE}
+    {:
+    Write values of the tag on your device @bold(synchronous).
+    @param(Values TArrayOfDouble: Array of values to be written.)
+    @param(Count Cardinal: How many values will be written.)
+    @param(Offset Cardinal: Tells offset after the address where the values will be written.)
+    }
+    {$ENDIF}
+    procedure Write(Values:TArrayOfDouble; Count, Offset:Cardinal); overload; virtual; abstract; 
+
+    //: @exclude
+    procedure Loaded; override;
+
+    //: @seealso(TTag.AutoRead)
+    property AutoRead write SetAutoRead default true;
+    //: @seealso(TTag.AutoWrite)
+    property AutoWrite write SetAutoWrite default true;
+    //: @seealso(TTag.CommReadErrors)
+    property CommReadErrors default 0;
+    //: @seealso(TTag.CommReadsOK)
+    property CommReadsOK nodefault;
+    //: @seealso(TTag.CommWriteErrors)
+    property CommWriteErrors default 0;
+    //: @seealso(TTag.CommWritesOK)
+    property CommWritesOk nodefault;
+    //: @seealso(TTag.PLCRack)
+    property PLCRack write SetPLCHack nodefault;
+    //: @seealso(TTag.PLCSlot)
+    property PLCSlot write SetPLCSlot nodefault;
+    //: @seealso(TTag.PLCStation)
+    property PLCStation write SetPLCStation nodefault;
+    //: @seealso(TTag.MemFile_DB)
+    property MemFile_DB write SetMemFileDB nodefault;
+    //: @seealso(TTag.MemAddress)
+    property MemAddress write SetMemAddress nodefault;
+    //: @seealso(TTag.MemSubElement)
+    property MemSubElement write SetMemSubElement nodefault;
+    //: @seealso(TTag.MemReadFunction)
+    property MemReadFunction write SetMemReadFunction nodefault;
+    //: @seealso(TTag.MemWriteFunction)
+    property MemWriteFunction write SetMemWriteFunction nodefault;
+    //: @seealso(TTag.Retries)
+    property Retries write PRetries default 1;
+    //: @seealso(TTag.RefreshTime)
+    property RefreshTime write SetRefreshTime stored false;
+    //: @seealso(TTag.ScanRate)
+    property UpdateTime write SetRefreshTime default 1000;
+    //: @seealso(TTag.Size)
+    property Size nodefault;
+    //: @seealso(TTag.LongAddress)
+    property LongAddress write SetPath nodefault;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Driver de protocolo usado para comunicação do mapeamento de memória.
+    @seealso(TProtocolDriver)
+    }
+    {$ELSE}
+    {:
+    Protocol driver used by tag to read/write values on your device.
+    @seealso(TProtocolDriver)
+    }
+    {$ENDIF}
+    property ProtocolDriver:TProtocolDriver read PProtocolDriver write SetProtocolDriver;
+
+    {$IFDEF PORTUGUES}
+    //: Data/Hora em que o valor do tag foi atualizado.
+    {$ELSE}
+    //: Date/time of the last update of the tag value.
+    {$ENDIF}
+    property ValueTimestamp:TDateTime read PValueTimeStamp;
+
+    {$IFDEF PORTUGUES}
+    //: Caso @true, a escrita de valoes do tag vai ser @bold(sincrona).
+    {$ELSE}
+    //: If @true, the write of values will be @bold(synchronous).
+    {$ENDIF}
+    property SyncWrites:Boolean read FSyncWrites write FSyncWrites default false ;
+
+    {$IFDEF PORTUGUES}
+    //: Tipo do tag.
+    {$ELSE}
+    //: Datatype of the tag.
+    {$ENDIF}
+    property TagType:TTagType read FTagType write SetTagType default pttDefault;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se os bytes da WORD (SmallInt, Word) serão invertidas.
+    {$ELSE}
+    //: Tells if the bytes of an WORD (SmallInt, Word) will be swaped.
+    {$ENDIF}
+    property SwapBytes:Boolean read FSwapBytes write SetSwapBytes default false;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se as words da palavra formada serão invertidas.
+    {$ELSE}
+    //: Tells if the words of an DWORD (LongInt, cardinal and float) will be swaped.
+    {$ENDIF}
+    property SwapWords:Boolean read FSwapWords write SetSwapWords default false;
+
+    {$IFDEF PORTUGUES}
+    //: Diz se as DWords de uma um Double (flutuante de 64 bits) serão invertidas.
+    {$ELSE}
+    //: Tells if the DWords of an Double (float 64 bits) will be swaped.
+    {$ENDIF}
+    property SwapDWords:Boolean read FSwapDWords write SetSwapDWords default false;
+
+    {$IFDEF PORTUGUES}
+    //: Informa ao driver o tamanho real do tag no driver de protocolo.
+    {$ELSE}
+    //: Tells the real size of the tag on protocol driver.
+    {$ENDIF}
+    property TagSizeOnProtocol:LongInt read GetTagSizeOnProtocol;
+
+    {$IFDEF PORTUGUES}
+    //: Informa a média de milisegundos que o tag está sendo atualizado.
+    {$ELSE}
+    //: Average update rate of the tag.
+    {$ENDIF}
+    property AvgUpdateRate:Double read GetAvgUpdateRate;
+  public
+    //: @exclude
+    constructor Create(AOwner:TComponent); override;
+    //: @exclude
+    destructor Destroy; override;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Método chamado pelo driver de protocolo que elimina referências a ele.
+    }
+    {$ELSE}
+    //: Called when the protocol driver is being destroyed.
+    {$ENDIF}
+    procedure RemoveDriver;
+  published
+
+    {$IFDEF PORTUGUES}
+    {:
+    Exibe o GUID do tag. Somente leitura.
+    }
+    {$ELSE}
+    //: Tells the unique tag identification.
+    {$ENDIF}
+    property TagGUID:String read PGUID write SetGUID;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Resultado da última leitura @bold(sincrona) realizada pelo tag.
+    @seealso(TProtocolIOResult)
+    }
+    {$ELSE}
+    {:
+    I/O result of the last @bold(synchronous) read done.
+    @seealso(TProtocolIOResult)
+    }
+    {$ENDIF}
+    property LastSyncReadStatus:TProtocolIOResult Read PLastSyncReadCmdResult;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Resultado da última escrita @bold(sincrona) realizada pelo tag.
+    @seealso(TProtocolIOResult)
+    }
+    {$ELSE}
+    {:
+    I/O result of the last @bold(synchronous) write done.
+    @seealso(TProtocolIOResult)
+    }
+    {$ENDIF}
+    property LastSyncWriteStatus:TProtocolIOResult Read PLastSyncWriteCmdResult;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Resultado da última leitura @bold(asincrona) realizada pelo tag.
+    @seealso(TProtocolIOResult)
+    }
+    {$ELSE}
+    {:
+    I/O result of the last @bold(asynchronous) read done.
+    @seealso(TProtocolIOResult)
+    }
+    {$ENDIF}
+    property LastASyncReadStatus:TProtocolIOResult Read PLastASyncReadCmdResult;
+
+    {$IFDEF PORTUGUES}
+    {:
+    Resultado da última escrita @bold(asincrona) realizada pelo tag.
+    @seealso(TProtocolIOResult)
+    }
+    {$ELSE}
+    {:
+    I/O result of the last @bold(asynchronous) write done.
+    @seealso(TProtocolIOResult)
+    }
+    {$ENDIF}
+    property LastASyncWriteStatus:TProtocolIOResult Read PLastASyncWriteCmdResult;
+  end;
+
+  TManagedTags = array of TPLCTag;
+  TTagMananger=class
+  private
+    ftags:TManagedTags;
+  public
+    constructor Create;
+    destructor Destroy; override;
+    procedure AddTag(Tag:TPLCTag);
+    procedure RemoveTag(Tag:TPLCTag);
+  end;
+
+  function GetTagManager:TTagMananger;
+
+implementation
+
+uses pSCADA_utils,
+     pSCADA_Strings,
+     pSCADA_crossdatetime,
+     dateutils;
+
+constructor TPLCTag.Create(AOwner:TComponent);
+begin
+  inherited Create(AOwner);
+  PValueTimeStamp:=CrossNow;
+  PAutoRead:=true;
+  PAutoWrite:=true;
+  PValidTag:=false;
+  PCommReadErrors:=0;
+  PCommReadOK:=0;
+  PCommWriteErrors:=0;
+  PCommWriteOk:=0;
+  PRack:=0;
+  PSlot:=0;
+  PStation:=0;
+  PFile_DB:=0;
+  PAddress:=0;
+  PSubElement:=0;
+  PSize:=1;
+  PPath:='';
+  PReadFunction:=0;
+  PWriteFunction:=0;
+  PRetries:=1;
+  PUpdateTime:=1000;
+  FTagType:=pttDefault;
+  FSwapBytes:=false;
+  FSwapWords:=false;
+  FSwapDWords:=false;
+  FCurrentWordSize:=1;
+  FProtocolWordSize:=1;
+  FFirtsRead:=true;
+  FTotalTime:=0;
+  PProtocolDriver:=nil;
+  FTagManager := GetTagManager;
+  SetLength(FRawProtocolValues,1);
+end;
+
+destructor TPLCTag.Destroy;
+begin
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(self);
+  PProtocolDriver := nil;
+  (FTagManager as TTagMananger).RemoveTag(Self);
+  inherited Destroy;
+end;
+
+procedure TPLCTag.RemoveDriver;
+begin
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(self);
+  PProtocolDriver := nil;
+end;
+
+procedure TPLCTag.SetProtocolDriver(p:TProtocolDriver);
+begin
+  //estou carregando meus parametros...
+  //if the tag is being loaded.
+  if ([csReading,csLoading]*ComponentState<>[]) then begin
+    FProtocoloOnLoading:=p;
+    Exit;
+  end;
+
+  if p=PProtocolDriver then exit;
+
+  //remove o driver antigo.
+  //removes the link with the old driver.
+  if (PProtocolDriver<>nil) then begin
+    //remove do scan do driver...
+    //removes the tag of the scan of the driver.
+    if PAutoRead then
+      PProtocolDriver.RemoveTag(self);
+    PProtocolDriver := nil;
+  end;
+
+  //seta o novo driver.
+  //sets the new protocol driver.
+  if (p<>nil) then begin
+    //adiciona no scan do driver...
+    //add the tag to the scan of protocolo driver.
+    PProtocolDriver := p;
+    GetNewProtocolTagSize;
+
+    if Self.PAutoRead then
+      P.AddTag(self);
+  end;
+end;
+
+procedure TPLCTag.TagCommandCallBack(Values:TArrayOfDouble; ValuesTimeStamp:TDateTime; TagCommand:TTagCommand; LastResult:TProtocolIOResult; Offset:LongInt);
+var
+  c, poffset:LongInt;
+begin
+  if (not FFirtsRead) and (TagCommand =tcScanRead) and (LastResult=ioOk) and (ValuesTimeStamp<>PValueTimeStamp) then begin
+    inc(FTotalTime, MilliSecondsBetween(ValuesTimeStamp,PValueTimeStamp));
+    inc(FReadCount);
+  end;
+
+  if TagCommand=tcScanRead then
+    PLastScanTimeStamp:=CrossNow;
+
+  if (LastResult=ioOk) then
+    FFirtsRead:=false;
+
+  if LastResult in [ioOk, ioNullDriver] then begin
+    if FCurrentWordSize>=FProtocolWordSize then begin
+      poffset := (FCurrentWordSize div FProtocolWordSize)*offset
+    end else begin
+      poffset := (OffSet * FCurrentWordSize) div FProtocolWordSize;
+    end;
+
+    for c := 0 to High(Values) do
+      if (c+poffset)<=High(FRawProtocolValues) then
+        FRawProtocolValues[c+poffset]:=Values[c];
+  end;
+end;
+
+procedure TPLCTag.SetAutoRead(v:Boolean);
+begin
+  if PAutoRead=v then exit;
+
+  PAutoRead := v;
+
+  if (PProtocolDriver<>nil) then begin
+    if v then begin
+      PLastScanTimeStamp:=CrossNow;
+      PProtocolDriver.AddTag(self)
+    end else
+      PProtocolDriver.RemoveTag(self);
+  end;
+end;
+
+procedure TPLCTag.SetAutoWrite(v:Boolean);
+begin
+  PAutoWrite := v;
+end;
+
+procedure TPLCTag.SetPLCHack(v:Cardinal);
+begin
+  if PRack=v then exit;
+
+  if (PProtocolDriver<>nil) and PAutoRead then
+    PProtocolDriver.RemoveTag(self);
+
+  PRack := v;
+
+  if (PProtocolDriver<>nil) and PAutoRead then
+    PProtocolDriver.AddTag(self);
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+end;
+
+procedure TPLCTag.SetPLCSlot(v:Cardinal);
+begin
+  if PSlot=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PSlot := v;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+end;
+
+procedure TPLCTag.SetPLCStation(v:Cardinal);
+begin
+  if PStation=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(self);
+
+  PStation := v;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(self);
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+end;
+
+procedure TPLCTag.SetMemFileDB(v:Cardinal);
+begin
+  if PFile_DB=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PFile_DB := v;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+end;
+
+procedure TPLCTag.SetMemAddress(v:Cardinal);
+begin
+  if PAddress=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PAddress := v;
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.SetMemSubElement(v:Cardinal);
+begin
+  if PSubElement=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PSubElement := v;
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.SetMemReadFunction(v:Cardinal);
+begin
+  if PReadFunction=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PReadFunction := v;
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.SetMemWriteFunction(v:Cardinal);
+begin
+  if PWriteFunction=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PWriteFunction := v;
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.SetPath(v:String);
+begin
+  if PPath=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PPath := v;
+
+  if ([csReading,csLoading]*ComponentState=[]) then
+    GetNewProtocolTagSize;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.SetRefreshTime(v:TRefreshTime);
+begin
+  if PUpdateTime=v then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  PUpdateTime := v;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.BuildTagRec(out tr:TTagRec; Count, OffSet:LongInt);
+begin
+  tr.Rack := PRack;
+  tr.Slot := PSlot;
+  tr.Station := PStation;
+  tr.File_DB := PFile_DB;
+  tr.Address := PAddress;
+  tr.SubElement := PSubElement;
+  Count := ifthen(Count=0, PSize, Count);
+
+  //calcula o tamanho real e o offset de acordo com
+  //o tipo de tag e tamanho da palavra de dados
+  //que está chegando do protocolo...
+  //
+  //calculate the real size and the real offset depending
+  //of the tag datatype and of protocol datatype.
+  if FCurrentWordSize>=FProtocolWordSize then begin
+    tr.Size   := (FCurrentWordSize div FProtocolWordSize)*Count;
+    tr.OffSet := (FCurrentWordSize div FProtocolWordSize)*offset
+  end else begin
+    tr.OffSet := (OffSet * FCurrentWordSize) div FProtocolWordSize;
+    tr.Size   := (((OffSet*FCurrentWordSize)+(Count*FCurrentWordSize)) div FProtocolWordSize) + ifthen((((OffSet*FCurrentWordSize)+(Count*FCurrentWordSize)) mod FProtocolWordSize)<>0,1,0) - tr.OffSet;
+  end;
+
+  tr.RealOffset:=OffSet;
+
+  tr.Path := PPath;
+  tr.ReadFunction := PReadFunction;
+  tr.WriteFunction := PWriteFunction;
+  tr.Retries := PRetries;
+  tr.UpdateTime := PUpdateTime;
+  tr.CallBack := TagCommandCallBack;
+end;
+
+procedure TPLCTag.ScanRead;
+begin
+
+end;
+
+procedure TPLCTag.GetNewProtocolTagSize;
+begin
+  if PProtocolDriver=nil then begin
+    FProtocolWordSize:=1;
+    exit;
+  end;
+
+  FProtocolWordSize:=PProtocolDriver.SizeOfTag(Self,False,FProtocolTagType);
+  if FTagType=pttDefault then
+    FCurrentWordSize := FProtocolWordSize;
+
+  UpdateTagSizeOnProtocol;
+end;
+
+function  TPLCTag.GetTagSizeOnProtocol:LongInt;
+begin
+  Result := Length(FRawProtocolValues);
+end;
+
+procedure TPLCTag.RebuildTagGUID;
+var
+  x:TGuid;
+begin
+  CreateGUID(x);
+  PGUID:=GUIDToString(x);
+end;
+
+function TPLCTag.IsMyCallBack(Cback:TTagCommandCallBack):Boolean;
+begin
+  Result:=(TMethod(Cback).Data=Self);
+end;
+
+procedure TPLCTag.Loaded;
+var
+  olddriver:TProtocolDriver;
+begin
+  inherited Loaded;
+
+  ProtocolDriver:=FProtocoloOnLoading;
+
+  if PProtocolDriver=nil then begin
+    olddriver:=PProtocolDriver;
+    PProtocolDriver:=TProtocolDriver(1);
+    FCurrentWordSize:=FProtocolWordSize;
+    UpdateTagSizeOnProtocol;
+    PProtocolDriver:=olddriver;
+  end else begin
+    UpdateTagSizeOnProtocol;
+  end;
+
+  with FTagManager as TTagMananger do
+    AddTag(Self);
+end;
+
+procedure TPLCTag.SetGUID(v:String);
+begin
+  if ComponentState*[csReading]=[] then exit;
+  PGUID:=v;
+end;
+
+procedure TPLCTag.SetTagType(newType:TTagType);
+begin
+  if newType=FTagType then exit;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.RemoveTag(Self);
+
+  FTagType:=newType;
+
+  if [csReading,csLoading]*ComponentState=[] then begin
+    UpdateTagSizeOnProtocol;
+    RebuildValues;
+  end;
+
+  if (PProtocolDriver<>nil) AND PAutoRead then
+    PProtocolDriver.AddTag(Self);
+end;
+
+procedure TPLCTag.UpdateTagSizeOnProtocol;
+var
+  Tamanho:LongInt;
+begin
+  if PProtocolDriver=nil then begin
+    exit;
+  end;
+
+  case FTagType of
+    pttDefault:
+      FCurrentWordSize := FProtocolWordSize;
+    pttShortInt, pttByte:
+      FCurrentWordSize:=8;
+    pttSmallInt, pttWord:
+      FCurrentWordSize:=16;
+    pttLongInt, pttDWord, pttFloat:
+      FCurrentWordSize:=32;
+    pttDouble:
+      FCurrentWordSize:=64;
+  end;
+
+  if FCurrentWordSize>=FProtocolWordSize then begin
+    Tamanho := (FCurrentWordSize div FProtocolWordSize)*PSize;
+  end else begin
+    Tamanho := ((PSize*FCurrentWordSize) div FProtocolWordSize) + ifthen(((PSize*FCurrentWordSize) mod FProtocolWordSize)<>0,1,0);
+  end;
+
+  if Length(FRawProtocolValues)<>Tamanho then
+    SetLength(FRawProtocolValues, Tamanho);
+end;
+
+procedure TPLCTag.SetSwapDWords(v:Boolean);
+begin
+  if v=FSwapDWords then exit;
+
+  FSwapDWords:=v;
+  RebuildValues;
+end;
+
+procedure TPLCTag.SetSwapWords(v:Boolean);
+begin
+  if v=FSwapWords then exit;
+
+  FSwapWords:=v;
+  RebuildValues;
+end;
+
+procedure TPLCTag.SetSwapBytes(v:Boolean);
+begin
+  if v=FSwapBytes then exit;
+
+  FSwapBytes:=v;
+  RebuildValues;
+end;
+
+procedure TPLCTag.RebuildValues;
+begin
+  TagCommandCallBack(FRawProtocolValues,ValueTimestamp,tcInternalUpdate,ioOk,0);
+end;
+
+function TPLCTag.PLCValuesToTagValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble;
+var
+  PtrByte, PtrByteWalker:PByte;
+  PtrWordWalker:PWord;
+  PtrDWordWalker:PDWord;
+  PtrDoubleWalker:PDouble;
+
+  AreaSize:LongInt;
+  AreaIdx:LongInt;
+  valueidx:LongInt;
+
+  DWordAux:Cardinal;
+  WordAux:Word;
+  ByteAux:Byte;
+
+  PtrByte1, PtrByte2:PByte;
+  PtrWord1, PtrWord2:PWord;
+  PtrDWord1, PtrDWord2:PDWord;
+
+  procedure ResetPointers;
+  begin
+    PtrByteWalker  :=PtrByte;
+    PtrWordWalker  :=PWord(PtrByte);
+    PtrDWordWalker :=PDWord(PtrByte);
+    PtrDoubleWalker:=PDouble(PtrByte);
+  end;
+
+  procedure AddToResult(ValueToAdd:Double; var Result:TArrayOfDouble);
+  var
+    i:LongInt;
+  begin
+    i:=Length(Result);
+    SetLength(Result,i+1);
+    Result[i]:=ValueToAdd;
+  end;
+
+begin
+  if (FTagType=pttDefault) OR
+     ((FProtocolTagType=ptByte) AND (FTagType=pttByte)) OR
+     ((FProtocolTagType=ptShortInt) AND (FTagType=pttShortInt)) OR
+     ((FProtocolTagType=ptWord) AND (FTagType=pttWord)) OR
+     ((FProtocolTagType=ptSmallInt) AND (FTagType=pttSmallInt)) OR
+     ((FProtocolTagType=ptDWord) AND (FTagType=pttDWord)) OR
+     ((FProtocolTagType=ptLongInt) AND (FTagType=pttLongInt)) OR
+     ((FProtocolTagType=ptFloat) AND (FTagType=pttFloat)) Or
+     ((FProtocolTagType=ptInt64) AND (FTagType=pttInt64)) Or
+     ((FProtocolTagType=ptQWord) AND (FTagType=pttQWord)) Or
+     ((FProtocolTagType=ptDouble) AND (FTagType=pttDouble))
+  then begin
+    Result:=Values;
+    exit;
+  end;
+
+  //calcula quantos bytes precisam ser alocados.
+  //calculate how many bytes must be allocated.
+  SetLength(Result,0);
+
+  case FProtocolTagType of
+    ptBit:
+      AreaSize := Length(Values) div 8;
+    ptByte, ptShortInt:
+      AreaSize := Length(Values);
+    ptWord, ptSmallInt:
+      AreaSize := Length(Values)*2;
+    ptDWord, ptLongInt, ptFloat:
+      AreaSize := Length(Values)*4;
+    ptQWord, ptInt64, ptDouble:
+      AreaSize := Length(Values)*8;
+  end;
+
+  GetMem(PtrByte, AreaSize);
+  ResetPointers;
+
+  //move os dados para area de trabalho.
+  //move data to work memory.
+  valueidx:=0;
+  case FProtocolTagType of
+    ptBit:
+       while valueidx<Length(Values) do begin
+         if Values[valueidx]<>0 then
+           PtrByteWalker^:=PtrByteWalker^ + (BitToDec(valueidx mod 8) AND $FF);
+
+         inc(valueidx);
+         if (valueidx mod 8)=0 then
+           inc(PtrByteWalker);
+       end;
+    ptByte, ptShortInt:
+       while valueidx<Length(Values) do begin
+         PtrByteWalker^:=trunc(Values[valueidx]) AND $FF;
+         inc(valueidx);
+         Inc(PtrByteWalker);
+       end;
+    ptWord, ptSmallInt:
+       while valueidx<Length(Values) do begin
+         PtrWordWalker^:=trunc(Values[valueidx]) AND $FFFF;
+         inc(valueidx);
+         Inc(PtrWordWalker);
+       end;
+    ptDWord, ptLongInt, ptFloat:
+       while valueidx<Length(Values) do begin
+         if FProtocolTagType=ptFloat then
+           PSingle(PtrDWordWalker)^:=Values[valueidx]
+         else
+           PtrDWordWalker^:=trunc(Values[valueidx]) AND $FFFFFFFF;
+
+         inc(valueidx);
+         Inc(PtrDWordWalker);
+       end;
+    ptQWord, ptInt64, ptDouble:
+      while valueidx<Length(Values) do begin
+          PtrDoubleWalker^:=Values[valueidx];
+
+        inc(valueidx);
+        Inc(PtrDoubleWalker);
+      end;
+  end;
+
+  ResetPointers;
+  AreaIdx:=0;
+
+  //faz as inversoes caso necessário e move os dados para o resultado
+  //swap bytes and words (if necessary)
+  case FTagType of
+    pttShortInt, pttByte: begin
+      inc(PtrByteWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+      inc(AreaIdx,(((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize));
+      while AreaIdx<AreaSize do begin
+        if FTagType=pttShortInt then
+          AddToResult(PShortInt(PtrByteWalker)^, Result)
+        else
+          AddToResult(PtrByteWalker^, Result);
+        inc(AreaIdx);
+        inc(PtrByteWalker);
+      end;
+    end;
+    pttSmallInt, pttWord: begin
+      inc(PtrWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+      inc(AreaIdx,(((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*2);
+      while AreaIdx<AreaSize do begin
+        if FSwapBytes then begin
+          PtrByte1:=PByte(PtrWordWalker);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+        end;
+        if FTagType=pttSmallInt then
+          AddToResult(PSmallInt(PtrWordWalker)^, Result)
+        else
+          AddToResult(PtrWordWalker^, Result);
+
+        inc(AreaIdx, 2);
+        inc(PtrWordWalker);
+      end;
+    end;
+    pttLongInt,
+    pttDWord,
+    pttFloat: begin
+      inc(PtrDWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+      inc(AreaIdx,       (((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*4);
+      while AreaIdx<AreaSize do begin
+
+        if FSwapWords or FSwapBytes then begin
+          PtrWord1:=PWord(PtrDWordWalker);
+          PtrWord2:=PtrWord1;
+          inc(PtrWord2);
+        end;
+
+        if FSwapWords then begin
+          WordAux:=PtrWord1^;
+          PtrWord1^:=PtrWord2^;
+          PtrWord2^:=WordAux;
+        end;
+
+        if FSwapBytes then begin
+          PtrByte1:=PByte(PtrWord1);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+
+          PtrByte1:=PByte(PtrWord2);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+        end;
+
+        case FTagType of
+          pttDWord:
+            AddToResult(PtrDWordWalker^, Result);
+          pttLongInt:
+            AddToResult(PLongInt(PtrDWordWalker)^, Result);
+          pttFloat: begin
+            if IsNan(PSingle(PtrDWordWalker)^) or IsInfinite(PSingle(PtrDWordWalker)^) then
+              SetExceptionMask([exInvalidOp, exDenormalized, {exZeroDivide,} exOverflow, exUnderflow, exPrecision]);
+
+            AddToResult(PSingle(PtrDWordWalker)^, Result);
+          end;
+        end;
+        inc(AreaIdx, 4);
+        inc(PtrDWordWalker);
+      end;
+    end;
+
+    pttDouble: begin
+      inc(PtrDoubleWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+      inc(AreaIdx,        (((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize)*8);
+      while AreaIdx<AreaSize do begin
+
+        if FSwapDWords then begin
+          //initialize Dword Pointers
+          PtrDWord1:=PDWord(PtrDoubleWalker);
+          PtrDWord2:=PtrDWord1;
+          inc(PtrDWord2);
+
+          //swap dwords
+          DWordAux  :=PtrDWord1^;
+          PtrDWord1^:=PtrDWord2^;
+          PtrDWord2^:=DWordAux;
+        end;
+
+        if FSwapWords then begin
+          //initializes DWord Pointers
+          PtrDWord1:=PDWord(PtrDoubleWalker);
+          PtrDWord2:=PtrDWord1;
+          inc(PtrDWord2);
+
+          //initializa first 2 word pointers
+          PtrWord1:=PWord(PtrDWord1);
+          PtrWord2:=PtrWord1;
+          inc(PtrWord2);
+
+          //swap words
+          WordAux:=PtrWord1^;
+          PtrWord1^:=PtrWord2^;
+          PtrWord2^:=WordAux;
+
+          //initializes next 2 word pointers
+          PtrWord1:=PWord(PtrDWord2);
+          PtrWord2:=PtrWord1;
+          inc(PtrWord2);
+
+          //swap words.
+          WordAux:=PtrWord1^;
+          PtrWord1^:=PtrWord2^;
+          PtrWord2^:=WordAux;
+        end;
+
+        if FSwapBytes then begin
+          //initializes DWord Pointers
+          PtrDWord1:=PDWord(PtrDoubleWalker);
+          PtrDWord2:=PtrDWord1;
+          inc(PtrDWord2);
+
+          //initializes first 2 word pointers
+          PtrWord1:=PWord(PtrDWord1);
+          PtrWord2:=PtrWord1;
+          inc(PtrWord2);
+
+          //initialize bytes 1 and 2
+          PtrByte1:=PByte(PtrWord1);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+
+          //swap bytes
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+
+          //initialize bytes 3 and 4
+          PtrByte1:=PByte(PtrWord2);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+
+          //swap bytes
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+
+          //initializes next 2 word pointers
+          PtrWord1:=PWord(PtrDWord2);
+          PtrWord2:=PtrWord1;
+          inc(PtrWord2);
+
+          //initialize bytes 5 and 6
+          PtrByte1:=PByte(PtrWord1);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+
+          //swap bytes
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+
+          //initialize bytes 7 and 8
+          PtrByte1:=PByte(PtrWord2);
+          PtrByte2:=PtrByte1;
+          inc(PtrByte2);
+
+          //swap bytes
+          ByteAux:=PtrByte1^;
+          PtrByte1^:=PtrByte2^;
+          PtrByte2^:=ByteAux;
+        end;
+
+        if IsNan(PDouble(PtrDoubleWalker)^) or IsInfinite(PDouble(PtrDoubleWalker)^) then
+          SetExceptionMask([exInvalidOp, exDenormalized, {exZeroDivide,} exOverflow, exUnderflow, exPrecision]);
+
+        AddToResult(PDouble(PtrDoubleWalker)^, Result);
+
+        inc(AreaIdx, 8);
+        inc(PtrDoubleWalker);
+      end;
+    end;
+  end;
+  Freemem(PtrByte);
+end;
+
+function TPLCTag.TagValuesToPLCValues(Values:TArrayOfDouble; Offset:Cardinal):TArrayOfDouble;
+var
+  PtrByte, PtrByteWalker:PByte;
+  PtrWordWalker:PWord;
+  PtrDWordWalker:PDWord;
+  PtrDoubleWalker:PDouble;
+
+  AreaSize:LongInt;
+  AreaIdx:LongInt;
+  valueidx:LongInt;
+
+  DWordAux:Cardinal;
+  WordAux :Word;
+  ByteAux :Byte;
+
+  PtrByte1, PtrByte2:PByte;
+  PtrWord1, PtrWord2:PWord;
+  PtrDWord1,PtrDWord2:PDWord;
+
+  bitaux:LongInt;
+
+  ProtocolOffSet, ProtocolSize:LongInt;
+
+  procedure ResetPointers;
+  begin
+    PtrByteWalker  :=PtrByte;
+    PtrWordWalker  :=PWord(PtrByte);
+    PtrDWordWalker :=PDWord(PtrByte);
+    PtrDoubleWalker:=PDouble(PtrByte);
+  end;
+
+  procedure AddToResult(ValueToAdd:Double; var Result:TArrayOfDouble);
+  var
+    i:LongInt;
+  begin
+    i:=Length(Result);
+    SetLength(Result,i+1);
+    Result[i]:=ValueToAdd;
+  end;
+
+begin
+  if (FTagType=pttDefault) OR
+     ((FProtocolTagType=ptByte) AND (FTagType=pttByte)) OR
+     ((FProtocolTagType=ptShortInt) AND (FTagType=pttShortInt)) OR
+     ((FProtocolTagType=ptWord) AND (FTagType=pttWord)) OR
+     ((FProtocolTagType=ptSmallInt) AND (FTagType=pttSmallInt)) OR
+     ((FProtocolTagType=ptDWord) AND (FTagType=pttDWord)) OR
+     ((FProtocolTagType=ptLongInt) AND (FTagType=pttLongInt)) OR
+     ((FProtocolTagType=ptFloat) AND (FTagType=pttFloat)) OR
+     ((FProtocolTagType=ptDouble) AND (FTagType=pttDouble))
+  then begin
+    Result:=Values;
+    exit;
+  end;
+
+  //calcula quantos bytes precisam ser alocados.
+  //calculate how many bytes must be allocated.
+  SetLength(Result,0);
+
+  if FCurrentWordSize>=FProtocolWordSize then begin
+    ProtocolSize   := (FCurrentWordSize div FProtocolWordSize)*Length(Values);
+    ProtocolOffSet := (FCurrentWordSize div FProtocolWordSize)*Offset
+  end else begin
+    ProtocolOffSet := (OffSet * FCurrentWordSize) div FProtocolWordSize;
+    ProtocolSize   := (((OffSet*FCurrentWordSize)+(Length(Values)*FCurrentWordSize)) div FProtocolWordSize) + ifthen((((OffSet*FCurrentWordSize)+(Length(Values)*FCurrentWordSize)) mod FProtocolWordSize)<>0,1,0) - ProtocolOffSet;
+  end;
+
+  case FProtocolTagType of
+    ptBit:
+      AreaSize := ProtocolSize div 8;
+    ptByte, ptShortInt:
+      AreaSize := ProtocolSize;
+    ptWord, ptSmallInt:
+      AreaSize := ProtocolSize*2;
+    ptDWord, ptLongInt, ptFloat:
+      AreaSize := ProtocolSize*4;
+    ptDouble:
+      AreaSize := ProtocolSize*8;
+  end;
+
+  GetMem(PtrByte, AreaSize);
+  ResetPointers;
+
+  //joga os valores puros lidos do driver para a area de memória para nao perder valores.
+  //move the raw values to the work memory to don't loose data.
+  valueidx:=0;
+  case FProtocolTagType of
+    ptByte, ptShortInt:
+       while valueidx<ProtocolSize do begin
+         PtrByteWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FF;
+         inc(valueidx);
+         Inc(PtrByteWalker);
+       end;
+    ptWord, ptSmallInt:
+       while valueidx<ProtocolSize do begin
+         PtrWordWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FFFF;
+         inc(valueidx);
+         Inc(PtrWordWalker);
+       end;
+    ptDWord, ptLongInt, ptFloat:
+       while valueidx<ProtocolSize do begin
+         if FProtocolTagType = ptFloat then
+           PSingle(PtrDWordWalker)^:=FRawProtocolValues[valueidx+ProtocolOffSet]
+         else begin
+           if FProtocolTagType = ptLongInt then
+             PLongInt(PtrDWordWalker)^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet])
+           else
+             PtrDWordWalker^:=trunc(FRawProtocolValues[valueidx+ProtocolOffSet]) AND $FFFFFFFF;
+         end;
+         inc(valueidx);
+         Inc(PtrDWordWalker);
+       end;
+    ptDouble:
+       while valueidx<ProtocolSize do begin
+         PDouble(PtrDoubleWalker)^:=FRawProtocolValues[valueidx+ProtocolOffSet];
+         inc(valueidx);
+         Inc(PtrDoubleWalker);
+       end;
+  end;
+
+  ResetPointers;
+  valueidx:=0;
+  //move os dados para area de trabalho.
+  //move data to the work memory.
+  case FTagType of
+    pttByte, pttShortInt: begin
+       inc(PtrByteWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+       while valueidx<Length(Values) do begin
+         PtrByteWalker^:=trunc(Values[valueidx]) AND $FF;
+         inc(valueidx);
+         Inc(PtrByteWalker);
+       end;
+    end;
+    pttWord, pttSmallInt: begin
+       inc(PtrWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+       while valueidx<Length(Values) do begin
+         PtrWordWalker^:=trunc(Values[valueidx]) AND $FFFF;
+
+         if FSwapBytes then begin
+           PtrByte1:=PByte(PtrWordWalker);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+         end;
+
+         inc(valueidx);
+         Inc(PtrWordWalker);
+       end;
+    end;
+    pttDWord,
+    pttLongInt,
+    pttFloat: begin
+       inc(PtrDWordWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+       while valueidx<Length(Values) do begin
+
+         if FTagType=pttLongInt then
+           PLongInt(PtrDWordWalker)^:=trunc(Values[valueidx]);
+         if FTagType=pttDWord then
+           PtrDWordWalker^:=trunc(Values[valueidx]) AND $FFFFFFFF;
+         if FTagType=pttFloat then
+           PSingle(PtrDWordWalker)^:=Values[valueidx];
+
+         if FSwapWords or FSwapBytes then begin
+           PtrWord1:=PWord(PtrDWordWalker);
+           PtrWord2:=PtrWord1;
+           inc(PtrWord2);
+         end;
+
+         if FSwapWords then begin
+           WordAux:=PtrWord1^;
+           PtrWord1^:=PtrWord2^;
+           PtrWord2^:=WordAux;
+         end;
+
+         if FSwapBytes then begin
+           PtrByte1:=PByte(PtrWord1);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+
+           PtrByte1:=PByte(PtrWord2);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+         end;
+
+         inc(valueidx);
+         Inc(PtrDWordWalker);
+       end;
+    end;
+    pttDouble: begin
+       inc(PtrDoubleWalker,((Offset*FCurrentWordSize) mod FProtocolWordSize) div FCurrentWordSize);
+       while valueidx<Length(Values) do begin
+
+         PDouble(PtrDoubleWalker)^:=Values[valueidx];
+
+         if FSwapDWords then begin
+           //initialize Dword Pointers
+           PtrDWord1:=PDWord(PtrDoubleWalker);
+           PtrDWord2:=PtrDWord1;
+           inc(PtrDWord2);
+
+           //swap dwords
+           DWordAux  :=PtrDWord1^;
+           PtrDWord1^:=PtrDWord2^;
+           PtrDWord2^:=DWordAux;
+         end;
+
+         if FSwapWords then begin
+           //initializes DWord Pointers
+           PtrDWord1:=PDWord(PtrDoubleWalker);
+           PtrDWord2:=PtrDWord1;
+           inc(PtrDWord2);
+
+           //initializa first 2 word pointers
+           PtrWord1:=PWord(PtrDWord1);
+           PtrWord2:=PtrWord1;
+           inc(PtrWord2);
+
+           //swap words
+           WordAux:=PtrWord1^;
+           PtrWord1^:=PtrWord2^;
+           PtrWord2^:=WordAux;
+
+           //initializes next 2 word pointers
+           PtrWord1:=PWord(PtrDWord2);
+           PtrWord2:=PtrWord1;
+           inc(PtrWord2);
+
+           //swap words.
+           WordAux:=PtrWord1^;
+           PtrWord1^:=PtrWord2^;
+           PtrWord2^:=WordAux;
+         end;
+
+         if FSwapBytes then begin
+           //initializes DWord Pointers
+           PtrDWord1:=PDWord(PtrDoubleWalker);
+           PtrDWord2:=PtrDWord1;
+           inc(PtrDWord2);
+
+           //initializes first 2 word pointers
+           PtrWord1:=PWord(PtrDWord1);
+           PtrWord2:=PtrWord1;
+           inc(PtrWord2);
+
+           //initialize bytes 1 and 2
+           PtrByte1:=PByte(PtrWord1);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+
+           //swap bytes
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+
+           //initialize bytes 3 and 4
+           PtrByte1:=PByte(PtrWord2);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+
+           //swap bytes
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+
+           //initializes next 2 word pointers
+           PtrWord1:=PWord(PtrDWord2);
+           PtrWord2:=PtrWord1;
+           inc(PtrWord2);
+
+           //initialize bytes 5 and 6
+           PtrByte1:=PByte(PtrWord1);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+
+           //swap bytes
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+
+           //initialize bytes 7 and 8
+           PtrByte1:=PByte(PtrWord2);
+           PtrByte2:=PtrByte1;
+           inc(PtrByte2);
+
+           //swap bytes
+           ByteAux:=PtrByte1^;
+           PtrByte1^:=PtrByte2^;
+           PtrByte2^:=ByteAux;
+         end;
+
+         inc(valueidx);
+         Inc(PtrDoubleWalker);
+       end;
+    end;
+  end;
+
+  ResetPointers;
+  AreaIdx:=0;
+  //faz as inversoes e move para o resultado.
+  //swap bytes and words (if necessary).
+  case FProtocolTagType of
+    ptBit: begin
+       while AreaIdx<AreaSize do begin
+         bitaux := BitToDec(AreaIdx mod 8);
+         if (PtrByteWalker^ AND bitaux)=bitaux then
+           AddToResult(1, Result)
+         else
+           AddToResult(0, Result);
+
+         inc(AreaIdx);
+
+         if (AreaIdx mod 8)=0 then
+           inc(PtrByteWalker);
+       end;
+    end;
+    ptByte,
+    ptShortInt: begin
+      while AreaIdx<AreaSize do begin
+        if FProtocolTagType=ptShortInt then
+         AddToResult(PShortInt(PtrByteWalker)^, Result)
+        else
+          AddToResult(PtrByteWalker^, Result);
+        inc(AreaIdx);
+        inc(PtrByteWalker);
+      end;
+    end;
+    ptSmallInt,
+    ptWord: begin
+      while AreaIdx<AreaSize do begin
+        if FProtocolTagType=ptSmallInt then
+          AddToResult(PSmallInt(PtrWordWalker)^, Result)
+        else
+          AddToResult(PtrWordWalker^, Result);
+
+        inc(AreaIdx, 2);
+        inc(PtrWordWalker);
+      end;
+    end;
+    ptLongInt,
+    ptDWord,
+    ptFloat: begin
+      while AreaIdx<AreaSize do begin
+        case FProtocolTagType of
+          ptDWord:
+            AddToResult(PtrDWordWalker^, Result);
+          ptLongInt:
+            AddToResult(PLongInt(PtrDWordWalker)^, Result);
+          ptFloat:
+            AddToResult(PSingle(PtrDWordWalker)^, Result);
+        end;
+        inc(AreaIdx, 4);
+        inc(PtrDWordWalker);
+      end;
+    end;
+    ptDouble: begin
+      while AreaIdx<AreaSize do begin
+        AddToResult(PDouble(PtrDoubleWalker)^, Result);
+        inc(AreaIdx, 8);
+        inc(PtrDoubleWalker);
+      end;
+    end;
+  end;
+  Freemem(PtrByte);
+end;
+
+function TPLCTag.GetAvgUpdateRate:Double;
+begin
+  if FReadCount=0 then
+    Result:=-1
+  else
+    Result:=FTotalTime/FReadCount;
+end;
+
+function TPLCTag.RemainingMiliseconds:Int64;
+begin
+  Result:=PUpdateTime-MilliSecondsBetween(CrossNow,PValueTimeStamp);
+end;
+
+function TPLCTag.RemainingMilisecondsForNextScan:Int64;
+begin
+  Result:=PUpdateTime-MilliSecondsBetween(CrossNow,PLastScanTimeStamp);
+end;
+
+function TPLCTag.IsValidTag:Boolean;
+begin
+  Result:=PValidTag;
+end;
+
+procedure TPLCTag.SetTagValidity(TagValidity:Boolean);
+begin
+  PValidTag:=TagValidity;
+end;
+
+////////////////////////////////////////////////////////////////////////////////
+//PASCALSCADA TAG MANAGER.
+////////////////////////////////////////////////////////////////////////////////
+
+constructor TTagMananger.Create;
+begin
+  SetLength(ftags,0);
+end;
+
+destructor TTagMananger.Destroy;
+begin
+  if Length(ftags)>0 then
+    Raise Exception.Create(SCannotDestroyBecauseTagsStillManaged);
+end;
+
+procedure  TTagMananger.AddTag(Tag:TPLCTag);
+var
+  c,h:LongInt;
+begin
+  for c:=0 to High(ftags) do begin
+    if ftags[c]=Tag then exit;
+    if ftags[c].TagGUID=tag.TagGUID then begin
+      if Supports(Tag, IManagedTagInterface) then
+        (Tag as IManagedTagInterface).RebuildTagGUID
+      else
+        raise Exception.Create(SCannotRebuildTagID);
+    end;
+  end;
+  h:=Length(ftags);
+  SetLength(ftags,h+1);
+  ftags[h]:=Tag;
+end;
+
+procedure  TTagMananger.RemoveTag(Tag:TPLCTag);
+var
+  c,h:LongInt;
+  found:Boolean;
+begin
+  found:=false;
+  for c:=0 to High(ftags) do
+    if ftags[c]=Tag then begin
+      found:=true;
+      break;
+    end;
+
+  if found then begin
+    h:=High(ftags);
+    ftags[c]:=ftags[h];
+    SetLength(ftags,Max(0,h-1));
+  end;
+end;
+
+var
+  QPascalTagManager:TTagMananger;
+
+function GetTagManager:TTagMananger;
+begin
+  Result:=QPascalTagManager;
+end;
+
+initialization
+  QPascalTagManager:=TTagMananger.Create;
+finalization
+  QPascalTagManager.Destroy;
+end.
Index: src/scada/scadapropeditor.pas
===================================================================
--- src/scada/scadapropeditor.pas	(revision 928)
+++ src/scada/scadapropeditor.pas	(working copy)
@@ -1,442 +1,442 @@
-{$i ../common/pscada_settings.inc}
-{$I ../common/pscada_compiler_versions.inc}
-{$IFDEF PORTUGUES}
-{:
-  @abstract(Implementação dos editores de algumas propriedades de componentes
-            do PascalSCADA.)
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-}
-{$ELSE}
-{:
-  @abstract(Implements some property editors of PascalSCADA.)
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-
-  ****************************** History  *******************************
-  ***********************************************************************
-  07/2013 - Replaced ProtocolDriver with TagAssistant. (unit, properties and classes)
-  07/2013 - Implemented Double-Click for the assistants.
-  07/2013 - Replaced PlcNumber with BitMapTagAssistant. (unit, properties and classes)
-  07/2013 - Replaced PlcBlock with BLockTagAssistant. (unit, properties and classes)
-  @author(Juanjo Montero <juanjo.montero@gmail.com>)
-  ***********************************************************************
-}
-{$ENDIF}
-unit scadapropeditor;
-
-interface
-
-uses
-  Classes, SysUtils, SerialPort, PLCBlockElement, PLCStruct, Tag,
-  bitmappertagassistant, blockstructtagassistant, ProtocolDriver,
-  PLCNumber, ProtocolTypes,
-
-  {$IF defined(WIN32) or defined(WIN64) OR defined(WINCE)}
-  Windows,
-  {$ELSE}
-  Unix,
-  {$IFEND}
-  
-  {$IFDEF FPC}
-    PropEdits, ComponentEditors, pSCADA_Constants;
-  {$ELSE}
-    Types,
-    //Delphi 6 ou superior
-    {$IF defined(DELPHI6_UP)}
-      DesignIntf, DesignEditors;
-    {$ELSE}
-      //demais versoes do delphi
-      DsgnIntf;
-    {$IFEND}
-  {$ENDIF}
-
-type
-  {$IFDEF PORTUGUES}
-  //: Editor da propriedade TSerialPortDriver.COMPort
-  {$ELSE}
-  //: Property editor of TSerialPortDriver.COMPort property.
-  {$ENDIF}
-  TPortPropertyEditor = class(TStringProperty)
-  public
-    function  GetAttributes: TPropertyAttributes; override;
-    function  GetValue: string; override;
-    procedure GetValues(Proc: TGetStrProc); override;
-    procedure SetValue(const Value: string); override;
-  end;
-
-  {$IFDEF PORTUGUES}
-  //: Editor da propriedade TPLCBlockElement.Index
-  {$ELSE}
-  //: Property editor of TPLCBlockElement.Index property.
-  {$ENDIF}
-  TElementIndexPropertyEditor = class(TIntegerProperty)
-  public
-    function  GetAttributes: TPropertyAttributes; override;
-    procedure GetValues(Proc: TGetStrProc); override;
-  end;
-
-  {$IFNDEF FPC}
-  //: @exclude
-  TDefaultComponentEditor = class(TComponentEditor);
-  {$ENDIF}
-
-  {$IFDEF PORTUGUES}
-  {:
-    Editor de componente base para todos os demais editores que irão inserir
-    componentes na aplicação.
-    @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  }
-  {$ELSE}
-  {:
-    Base class of Component editor for all component editors that will insert
-    others componentes in application.
-    @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  }
-  {$ENDIF}
-  TInsertTagsOnFormComponentEditor = class(TDefaultComponentEditor)
-  protected
-    procedure AddTagInEditor(Tag:TTag);
-    function  CreateComponent(tagclass:TComponentClass):TComponent;
-    function  GetTheOwner:TComponent; virtual;
-  end;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Editor de componente TagBuilder.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ELSE}
-  {:
-  TagBuilder component editor tool.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ENDIF}
-  TProtocolDriverComponentEditor = class(TInsertTagsOnFormComponentEditor)
-  private
-    procedure OpenTagBuilder;
-  protected
-    function GetTheOwner: TComponent; override;
-  public
-    procedure ExecuteVerb(Index: LongInt); override;
-    function  GetVerb(Index: LongInt): string; override;
-    function  GetVerbCount: LongInt; override;
-    procedure Edit; override;
-    function  ProtocolDriver: TProtocolDriver; virtual;
-  end;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Editor de componente BitMapper. Mapeia bits de um tag.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ELSE}
-  {:
-  BitMapper component editor tool. Map bits of a tag.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ENDIF}
-  TTagBitMapperComponentEditor = class(TInsertTagsOnFormComponentEditor)
-  private
-    procedure OpenBitMapper;
-  protected
-    function GetTheOwner: TComponent; override;
-  public
-    procedure ExecuteVerb(Index: LongInt); override;
-    function GetVerb(Index: LongInt): string; override;
-    function GetVerbCount: LongInt; override;
-    procedure Edit; override;
-  end;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Editor de componente BlockElementMapper. Mapeia elementos de um tag bloco.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ELSE}
-  {:
-  BlockElementMapper component editor tool. Map elements of a tag block.
-  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
-  @seealso(TInsertTagsOnFormComponentEditor)
-  }
-  {$ENDIF}
-  TBlockElementMapperComponentEditor = class(TInsertTagsOnFormComponentEditor)
-  private
-    procedure OpenElementMapper;
-  public
-    procedure ExecuteVerb(Index: LongInt); override;
-    {$if declared(has_customhints)}
-    function GetCustomHint: String; override;
-    {$ifend}
-    function GetVerb(Index: LongInt): string; override;
-    function GetVerbCount: LongInt; override;
-    procedure Edit; override;
-  end;
-
-implementation
-
-uses PLCBlock;
-
-function  TPortPropertyEditor.GetAttributes: TPropertyAttributes;
-begin
-   if GetComponent(0) is TSerialPortDriver then
-      Result := [paValueList{$IFDEF FPC}, paPickList{$ELSE}
-                 {$IFDEF DELPHI2005_UP}, paReadOnly,
-                 paValueEditable{$ENDIF}{$ENDIF}];
-end;
-
-function  TPortPropertyEditor.GetValue: string;
-begin
-   Result := GetStrValue;
-end;
-
-procedure TPortPropertyEditor.GetValues(Proc: TGetStrProc);
-{$IF defined(WIN32) or defined(WIN64)}
-var
-  c:LongInt;
-  dcbstring, comname:String;
-  d:DCB;
-begin
-  Proc('(none)');
-  for c:=1 to 255 do begin
-     comname := 'COM'+IntToStr(c);
-     dcbstring := comname+': baud=1200 parity=N data=8 stop=1';
-     if BuildCommDCB(PChar(dcbstring),d) then
-        Proc(comname);
-  end;
-{$IFEND}
-{$IFDEF UNIX}
-var
-   c, d:LongInt;
-   pname:String;
-begin
-   Proc('(none)');
-   for d:=0 to High(PortPrefix) do
-      {$IFDEF SunOS}
-      for c:=Ord('a') to ord('z') do begin
-         pname:=PortPrefix[d]+Char(c);
-      {$ELSE}
-      for c:=0 to 255 do begin
-         pname:=PortPrefix[d]+IntToStr(c);
-      {$ENDIF}
-         if FileExists('/dev/'+pname) then
-            Proc(pname);
-      end;
-{$ENDIF}
-{$IFDEF WINCE}
-begin
-  //ToDo
-{$ENDIF}
-end;
-
-procedure TPortPropertyEditor.SetValue(const Value: string);
-begin
-   SetStrValue(Value);
-   if GetComponent(0) is TSerialPortDriver then
-      TSerialPortDriver(GetComponent(0)).Active := false;
-end;
-
-//editores de propriedades de BlinkWith
-function  TElementIndexPropertyEditor.GetAttributes: TPropertyAttributes;
-begin
-   if GetComponent(0) is TPLCBlockElement then
-      Result := [paValueList{$IFNDEF FPC}{$IFDEF DELPHI2005_UP}, paReadOnly,
-                 paValueEditable{$ENDIF}{$ENDIF}];
-end;
-
-procedure TElementIndexPropertyEditor.GetValues(Proc: TGetStrProc);
-var
-   i:LongInt;
-begin
-   if (GetComponent(0) is TPLCBlockElement) and (TPLCBlockElement(GetComponent(0)).PLCBlock <> nil) then
-      for i := 0 to LongInt(TPLCBlockElement(GetComponent(0)).PLCBlock.Size)-1 do begin
-          Proc(IntToStr(i));
-      end;
-end;
-
-
-{function  TComponentNameEditorEx.GetAttributes: TPropertyAttributes;
-begin
-  Result := [paMultiSelect];
-end;}
-
-///////////////////////////////////////
-//editor base para os demais editores.
-///////////////////////////////////////
-procedure TInsertTagsOnFormComponentEditor.AddTagInEditor(Tag:TTag);
-{$IFDEF FPC}
-var
-  Hook: TPropertyEditorHook;
-{$ENDIF}
-begin
-{$IFDEF FPC}
-  Hook:=nil;
-  if not GetHook(Hook) then exit;
-  Hook.PersistentAdded(Tag,false);
-  Modified;
-{$ELSE}
-  Designer.Modified;
-{$ENDIF}
-end;
-
-function  TInsertTagsOnFormComponentEditor.CreateComponent(tagclass:TComponentClass):TComponent;
-begin
-  {$IFDEF FPC}
-    Result := tagclass.Create(GetTheOwner);
-  {$ELSE}
-    Result := Designer.CreateComponent(tagclass,GetTheOwner,0,0,0,0);
-  {$ENDIF}
-end;
-
-function TInsertTagsOnFormComponentEditor.GetTheOwner:TComponent;
-begin
-  Result:=nil;
-end;
-
-///////////////////////////////////////
-//editor TAG BUILDER
-///////////////////////////////////////
-
-function  TProtocolDriverComponentEditor.GetTheOwner: TComponent;
-begin
-  Result:=ProtocolDriver.Owner;
-end;
-
-procedure TProtocolDriverComponentEditor.OpenTagBuilder;
-begin
-  ProtocolDriver.OpenTagEditor(AddTagInEditor, CreateComponent);
-end;
-
-procedure TProtocolDriverComponentEditor.ExecuteVerb(Index: LongInt);
-begin
-  if Index=0 then
-    OpenTagBuilder();
-end;
-
-function TProtocolDriverComponentEditor.GetVerb(Index: LongInt): string;
-begin
-  if Index=0 then
-    Result:='Tag Builder';
-end;
-
-function TProtocolDriverComponentEditor.GetVerbCount: LongInt;
-begin
-  if ProtocolDriver.HasTabBuilderEditor then
-    Result:=1
-  else
-    Result:=0;;
-end;
-
-procedure TProtocolDriverComponentEditor.Edit;
-begin
-  inherited Edit;
-  OpenTagBuilder();
-end;
-
-function TProtocolDriverComponentEditor.ProtocolDriver: TProtocolDriver;
-begin
-  Result:=TProtocolDriver(GetComponent);
-end;
-
-///////////////////////////////////////////////////////////////////////////////
-// BIT MAPPER
-///////////////////////////////////////////////////////////////////////////////
-
-function TTagBitMapperComponentEditor.GetTheOwner: TComponent;
-begin
-  Result:=GetComponent().Owner;
-end;
-
-procedure TTagBitMapperComponentEditor.OpenBitMapper;
-begin
-  if (GetComponent is TPLCNumberMappable) then
-    TPLCNumberMappable(GetComponent).OpenBitMapper(AddTagInEditor, CreateComponent);
-end;
-
-procedure TTagBitMapperComponentEditor.ExecuteVerb(Index: LongInt);
-begin
-  if Index=0 then
-    OpenBitMapper();
-end;
-
-function  TTagBitMapperComponentEditor.GetVerb(Index: LongInt): string;
-begin
-  if Index=0 then
-    Result:='Map bits';
-end;
-
-function  TTagBitMapperComponentEditor.GetVerbCount: LongInt;
-begin
-  Result:=1;
-end;
-
-procedure TTagBitMapperComponentEditor.Edit;
-begin
-  inherited Edit;
-  OpenBitMapper();
-end;
-
-///////////////////////////////////////////////////////////////////////////////
-// ELEMENT BLOCK MAPPER
-///////////////////////////////////////////////////////////////////////////////
-
-procedure TBlockElementMapperComponentEditor.OpenElementMapper;
-begin
-  if (GetComponent is TPLCBlock) then
-    TPLCBlock(GetComponent).MapElements(AddTagInEditor, CreateComponent);
-end;
-
-procedure TBlockElementMapperComponentEditor.ExecuteVerb(Index: LongInt);
-begin
-  if Index=0 then
-    OpenElementMapper();
-end;
-
-{$if declared(has_customhints)}
-function TBlockElementMapperComponentEditor.GetCustomHint: String;
-begin
-  if GetComponent is TPLCStruct then begin
-    Result:=Result+'Structure size in bytes:'+IntToStr(TPLCStruct(GetComponent).Size);
-    exit;
-  end;
-
-  if GetComponent is TPLCBlock then begin
-    Result:=Result+'Number of elements: '+IntToStr(TPLCBlock(GetComponent).Size);
-    exit;
-  end;
-end;
-{$ifend}
-
-function  TBlockElementMapperComponentEditor.GetVerb(Index: LongInt): string;
-begin
-  Result:='Unknow option...';
-  if Index=0 then begin
-    if GetComponent is TPLCStruct then begin
-      Result:='Map structure items...';
-      exit;
-    end;
-    if GetComponent is TPLCBlock then begin
-      Result:='Map block elements...';
-      exit;
-    end;
-  end;
-end;
-
-function  TBlockElementMapperComponentEditor.GetVerbCount: LongInt;
-begin
-  Result:=0;
-  if GetComponent is TPLCBlock then
-   Result:=1;
-end;
-
-procedure TBlockElementMapperComponentEditor.Edit;
-begin
-  inherited Edit;
-  OpenElementMapper();
-end;
-
-end.
-
+{$i ../common/pscada_settings.inc}
+{$I ../common/pscada_compiler_versions.inc}
+{$IFDEF PORTUGUES}
+{:
+  @abstract(Implementação dos editores de algumas propriedades de componentes
+            do PascalSCADA.)
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+}
+{$ELSE}
+{:
+  @abstract(Implements some property editors of PascalSCADA.)
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+
+  ****************************** History  *******************************
+  ***********************************************************************
+  07/2013 - Replaced ProtocolDriver with TagAssistant. (unit, properties and classes)
+  07/2013 - Implemented Double-Click for the assistants.
+  07/2013 - Replaced PlcNumber with BitMapTagAssistant. (unit, properties and classes)
+  07/2013 - Replaced PlcBlock with BLockTagAssistant. (unit, properties and classes)
+  @author(Juanjo Montero <juanjo.montero@gmail.com>)
+  ***********************************************************************
+}
+{$ENDIF}
+unit scadapropeditor;
+
+interface
+
+uses
+  Classes, SysUtils, SerialPort, PLCBlockElement, PLCStruct, Tag,
+  bitmappertagassistant, blockstructtagassistant, ProtocolDriver,
+  PLCNumber, ProtocolTypes,
+
+  {$IF defined(WIN32) or defined(WIN64) OR defined(WINCE)}
+  Windows,
+  {$ELSE}
+  Unix,
+  {$IFEND}
+  
+  {$IFDEF FPC}
+    PropEdits, ComponentEditors;
+  {$ELSE}
+    Types,
+    //Delphi 6 ou superior
+    {$IF defined(DELPHI6_UP)}
+      DesignIntf, DesignEditors;
+    {$ELSE}
+      //demais versoes do delphi
+      DsgnIntf;
+    {$IFEND}
+  {$ENDIF}
+
+type
+  {$IFDEF PORTUGUES}
+  //: Editor da propriedade TSerialPortDriver.COMPort
+  {$ELSE}
+  //: Property editor of TSerialPortDriver.COMPort property.
+  {$ENDIF}
+  TPortPropertyEditor = class(TStringProperty)
+  public
+    function  GetAttributes: TPropertyAttributes; override;
+    function  GetValue: string; override;
+    procedure GetValues(Proc: TGetStrProc); override;
+    procedure SetValue(const Value: string); override;
+  end;
+
+  {$IFDEF PORTUGUES}
+  //: Editor da propriedade TPLCBlockElement.Index
+  {$ELSE}
+  //: Property editor of TPLCBlockElement.Index property.
+  {$ENDIF}
+  TElementIndexPropertyEditor = class(TIntegerProperty)
+  public
+    function  GetAttributes: TPropertyAttributes; override;
+    procedure GetValues(Proc: TGetStrProc); override;
+  end;
+
+  {$IFNDEF FPC}
+  //: @exclude
+  TDefaultComponentEditor = class(TComponentEditor);
+  {$ENDIF}
+
+  {$IFDEF PORTUGUES}
+  {:
+    Editor de componente base para todos os demais editores que irão inserir
+    componentes na aplicação.
+    @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  }
+  {$ELSE}
+  {:
+    Base class of Component editor for all component editors that will insert
+    others componentes in application.
+    @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  }
+  {$ENDIF}
+  TInsertTagsOnFormComponentEditor = class(TDefaultComponentEditor)
+  protected
+    procedure AddTagInEditor(Tag:TTag);
+    function  CreateComponent(tagclass:TComponentClass):TComponent;
+    function  GetTheOwner:TComponent; virtual;
+  end;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Editor de componente TagBuilder.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ELSE}
+  {:
+  TagBuilder component editor tool.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ENDIF}
+  TProtocolDriverComponentEditor = class(TInsertTagsOnFormComponentEditor)
+  private
+    procedure OpenTagBuilder;
+  protected
+    function GetTheOwner: TComponent; override;
+  public
+    procedure ExecuteVerb(Index: LongInt); override;
+    function  GetVerb(Index: LongInt): string; override;
+    function  GetVerbCount: LongInt; override;
+    procedure Edit; override;
+    function  ProtocolDriver: TProtocolDriver; virtual;
+  end;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Editor de componente BitMapper. Mapeia bits de um tag.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ELSE}
+  {:
+  BitMapper component editor tool. Map bits of a tag.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ENDIF}
+  TTagBitMapperComponentEditor = class(TInsertTagsOnFormComponentEditor)
+  private
+    procedure OpenBitMapper;
+  protected
+    function GetTheOwner: TComponent; override;
+  public
+    procedure ExecuteVerb(Index: LongInt); override;
+    function GetVerb(Index: LongInt): string; override;
+    function GetVerbCount: LongInt; override;
+    procedure Edit; override;
+  end;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Editor de componente BlockElementMapper. Mapeia elementos de um tag bloco.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ELSE}
+  {:
+  BlockElementMapper component editor tool. Map elements of a tag block.
+  @author(Fabio Luis Girardi <fabio@pascalscada.com>)
+  @seealso(TInsertTagsOnFormComponentEditor)
+  }
+  {$ENDIF}
+  TBlockElementMapperComponentEditor = class(TInsertTagsOnFormComponentEditor)
+  private
+    procedure OpenElementMapper;
+  public
+    procedure ExecuteVerb(Index: LongInt); override;
+    {$if declared(has_customhints)}
+    function GetCustomHint: String; override;
+    {$ifend}
+    function GetVerb(Index: LongInt): string; override;
+    function GetVerbCount: LongInt; override;
+    procedure Edit; override;
+  end;
+
+implementation
+
+uses PLCBlock;
+
+function  TPortPropertyEditor.GetAttributes: TPropertyAttributes;
+begin
+   if GetComponent(0) is TSerialPortDriver then
+      Result := [paValueList{$IFDEF FPC}, paPickList{$ELSE}
+                 {$IFDEF DELPHI2005_UP}, paReadOnly,
+                 paValueEditable{$ENDIF}{$ENDIF}];
+end;
+
+function  TPortPropertyEditor.GetValue: string;
+begin
+   Result := GetStrValue;
+end;
+
+procedure TPortPropertyEditor.GetValues(Proc: TGetStrProc);
+{$IF defined(WIN32) or defined(WIN64)}
+var
+  c:LongInt;
+  dcbstring, comname:String;
+  d:DCB;
+begin
+  Proc('(none)');
+  for c:=1 to 255 do begin
+     comname := 'COM'+IntToStr(c);
+     dcbstring := comname+': baud=1200 parity=N data=8 stop=1';
+     if BuildCommDCB(PChar(dcbstring),d) then
+        Proc(comname);
+  end;
+{$IFEND}
+{$IFDEF UNIX}
+var
+   c, d:LongInt;
+   pname:String;
+begin
+   Proc('(none)');
+   for d:=0 to High(PortPrefix) do
+      {$IFDEF SunOS}
+      for c:=Ord('a') to ord('z') do begin
+         pname:=PortPrefix[d]+Char(c);
+      {$ELSE}
+      for c:=0 to 255 do begin
+         pname:=PortPrefix[d]+IntToStr(c);
+      {$ENDIF}
+         if FileExists('/dev/'+pname) then
+            Proc(pname);
+      end;
+{$ENDIF}
+{$IFDEF WINCE}
+begin
+  //ToDo
+{$ENDIF}
+end;
+
+procedure TPortPropertyEditor.SetValue(const Value: string);
+begin
+   SetStrValue(Value);
+   if GetComponent(0) is TSerialPortDriver then
+      TSerialPortDriver(GetComponent(0)).Active := false;
+end;
+
+//editores de propriedades de BlinkWith
+function  TElementIndexPropertyEditor.GetAttributes: TPropertyAttributes;
+begin
+   if GetComponent(0) is TPLCBlockElement then
+      Result := [paValueList{$IFNDEF FPC}{$IFDEF DELPHI2005_UP}, paReadOnly,
+                 paValueEditable{$ENDIF}{$ENDIF}];
+end;
+
+procedure TElementIndexPropertyEditor.GetValues(Proc: TGetStrProc);
+var
+   i:LongInt;
+begin
+   if (GetComponent(0) is TPLCBlockElement) and (TPLCBlockElement(GetComponent(0)).PLCBlock <> nil) then
+      for i := 0 to LongInt(TPLCBlockElement(GetComponent(0)).PLCBlock.Size)-1 do begin
+          Proc(IntToStr(i));
+      end;
+end;
+
+
+{function  TComponentNameEditorEx.GetAttributes: TPropertyAttributes;
+begin
+  Result := [paMultiSelect];
+end;}
+
+///////////////////////////////////////
+//editor base para os demais editores.
+///////////////////////////////////////
+procedure TInsertTagsOnFormComponentEditor.AddTagInEditor(Tag:TTag);
+{$IFDEF FPC}
+var
+  Hook: TPropertyEditorHook;
+{$ENDIF}
+begin
+{$IFDEF FPC}
+  Hook:=nil;
+  if not GetHook(Hook) then exit;
+  Hook.PersistentAdded(Tag,false);
+  Modified;
+{$ELSE}
+  Designer.Modified;
+{$ENDIF}
+end;
+
+function  TInsertTagsOnFormComponentEditor.CreateComponent(tagclass:TComponentClass):TComponent;
+begin
+  {$IFDEF FPC}
+    Result := tagclass.Create(GetTheOwner);
+  {$ELSE}
+    Result := Designer.CreateComponent(tagclass,GetTheOwner,0,0,0,0);
+  {$ENDIF}
+end;
+
+function TInsertTagsOnFormComponentEditor.GetTheOwner:TComponent;
+begin
+  Result:=nil;
+end;
+
+///////////////////////////////////////
+//editor TAG BUILDER
+///////////////////////////////////////
+
+function  TProtocolDriverComponentEditor.GetTheOwner: TComponent;
+begin
+  Result:=ProtocolDriver.Owner;
+end;
+
+procedure TProtocolDriverComponentEditor.OpenTagBuilder;
+begin
+  ProtocolDriver.OpenTagEditor(AddTagInEditor, CreateComponent);
+end;
+
+procedure TProtocolDriverComponentEditor.ExecuteVerb(Index: LongInt);
+begin
+  if Index=0 then
+    OpenTagBuilder();
+end;
+
+function TProtocolDriverComponentEditor.GetVerb(Index: LongInt): string;
+begin
+  if Index=0 then
+    Result:='Tag Builder';
+end;
+
+function TProtocolDriverComponentEditor.GetVerbCount: LongInt;
+begin
+  if ProtocolDriver.HasTabBuilderEditor then
+    Result:=1
+  else
+    Result:=0;;
+end;
+
+procedure TProtocolDriverComponentEditor.Edit;
+begin
+  inherited Edit;
+  OpenTagBuilder();
+end;
+
+function TProtocolDriverComponentEditor.ProtocolDriver: TProtocolDriver;
+begin
+  Result:=TProtocolDriver(GetComponent);
+end;
+
+///////////////////////////////////////////////////////////////////////////////
+// BIT MAPPER
+///////////////////////////////////////////////////////////////////////////////
+
+function TTagBitMapperComponentEditor.GetTheOwner: TComponent;
+begin
+  Result:=GetComponent().Owner;
+end;
+
+procedure TTagBitMapperComponentEditor.OpenBitMapper;
+begin
+  if (GetComponent is TPLCNumberMappable) then
+    TPLCNumberMappable(GetComponent).OpenBitMapper(AddTagInEditor, CreateComponent);
+end;
+
+procedure TTagBitMapperComponentEditor.ExecuteVerb(Index: LongInt);
+begin
+  if Index=0 then
+    OpenBitMapper();
+end;
+
+function  TTagBitMapperComponentEditor.GetVerb(Index: LongInt): string;
+begin
+  if Index=0 then
+    Result:='Map bits';
+end;
+
+function  TTagBitMapperComponentEditor.GetVerbCount: LongInt;
+begin
+  Result:=1;
+end;
+
+procedure TTagBitMapperComponentEditor.Edit;
+begin
+  inherited Edit;
+  OpenBitMapper();
+end;
+
+///////////////////////////////////////////////////////////////////////////////
+// ELEMENT BLOCK MAPPER
+///////////////////////////////////////////////////////////////////////////////
+
+procedure TBlockElementMapperComponentEditor.OpenElementMapper;
+begin
+  if (GetComponent is TPLCBlock) then
+    TPLCBlock(GetComponent).MapElements(AddTagInEditor, CreateComponent);
+end;
+
+procedure TBlockElementMapperComponentEditor.ExecuteVerb(Index: LongInt);
+begin
+  if Index=0 then
+    OpenElementMapper();
+end;
+
+{$if declared(has_customhints)}
+function TBlockElementMapperComponentEditor.GetCustomHint: String;
+begin
+  if GetComponent is TPLCStruct then begin
+    Result:=Result+'Structure size in bytes:'+IntToStr(TPLCStruct(GetComponent).Size);
+    exit;
+  end;
+
+  if GetComponent is TPLCBlock then begin
+    Result:=Result+'Number of elements: '+IntToStr(TPLCBlock(GetComponent).Size);
+    exit;
+  end;
+end;
+{$ifend}
+
+function  TBlockElementMapperComponentEditor.GetVerb(Index: LongInt): string;
+begin
+  Result:='Unknow option...';
+  if Index=0 then begin
+    if GetComponent is TPLCStruct then begin
+      Result:='Map structure items...';
+      exit;
+    end;
+    if GetComponent is TPLCBlock then begin
+      Result:='Map block elements...';
+      exit;
+    end;
+  end;
+end;
+
+function  TBlockElementMapperComponentEditor.GetVerbCount: LongInt;
+begin
+  Result:=0;
+  if GetComponent is TPLCBlock then
+   Result:=1;
+end;
+
+procedure TBlockElementMapperComponentEditor.Edit;
+begin
+  inherited Edit;
+  OpenElementMapper();
+end;
+
+end.
+
Index: src/scada/scadareg.pas
===================================================================
--- src/scada/scadareg.pas	(revision 928)
+++ src/scada/scadareg.pas	(working copy)
@@ -33,7 +33,7 @@
   mutexserver, MutexClient, siemenstagassistant, modbustagassistant,
   westasciitagassistant, bitmappertagassistant, blockstructtagassistant,
   {$IFDEF FPC}
-    LResources, pSCADA_Constants, PropEdits, ComponentEditors;
+    LResources, PropEdits, ComponentEditors;
   {$ELSE}
     Types, 
     {$IFDEF DELPHI2009_UP}
Index: src/scada/sockets_w32_w64.pas
===================================================================
--- src/scada/sockets_w32_w64.pas	(revision 928)
+++ src/scada/sockets_w32_w64.pas	(working copy)
@@ -1,398 +1,398 @@
-{$i ../common/language.inc}
-{$IFDEF PORTUGUES}
-//: Implementa funções de socket para Windows.
-{$ELSE}
-//: Windows socket functions.
-{$ENDIF}
-unit sockets_w32_w64;
-
-{$IFDEF FPC}
-{$mode delphi}
-{$ENDIF}
-
-interface
-
-uses
-  windows, {$IFDEF FPC}WinSock2, {$ELSE} WinSock, {$ENDIF}socket_types, hsstrings, sysutils, commtypes;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Função que recebe dados do socket. Seus parametros são identicos a da função
-  recv/fprecv, adicionado do parametro timeout, que diz o tempo máximo para
-  receber todos os dados solicitados.
-  }
-  {$ELSE}
-  {:
-  Function that receive data of a socket. Their parameters are the same of the
-  function recv/fprecv, with a extra parameter that is the maximum timout to
-  receive all requested data on socket.
-  }
-  {$ENDIF}
-  function socket_recv(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Função que envia dados ao socket. Seus parametros são identicos a da função
-  send/fpsend, adicionado do parametro timeout, que diz o tempo máximo para
-  enviar todos os dados.
-  }
-  {$ELSE}
-  {:
-  Function that sends data through the socket. Their parameters are the same of
-  the function send/fpsend, with a extra parameter that is the maximum timout to
-  send all requested data.
-  }
-  {$ENDIF}
-  function socket_send(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
-
-  {$IFDEF PORTUGUES}
-  //: Seta o modo de operação de socket.
-  {$ELSE}
-  //: Sets the socket operation mode.
-  {$ENDIF}
-  function setblockingmode(fd:TSocket; mode:u_long):LongInt;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Função de conexão com timeout. Seus parametros são identicos a função
-  connect/fpconnect, porem adicionado o tempo máximo de espera pelo estabelecimento
-  da conexão em milisegundos.
-  @returns(0 se a conexão foi estabelecida com sucesso.)
-  }
-  {$ELSE}
-  {:
-  Connect function with timeout. Their parameters are the same of the functions
-  connect/fpconnect, with a extra parameter that is the maximum timeout of the
-  connection establishment in milliseconds.
-  @returns(0 if the connection was estabilished successful.)
-  }
-  {$ENDIF}
-  function connect_with_timeout(sock:Tsocket; address:PSockAddr; address_len:t_socklen; timeout:LongInt):LongInt;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Verifica o estado da conexão e atualiza o estado da porta da comunicação.
-  @returns(@True se ainda está conectado)
-  }
-  {$ELSE}
-  {:
-  Check the current connection state and updates the state of the communication port.
-  @returns(@True if stills connected.)
-  }
-  {$ENDIF}
-  function CheckConnection(var CommResult:TIOResult; var incRetries:Boolean; var PActive:Boolean; var FSocket:TSocket; DoCommPortDisconected:TDisconnectNotifierProc):Boolean;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Espera por uma conexao de entrada
-  @returns(@True se uma conexao de entrada foi realizada)
-  }
-  {$ELSE}
-  {:
-  Waits for a incoming connection.
-  @returns(@True if a incoming connection was done.)
-  }
-  {$ENDIF}
-  function WaitForConnection(FListenerSocket:TSocket; timeout:LongInt):Boolean;
-
-  {$IFDEF PORTUGUES}
-  {:
-  Função que informa quantos bytes estão disponíveis para serem lidos.
-  @returns(Um valor maior que zero caso existir dados disponíveis no buffer,
-           zero caso não exista ou -1 em caso de erro.)
-  }
-  {$ELSE}
-  {:
-  Rerturn how many bytes are available on receive buffer.
-  @returns(A value bigger than zero if data are available on the receive
-           buffer, zero if no data on the receive buffer and -1 on error.)
-  }
-  {$ENDIF}
-  function GetNumberOfBytesInReceiveBuffer(socket:Tsocket):LongInt;
-
-implementation
-
-function setblockingmode(fd:TSocket; mode:u_long):LongInt;
-begin
-  if ioctlsocket(fd, FIONBIO, mode)=SOCKET_ERROR then
-    Result:=-1
-  else
-    Result:=0;
-end;
-
-function connect_with_timeout(sock:Tsocket; address:PSockAddr; address_len:t_socklen; timeout:LongInt):LongInt;
-var
-  sel:TFDSet;
-  mode:u_long;
-  tv : TTimeVal;
-  p:ptimeval;
-begin
-
-  if timeout=-1 then
-    p:=nil
-  else begin
-    tv.tv_Sec:=Timeout div 1000;
-    tv.tv_Usec:=(Timeout mod 1000)*1000;
-    p:=@tv;
-  end;
-
-  Result:=0;
-
-  if connect(sock, address^, address_len) <> 0 then begin
-    if WSAGetLastError=WSAEWOULDBLOCK then begin
-      FD_ZERO(sel);
-      FD_SET(sock, sel);
-      mode := select(sock, nil, @sel, nil, p);
-
-      if (mode < 0) then begin
-        Result := -1;
-      end else begin
-        if (mode > 0) then begin
-          Result := 0;
-        end else begin
-          if (mode = 0) then begin
-            Result := -2;
-          end;
-        end;
-      end;
-    end else
-      Result := -1;
-  end;
-end;
-
-function socket_recv(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
-var
-  sel:TFDSet;
-  mode:u_long;
-  tv : TTimeVal;
-  p:ptimeval;
-begin
-
-  if timeout=-1 then
-    p:=nil
-  else begin
-    tv.tv_Sec:=Timeout div 1000;
-    tv.tv_Usec:=(Timeout mod 1000)*1000;
-    p:=@tv;
-  end;
-
-  Result:=recv(sock, buf^, len, flags);
-
-  if Result = SOCKET_ERROR then begin
-    if (WSAGetLastError=WSAEWOULDBLOCK) then begin
-      FD_ZERO(sel);
-      FD_SET(sock, sel);
-      mode := select(sock, @sel, nil, nil, p);
-
-      if (mode < 0) then begin
-        Result := -1;
-      end else begin
-        if (mode > 0) then begin
-          Result := recv(sock, buf^, len, flags);
-        end else begin
-          if (mode = 0) then begin
-            Result := -2;
-          end;
-        end;
-      end;
-    end else
-      Result := -1;
-  end;
-end;
-
-function socket_send(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
-var
-  sel:TFDSet;
-  mode:u_long;
-  tv : TTimeVal;
-  p:ptimeval;
-begin
-
-  if timeout=-1 then
-    p:=nil
-  else begin
-    tv.tv_Sec:=Timeout div 1000;
-    tv.tv_Usec:=(Timeout mod 1000)*1000;
-    p:=@tv;
-  end;
-
-  Result:=send(sock, buf^, len, flags);
-
-  if Result = SOCKET_ERROR then begin
-    if WSAGetLastError=WSAEWOULDBLOCK then begin
-      FD_ZERO(sel);
-      FD_SET(sock, sel);
-      mode := select(sock, nil, @sel, nil, p);
-
-      if (mode < 0) then begin
-        Result := -1;
-      end else begin
-        if (mode > 0) then begin
-          Result := send(sock, buf^, len, flags);
-        end else begin
-          if (mode = 0) then begin
-            Result := -2;
-          end;
-        end;
-      end;
-    end else
-      Result := -1;
-  end;
-end;
-
-function CheckConnection(var CommResult:TIOResult; var incRetries:Boolean; var PActive:Boolean; var FSocket:TSocket; DoCommPortDisconected:TDisconnectNotifierProc):Boolean;
-var
-  retval, nbytes:LongInt;
-  t:TTimeVal;
-  readset:TFDSet;
-begin
-  Result:=true;
-
-  retval:=0;
-  nbytes:=0;
-  {$IFDEF FPC}
-  retval:=ioctlsocket(FSocket,FIONREAD,@nbytes);
-  {$ELSE}
-  retval:=ioctlsocket(FSocket,FIONREAD,nbytes);
-  {$ENDIF}
-  if retval<>0 then begin
-    if Assigned(DoCommPortDisconected) then
-      DoCommPortDisconected();
-    CommResult:=iorPortError;
-    PActive:=false;
-    Result:=false;
-    exit;
-  end;
-
-  if (nbytes>0) then begin   // there is something in receive buffer, it doesn't seem the socket has been closed
-    Result:=true;
-    exit;
-  end;
-
-  t.tv_usec:=1;
-  t.tv_sec:=0;
-
-  FD_ZERO(readset);
-  FD_SET(FSocket,readset);
-  retval:=Select(FSocket,@readset,nil,nil,@t);
-
-  if (retval=0) then begin   //timeout, appears to be ok...
-    Result:=true;
-    CommResult:=iorTimeOut;
-    incRetries:=true;
-    exit;
-  end;
-
-  if (retval<0) then begin //error on socket...
-    if Assigned(DoCommPortDisconected) then
-      DoCommPortDisconected();
-    CommResult:=iorPortError;
-    PActive:=false;
-    Result:=false;
-    exit;
-  end;
-
-  if (retval=1) then begin  // seems there is something in our receive buffer!!
-    // now we check how many bytes are in receive buffer
-    {$IFDEF FPC}
-    retval:=ioctlsocket(FSocket,FIONREAD,@nbytes);
-    {$ELSE}
-    retval:=ioctlsocket(FSocket,FIONREAD,nbytes);
-    {$ENDIF};
-
-    if (retval<>0) then begin  // some error occured
-      if Assigned(DoCommPortDisconected) then
-        DoCommPortDisconected();
-      CommResult:=iorPortError;
-      PActive:=false;
-      Result:=false;
-      exit;
-    end;
-
-    if (nbytes=0) then begin
-      if Assigned(DoCommPortDisconected) then
-        DoCommPortDisconected();
-      CommResult:=iorNotReady;
-      PActive:=false;
-      Result:=false;
-      exit;
-    end;
-
-    incRetries:=true;
-  end;
-end;
-
-function WaitForConnection(FListenerSocket:TSocket; timeout:LongInt):Boolean;
-var
-  sel:TFDSet;
-  mode:u_long;
-  tv : TTimeVal;
-  p:ptimeval;
-begin
-
-  if timeout=-1 then
-    p:=nil
-  else begin
-    tv.tv_Sec:=Timeout div 1000;
-    tv.tv_Usec:=(Timeout mod 1000)*1000;
-    p:=@tv;
-  end;
-
-
-  FD_ZERO(sel);
-  FD_SET(FListenerSocket, sel);
-  mode := select(FListenerSocket, @sel, nil, nil, p);
-
-  if (mode <= 0) then begin
-    Result := false;
-  end else
-    if (mode > 0) then begin
-      Result := true;
-    end;
-end;
-
-function GetNumberOfBytesInReceiveBuffer(socket: Tsocket): LongInt;
-var
-  retval, nbytes:LongInt;
-begin
-  Result:=0;
-
-  {$IFDEF FPC}
-  retval:=ioctlsocket(socket,FIONREAD,@nbytes);
-  {$ELSE}
-  retval:=ioctlsocket(socket,FIONREAD,nbytes);
-  {$ENDIF}
-
-  if retval<>0 then begin
-    Result:=-1;
-    exit;
-  end;
-
-  if (nbytes>0) then
-    Result:=nbytes;
-end;
-
-{$IF defined(WIN32) or defined(WIN64)}
-var
-  wsaData:TWSAData;
-  version:WORD;
-initialization
-
-  //inicialização Winsock
-  version := MAKEWORD( 2, 0 );
-
-  //check for error
-  if WSAStartup( version, wsaData ) <> 0 then
-    raise Exception.Create(SerrorInitializingWinsock);
-
-  //check for correct version
-  if (LOBYTE(wsaData.wVersion) <> 2) or (HIBYTE(wsaData.wVersion)<>0) then begin
-    //incorrect WinSock version
-    WSACleanup();
-    raise Exception.Create(SinvalidWinSockVersion);
-  end;
-finalization
-  WSACleanup;
-{$IFEND}
-end.
-
+{.$i ../common/language.inc}
+{$IFDEF PORTUGUES}
+//: Implementa funções de socket para Windows.
+{$ELSE}
+//: Windows socket functions.
+{$ENDIF}
+unit sockets_w32_w64;
+
+{$IFDEF FPC}
+{$mode delphi}
+{$ENDIF}
+
+interface
+
+uses
+  windows, {$IFDEF FPC}WinSock2, {$ELSE} WinSock, {$ENDIF}socket_types, pSCADA_strings, sysutils, commtypes, pSCADA_Types;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Função que recebe dados do socket. Seus parametros são identicos a da função
+  recv/fprecv, adicionado do parametro timeout, que diz o tempo máximo para
+  receber todos os dados solicitados.
+  }
+  {$ELSE}
+  {:
+  Function that receive data of a socket. Their parameters are the same of the
+  function recv/fprecv, with a extra parameter that is the maximum timout to
+  receive all requested data on socket.
+  }
+  {$ENDIF}
+  function socket_recv(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Função que envia dados ao socket. Seus parametros são identicos a da função
+  send/fpsend, adicionado do parametro timeout, que diz o tempo máximo para
+  enviar todos os dados.
+  }
+  {$ELSE}
+  {:
+  Function that sends data through the socket. Their parameters are the same of
+  the function send/fpsend, with a extra parameter that is the maximum timout to
+  send all requested data.
+  }
+  {$ENDIF}
+  function socket_send(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
+
+  {$IFDEF PORTUGUES}
+  //: Seta o modo de operação de socket.
+  {$ELSE}
+  //: Sets the socket operation mode.
+  {$ENDIF}
+  function setblockingmode(fd:TSocket; mode:u_long):LongInt;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Função de conexão com timeout. Seus parametros são identicos a função
+  connect/fpconnect, porem adicionado o tempo máximo de espera pelo estabelecimento
+  da conexão em milisegundos.
+  @returns(0 se a conexão foi estabelecida com sucesso.)
+  }
+  {$ELSE}
+  {:
+  Connect function with timeout. Their parameters are the same of the functions
+  connect/fpconnect, with a extra parameter that is the maximum timeout of the
+  connection establishment in milliseconds.
+  @returns(0 if the connection was estabilished successful.)
+  }
+  {$ENDIF}
+  function connect_with_timeout(sock:Tsocket; address:PSockAddr; address_len:t_socklen; timeout:LongInt):LongInt;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Verifica o estado da conexão e atualiza o estado da porta da comunicação.
+  @returns(@True se ainda está conectado)
+  }
+  {$ELSE}
+  {:
+  Check the current connection state and updates the state of the communication port.
+  @returns(@True if stills connected.)
+  }
+  {$ENDIF}
+  function CheckConnection(var CommResult:TIOResult; var incRetries:Boolean; var PActive:Boolean; var FSocket:TSocket; DoCommPortDisconected:TDisconnectNotifierProc):Boolean;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Espera por uma conexao de entrada
+  @returns(@True se uma conexao de entrada foi realizada)
+  }
+  {$ELSE}
+  {:
+  Waits for a incoming connection.
+  @returns(@True if a incoming connection was done.)
+  }
+  {$ENDIF}
+  function WaitForConnection(FListenerSocket:TSocket; timeout:LongInt):Boolean;
+
+  {$IFDEF PORTUGUES}
+  {:
+  Função que informa quantos bytes estão disponíveis para serem lidos.
+  @returns(Um valor maior que zero caso existir dados disponíveis no buffer,
+           zero caso não exista ou -1 em caso de erro.)
+  }
+  {$ELSE}
+  {:
+  Rerturn how many bytes are available on receive buffer.
+  @returns(A value bigger than zero if data are available on the receive
+           buffer, zero if no data on the receive buffer and -1 on error.)
+  }
+  {$ENDIF}
+  function GetNumberOfBytesInReceiveBuffer(socket:Tsocket):LongInt;
+
+implementation
+
+function setblockingmode(fd:TSocket; mode:u_long):LongInt;
+begin
+  if ioctlsocket(fd, FIONBIO, mode)=SOCKET_ERROR then
+    Result:=-1
+  else
+    Result:=0;
+end;
+
+function connect_with_timeout(sock:Tsocket; address:PSockAddr; address_len:t_socklen; timeout:LongInt):LongInt;
+var
+  sel:TFDSet;
+  mode:u_long;
+  tv : TTimeVal;
+  p:ptimeval;
+begin
+
+  if timeout=-1 then
+    p:=nil
+  else begin
+    tv.tv_Sec:=Timeout div 1000;
+    tv.tv_Usec:=(Timeout mod 1000)*1000;
+    p:=@tv;
+  end;
+
+  Result:=0;
+
+  if connect(sock, address^, address_len) <> 0 then begin
+    if WSAGetLastError=WSAEWOULDBLOCK then begin
+      FD_ZERO(sel);
+      FD_SET(sock, sel);
+      mode := select(sock, nil, @sel, nil, p);
+
+      if (mode < 0) then begin
+        Result := -1;
+      end else begin
+        if (mode > 0) then begin
+          Result := 0;
+        end else begin
+          if (mode = 0) then begin
+            Result := -2;
+          end;
+        end;
+      end;
+    end else
+      Result := -1;
+  end;
+end;
+
+function socket_recv(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
+var
+  sel:TFDSet;
+  mode:u_long;
+  tv : TTimeVal;
+  p:ptimeval;
+begin
+
+  if timeout=-1 then
+    p:=nil
+  else begin
+    tv.tv_Sec:=Timeout div 1000;
+    tv.tv_Usec:=(Timeout mod 1000)*1000;
+    p:=@tv;
+  end;
+
+  Result:=recv(sock, buf^, len, flags);
+
+  if Result = SOCKET_ERROR then begin
+    if (WSAGetLastError=WSAEWOULDBLOCK) then begin
+      FD_ZERO(sel);
+      FD_SET(sock, sel);
+      mode := select(sock, @sel, nil, nil, p);
+
+      if (mode < 0) then begin
+        Result := -1;
+      end else begin
+        if (mode > 0) then begin
+          Result := recv(sock, buf^, len, flags);
+        end else begin
+          if (mode = 0) then begin
+            Result := -2;
+          end;
+        end;
+      end;
+    end else
+      Result := -1;
+  end;
+end;
+
+function socket_send(sock:Tsocket; buf:PByte; len: Cardinal; flags, timeout: LongInt):LongInt;
+var
+  sel:TFDSet;
+  mode:u_long;
+  tv : TTimeVal;
+  p:ptimeval;
+begin
+
+  if timeout=-1 then
+    p:=nil
+  else begin
+    tv.tv_Sec:=Timeout div 1000;
+    tv.tv_Usec:=(Timeout mod 1000)*1000;
+    p:=@tv;
+  end;
+
+  Result:=send(sock, buf^, len, flags);
+
+  if Result = SOCKET_ERROR then begin
+    if WSAGetLastError=WSAEWOULDBLOCK then begin
+      FD_ZERO(sel);
+      FD_SET(sock, sel);
+      mode := select(sock, nil, @sel, nil, p);
+
+      if (mode < 0) then begin
+        Result := -1;
+      end else begin
+        if (mode > 0) then begin
+          Result := send(sock, buf^, len, flags);
+        end else begin
+          if (mode = 0) then begin
+            Result := -2;
+          end;
+        end;
+      end;
+    end else
+      Result := -1;
+  end;
+end;
+
+function CheckConnection(var CommResult:TIOResult; var incRetries:Boolean; var PActive:Boolean; var FSocket:TSocket; DoCommPortDisconected:TDisconnectNotifierProc):Boolean;
+var
+  retval, nbytes:LongInt;
+  t:TTimeVal;
+  readset:TFDSet;
+begin
+  Result:=true;
+
+  retval:=0;
+  nbytes:=0;
+  {$IFDEF FPC}
+  retval:=ioctlsocket(FSocket,FIONREAD,@nbytes);
+  {$ELSE}
+  retval:=ioctlsocket(FSocket,FIONREAD,nbytes);
+  {$ENDIF}
+  if retval<>0 then begin
+    if Assigned(DoCommPortDisconected) then
+      DoCommPortDisconected();
+    CommResult:=iorPortError;
+    PActive:=false;
+    Result:=false;
+    exit;
+  end;
+
+  if (nbytes>0) then begin   // there is something in receive buffer, it doesn't seem the socket has been closed
+    Result:=true;
+    exit;
+  end;
+
+  t.tv_usec:=1;
+  t.tv_sec:=0;
+
+  FD_ZERO(readset);
+  FD_SET(FSocket,readset);
+  retval:=Select(FSocket,@readset,nil,nil,@t);
+
+  if (retval=0) then begin   //timeout, appears to be ok...
+    Result:=true;
+    CommResult:=iorTimeOut;
+    incRetries:=true;
+    exit;
+  end;
+
+  if (retval<0) then begin //error on socket...
+    if Assigned(DoCommPortDisconected) then
+      DoCommPortDisconected();
+    CommResult:=iorPortError;
+    PActive:=false;
+    Result:=false;
+    exit;
+  end;
+
+  if (retval=1) then begin  // seems there is something in our receive buffer!!
+    // now we check how many bytes are in receive buffer
+    {$IFDEF FPC}
+    retval:=ioctlsocket(FSocket,FIONREAD,@nbytes);
+    {$ELSE}
+    retval:=ioctlsocket(FSocket,FIONREAD,nbytes);
+    {$ENDIF};
+
+    if (retval<>0) then begin  // some error occured
+      if Assigned(DoCommPortDisconected) then
+        DoCommPortDisconected();
+      CommResult:=iorPortError;
+      PActive:=false;
+      Result:=false;
+      exit;
+    end;
+
+    if (nbytes=0) then begin
+      if Assigned(DoCommPortDisconected) then
+        DoCommPortDisconected();
+      CommResult:=iorNotReady;
+      PActive:=false;
+      Result:=false;
+      exit;
+    end;
+
+    incRetries:=true;
+  end;
+end;
+
+function WaitForConnection(FListenerSocket:TSocket; timeout:LongInt):Boolean;
+var
+  sel:TFDSet;
+  mode:u_long;
+  tv : TTimeVal;
+  p:ptimeval;
+begin
+
+  if timeout=-1 then
+    p:=nil
+  else begin
+    tv.tv_Sec:=Timeout div 1000;
+    tv.tv_Usec:=(Timeout mod 1000)*1000;
+    p:=@tv;
+  end;
+
+
+  FD_ZERO(sel);
+  FD_SET(FListenerSocket, sel);
+  mode := select(FListenerSocket, @sel, nil, nil, p);
+
+  if (mode <= 0) then begin
+    Result := false;
+  end else
+    if (mode > 0) then begin
+      Result := true;
+    end;
+end;
+
+function GetNumberOfBytesInReceiveBuffer(socket: Tsocket): LongInt;
+var
+  retval, nbytes:LongInt;
+begin
+  Result:=0;
+
+  {$IFDEF FPC}
+  retval:=ioctlsocket(socket,FIONREAD,@nbytes);
+  {$ELSE}
+  retval:=ioctlsocket(socket,FIONREAD,nbytes);
+  {$ENDIF}
+
+  if retval<>0 then begin
+    Result:=-1;
+    exit;
+  end;
+
+  if (nbytes>0) then
+    Result:=nbytes;
+end;
+
+{$IF defined(WIN32) or defined(WIN64)}
+var
+  wsaData:TWSAData;
+  version:WORD;
+initialization
+
+  //inicialização Winsock
+  version := MAKEWORD( 2, 0 );
+
+  //check for error
+  if WSAStartup( version, wsaData ) <> 0 then
+    raise Exception.Create(SerrorInitializingWinsock);
+
+  //check for correct version
+  if (LOBYTE(wsaData.wVersion) <> 2) or (HIBYTE(wsaData.wVersion)<>0) then begin
+    //incorrect WinSock version
+    WSACleanup();
+    raise Exception.Create(SinvalidWinSockVersion);
+  end;
+finalization
+  WSACleanup;
+{$IFEND}
+end.
+
Index: tools/LazResGUI/umain.pas
===================================================================
--- tools/LazResGUI/umain.pas	(revision 928)
+++ tools/LazResGUI/umain.pas	(working copy)
@@ -506,7 +506,7 @@
 
       with StringGrid1 do
         Finder(Cells[4,row],Cells[3,row],UpperCase(Cells[2,row])='YES');
-      List.SaveToFile('/home/fabiolg/lista.txt');
+      List.SaveToFile('lista.txt');
 
       try
         for litem:=0 to List.Count-1 do begin
